; NOTE: Assertions have been autogenerated by utils/update_llc_test_checks.py UTC_ARGS: --version 5
; RUN: sed 's/iXLen/i32/g' %s | llc -mtriple=riscv32 -O2  \
; RUN:   | FileCheck %s --check-prefix=CHECK-ALIGNED-RV32
; RUN: sed 's/iXLen/i64/g' %s | llc -mtriple=riscv64 -O2  \
; RUN:   | FileCheck %s --check-prefix=CHECK-ALIGNED-RV64
; RUN: sed 's/iXLen/i32/g' %s | llc -mtriple=riscv32 -mattr=+v -O2  \
; RUN:   | FileCheck %s --check-prefixes=CHECK-ALIGNED-RV32,CHECK-ALIGNED-RV32-V
; RUN: sed 's/iXLen/i64/g' %s | llc -mtriple=riscv64 -mattr=+v -O2  \
; RUN:   | FileCheck %s --check-prefixes=CHECK-ALIGNED-RV64,CHECK-ALIGNED-RV64-V
; RUN: sed 's/iXLen/i32/g' %s | llc -mtriple=riscv32 -mattr=+unaligned-scalar-mem -O2 \
; RUN:   | FileCheck %s --check-prefix=CHECK-UNALIGNED-RV32
; RUN: sed 's/iXLen/i64/g' %s | llc -mtriple=riscv64 -mattr=+unaligned-scalar-mem -O2 \
; RUN:   | FileCheck %s --check-prefix=CHECK-UNALIGNED-RV64
; RUN: sed 's/iXLen/i32/g' %s | llc -mtriple=riscv32 -mattr=+v,+unaligned-scalar-mem,+unaligned-vector-mem -O2 \
; RUN:   | FileCheck %s --check-prefixes=CHECK-UNALIGNED-RV32,CHECK-UNALIGNED-RV32-V
; RUN: sed 's/iXLen/i64/g' %s | llc -mtriple=riscv64 -mattr=+v,+unaligned-scalar-mem,+unaligned-vector-mem -O2 \
; RUN:   | FileCheck %s --check-prefixes=CHECK-UNALIGNED-RV64,CHECK-UNALIGNED-RV64-V

declare i32 @bcmp(i8*, i8*, iXLen) nounwind readonly
declare i32 @memcmp(i8*, i8*, iXLen) nounwind readonly

define i1 @bcmp_size_0(i8* %s1, i8* %s2) {
; CHECK-ALIGNED-RV32-LABEL: bcmp_size_0:
; CHECK-ALIGNED-RV32:       # %bb.0: # %entry
; CHECK-ALIGNED-RV32-NEXT:    addi sp, sp, -16
; CHECK-ALIGNED-RV32-NEXT:    .cfi_def_cfa_offset 16
; CHECK-ALIGNED-RV32-NEXT:    sw ra, 12(sp) # 4-byte Folded Spill
; CHECK-ALIGNED-RV32-NEXT:    .cfi_offset ra, -4
; CHECK-ALIGNED-RV32-NEXT:    li a2, 0
; CHECK-ALIGNED-RV32-NEXT:    call bcmp
; CHECK-ALIGNED-RV32-NEXT:    seqz a0, a0
; CHECK-ALIGNED-RV32-NEXT:    lw ra, 12(sp) # 4-byte Folded Reload
; CHECK-ALIGNED-RV32-NEXT:    addi sp, sp, 16
; CHECK-ALIGNED-RV32-NEXT:    ret
;
; CHECK-ALIGNED-RV64-LABEL: bcmp_size_0:
; CHECK-ALIGNED-RV64:       # %bb.0: # %entry
; CHECK-ALIGNED-RV64-NEXT:    addi sp, sp, -16
; CHECK-ALIGNED-RV64-NEXT:    .cfi_def_cfa_offset 16
; CHECK-ALIGNED-RV64-NEXT:    sd ra, 8(sp) # 8-byte Folded Spill
; CHECK-ALIGNED-RV64-NEXT:    .cfi_offset ra, -8
; CHECK-ALIGNED-RV64-NEXT:    li a2, 0
; CHECK-ALIGNED-RV64-NEXT:    call bcmp
; CHECK-ALIGNED-RV64-NEXT:    sext.w a0, a0
; CHECK-ALIGNED-RV64-NEXT:    seqz a0, a0
; CHECK-ALIGNED-RV64-NEXT:    ld ra, 8(sp) # 8-byte Folded Reload
; CHECK-ALIGNED-RV64-NEXT:    addi sp, sp, 16
; CHECK-ALIGNED-RV64-NEXT:    ret
;
; CHECK-UNALIGNED-RV32-LABEL: bcmp_size_0:
; CHECK-UNALIGNED-RV32:       # %bb.0: # %entry
; CHECK-UNALIGNED-RV32-NEXT:    addi sp, sp, -16
; CHECK-UNALIGNED-RV32-NEXT:    .cfi_def_cfa_offset 16
; CHECK-UNALIGNED-RV32-NEXT:    sw ra, 12(sp) # 4-byte Folded Spill
; CHECK-UNALIGNED-RV32-NEXT:    .cfi_offset ra, -4
; CHECK-UNALIGNED-RV32-NEXT:    li a2, 0
; CHECK-UNALIGNED-RV32-NEXT:    call bcmp
; CHECK-UNALIGNED-RV32-NEXT:    seqz a0, a0
; CHECK-UNALIGNED-RV32-NEXT:    lw ra, 12(sp) # 4-byte Folded Reload
; CHECK-UNALIGNED-RV32-NEXT:    addi sp, sp, 16
; CHECK-UNALIGNED-RV32-NEXT:    ret
;
; CHECK-UNALIGNED-RV64-LABEL: bcmp_size_0:
; CHECK-UNALIGNED-RV64:       # %bb.0: # %entry
; CHECK-UNALIGNED-RV64-NEXT:    addi sp, sp, -16
; CHECK-UNALIGNED-RV64-NEXT:    .cfi_def_cfa_offset 16
; CHECK-UNALIGNED-RV64-NEXT:    sd ra, 8(sp) # 8-byte Folded Spill
; CHECK-UNALIGNED-RV64-NEXT:    .cfi_offset ra, -8
; CHECK-UNALIGNED-RV64-NEXT:    li a2, 0
; CHECK-UNALIGNED-RV64-NEXT:    call bcmp
; CHECK-UNALIGNED-RV64-NEXT:    sext.w a0, a0
; CHECK-UNALIGNED-RV64-NEXT:    seqz a0, a0
; CHECK-UNALIGNED-RV64-NEXT:    ld ra, 8(sp) # 8-byte Folded Reload
; CHECK-UNALIGNED-RV64-NEXT:    addi sp, sp, 16
; CHECK-UNALIGNED-RV64-NEXT:    ret
entry:
  %bcmp = call i32 @bcmp(i8* %s1, i8* %s2, iXLen 0)
  %ret = icmp eq i32 %bcmp, 0
  ret i1 %ret
}

define i1 @bcmp_size_1(i8* %s1, i8* %s2) {
; CHECK-ALIGNED-RV32-LABEL: bcmp_size_1:
; CHECK-ALIGNED-RV32:       # %bb.0: # %entry
; CHECK-ALIGNED-RV32-NEXT:    lbu a0, 0(a0)
; CHECK-ALIGNED-RV32-NEXT:    lbu a1, 0(a1)
; CHECK-ALIGNED-RV32-NEXT:    xor a0, a0, a1
; CHECK-ALIGNED-RV32-NEXT:    seqz a0, a0
; CHECK-ALIGNED-RV32-NEXT:    ret
;
; CHECK-ALIGNED-RV64-LABEL: bcmp_size_1:
; CHECK-ALIGNED-RV64:       # %bb.0: # %entry
; CHECK-ALIGNED-RV64-NEXT:    lbu a0, 0(a0)
; CHECK-ALIGNED-RV64-NEXT:    lbu a1, 0(a1)
; CHECK-ALIGNED-RV64-NEXT:    xor a0, a0, a1
; CHECK-ALIGNED-RV64-NEXT:    seqz a0, a0
; CHECK-ALIGNED-RV64-NEXT:    ret
;
; CHECK-UNALIGNED-RV32-LABEL: bcmp_size_1:
; CHECK-UNALIGNED-RV32:       # %bb.0: # %entry
; CHECK-UNALIGNED-RV32-NEXT:    lbu a0, 0(a0)
; CHECK-UNALIGNED-RV32-NEXT:    lbu a1, 0(a1)
; CHECK-UNALIGNED-RV32-NEXT:    xor a0, a0, a1
; CHECK-UNALIGNED-RV32-NEXT:    seqz a0, a0
; CHECK-UNALIGNED-RV32-NEXT:    ret
;
; CHECK-UNALIGNED-RV64-LABEL: bcmp_size_1:
; CHECK-UNALIGNED-RV64:       # %bb.0: # %entry
; CHECK-UNALIGNED-RV64-NEXT:    lbu a0, 0(a0)
; CHECK-UNALIGNED-RV64-NEXT:    lbu a1, 0(a1)
; CHECK-UNALIGNED-RV64-NEXT:    xor a0, a0, a1
; CHECK-UNALIGNED-RV64-NEXT:    seqz a0, a0
; CHECK-UNALIGNED-RV64-NEXT:    ret
entry:
  %bcmp = call i32 @bcmp(i8* %s1, i8* %s2, iXLen 1)
  %ret = icmp eq i32 %bcmp, 0
  ret i1 %ret
}

define i1 @bcmp_size_2(i8* %s1, i8* %s2) {
; CHECK-ALIGNED-RV32-LABEL: bcmp_size_2:
; CHECK-ALIGNED-RV32:       # %bb.0: # %entry
; CHECK-ALIGNED-RV32-NEXT:    lbu a2, 1(a0)
; CHECK-ALIGNED-RV32-NEXT:    lbu a0, 0(a0)
; CHECK-ALIGNED-RV32-NEXT:    lbu a3, 1(a1)
; CHECK-ALIGNED-RV32-NEXT:    lbu a1, 0(a1)
; CHECK-ALIGNED-RV32-NEXT:    slli a2, a2, 8
; CHECK-ALIGNED-RV32-NEXT:    or a0, a2, a0
; CHECK-ALIGNED-RV32-NEXT:    slli a3, a3, 8
; CHECK-ALIGNED-RV32-NEXT:    or a1, a3, a1
; CHECK-ALIGNED-RV32-NEXT:    xor a0, a0, a1
; CHECK-ALIGNED-RV32-NEXT:    seqz a0, a0
; CHECK-ALIGNED-RV32-NEXT:    ret
;
; CHECK-ALIGNED-RV64-LABEL: bcmp_size_2:
; CHECK-ALIGNED-RV64:       # %bb.0: # %entry
; CHECK-ALIGNED-RV64-NEXT:    lbu a2, 1(a0)
; CHECK-ALIGNED-RV64-NEXT:    lbu a0, 0(a0)
; CHECK-ALIGNED-RV64-NEXT:    lbu a3, 1(a1)
; CHECK-ALIGNED-RV64-NEXT:    lbu a1, 0(a1)
; CHECK-ALIGNED-RV64-NEXT:    slli a2, a2, 8
; CHECK-ALIGNED-RV64-NEXT:    or a0, a2, a0
; CHECK-ALIGNED-RV64-NEXT:    slli a3, a3, 8
; CHECK-ALIGNED-RV64-NEXT:    or a1, a3, a1
; CHECK-ALIGNED-RV64-NEXT:    xor a0, a0, a1
; CHECK-ALIGNED-RV64-NEXT:    seqz a0, a0
; CHECK-ALIGNED-RV64-NEXT:    ret
;
; CHECK-UNALIGNED-RV32-LABEL: bcmp_size_2:
; CHECK-UNALIGNED-RV32:       # %bb.0: # %entry
; CHECK-UNALIGNED-RV32-NEXT:    lhu a0, 0(a0)
; CHECK-UNALIGNED-RV32-NEXT:    lhu a1, 0(a1)
; CHECK-UNALIGNED-RV32-NEXT:    xor a0, a0, a1
; CHECK-UNALIGNED-RV32-NEXT:    seqz a0, a0
; CHECK-UNALIGNED-RV32-NEXT:    ret
;
; CHECK-UNALIGNED-RV64-LABEL: bcmp_size_2:
; CHECK-UNALIGNED-RV64:       # %bb.0: # %entry
; CHECK-UNALIGNED-RV64-NEXT:    lhu a0, 0(a0)
; CHECK-UNALIGNED-RV64-NEXT:    lhu a1, 0(a1)
; CHECK-UNALIGNED-RV64-NEXT:    xor a0, a0, a1
; CHECK-UNALIGNED-RV64-NEXT:    seqz a0, a0
; CHECK-UNALIGNED-RV64-NEXT:    ret
entry:
  %bcmp = call i32 @bcmp(i8* %s1, i8* %s2, iXLen 2)
  %ret = icmp eq i32 %bcmp, 0
  ret i1 %ret
}

define i1 @bcmp_size_3(i8* %s1, i8* %s2) {
; CHECK-ALIGNED-RV32-LABEL: bcmp_size_3:
; CHECK-ALIGNED-RV32:       # %bb.0: # %entry
; CHECK-ALIGNED-RV32-NEXT:    lbu a2, 1(a0)
; CHECK-ALIGNED-RV32-NEXT:    lbu a3, 0(a0)
; CHECK-ALIGNED-RV32-NEXT:    slli a2, a2, 8
; CHECK-ALIGNED-RV32-NEXT:    or a2, a2, a3
; CHECK-ALIGNED-RV32-NEXT:    lbu a3, 1(a1)
; CHECK-ALIGNED-RV32-NEXT:    lbu a4, 0(a1)
; CHECK-ALIGNED-RV32-NEXT:    lbu a0, 2(a0)
; CHECK-ALIGNED-RV32-NEXT:    lbu a1, 2(a1)
; CHECK-ALIGNED-RV32-NEXT:    slli a3, a3, 8
; CHECK-ALIGNED-RV32-NEXT:    or a3, a3, a4
; CHECK-ALIGNED-RV32-NEXT:    xor a2, a2, a3
; CHECK-ALIGNED-RV32-NEXT:    xor a0, a0, a1
; CHECK-ALIGNED-RV32-NEXT:    or a0, a2, a0
; CHECK-ALIGNED-RV32-NEXT:    seqz a0, a0
; CHECK-ALIGNED-RV32-NEXT:    ret
;
; CHECK-ALIGNED-RV64-LABEL: bcmp_size_3:
; CHECK-ALIGNED-RV64:       # %bb.0: # %entry
; CHECK-ALIGNED-RV64-NEXT:    lbu a2, 1(a0)
; CHECK-ALIGNED-RV64-NEXT:    lbu a3, 0(a0)
; CHECK-ALIGNED-RV64-NEXT:    slli a2, a2, 8
; CHECK-ALIGNED-RV64-NEXT:    or a2, a2, a3
; CHECK-ALIGNED-RV64-NEXT:    lbu a3, 1(a1)
; CHECK-ALIGNED-RV64-NEXT:    lbu a4, 0(a1)
; CHECK-ALIGNED-RV64-NEXT:    lbu a0, 2(a0)
; CHECK-ALIGNED-RV64-NEXT:    lbu a1, 2(a1)
; CHECK-ALIGNED-RV64-NEXT:    slli a3, a3, 8
; CHECK-ALIGNED-RV64-NEXT:    or a3, a3, a4
; CHECK-ALIGNED-RV64-NEXT:    xor a2, a2, a3
; CHECK-ALIGNED-RV64-NEXT:    xor a0, a0, a1
; CHECK-ALIGNED-RV64-NEXT:    or a0, a2, a0
; CHECK-ALIGNED-RV64-NEXT:    seqz a0, a0
; CHECK-ALIGNED-RV64-NEXT:    ret
;
; CHECK-UNALIGNED-RV32-LABEL: bcmp_size_3:
; CHECK-UNALIGNED-RV32:       # %bb.0: # %entry
; CHECK-UNALIGNED-RV32-NEXT:    lhu a2, 0(a0)
; CHECK-UNALIGNED-RV32-NEXT:    lhu a3, 0(a1)
; CHECK-UNALIGNED-RV32-NEXT:    lbu a0, 2(a0)
; CHECK-UNALIGNED-RV32-NEXT:    lbu a1, 2(a1)
; CHECK-UNALIGNED-RV32-NEXT:    xor a2, a2, a3
; CHECK-UNALIGNED-RV32-NEXT:    xor a0, a0, a1
; CHECK-UNALIGNED-RV32-NEXT:    or a0, a2, a0
; CHECK-UNALIGNED-RV32-NEXT:    seqz a0, a0
; CHECK-UNALIGNED-RV32-NEXT:    ret
;
; CHECK-UNALIGNED-RV64-LABEL: bcmp_size_3:
; CHECK-UNALIGNED-RV64:       # %bb.0: # %entry
; CHECK-UNALIGNED-RV64-NEXT:    lhu a2, 0(a0)
; CHECK-UNALIGNED-RV64-NEXT:    lhu a3, 0(a1)
; CHECK-UNALIGNED-RV64-NEXT:    lbu a0, 2(a0)
; CHECK-UNALIGNED-RV64-NEXT:    lbu a1, 2(a1)
; CHECK-UNALIGNED-RV64-NEXT:    xor a2, a2, a3
; CHECK-UNALIGNED-RV64-NEXT:    xor a0, a0, a1
; CHECK-UNALIGNED-RV64-NEXT:    or a0, a2, a0
; CHECK-UNALIGNED-RV64-NEXT:    seqz a0, a0
; CHECK-UNALIGNED-RV64-NEXT:    ret
entry:
  %bcmp = call i32 @bcmp(i8* %s1, i8* %s2, iXLen 3)
  %ret = icmp eq i32 %bcmp, 0
  ret i1 %ret
}

define i1 @bcmp_size_4(i8* %s1, i8* %s2) {
; CHECK-ALIGNED-RV32-LABEL: bcmp_size_4:
; CHECK-ALIGNED-RV32:       # %bb.0: # %entry
; CHECK-ALIGNED-RV32-NEXT:    lbu a2, 1(a0)
; CHECK-ALIGNED-RV32-NEXT:    lbu a3, 0(a0)
; CHECK-ALIGNED-RV32-NEXT:    lbu a4, 2(a0)
; CHECK-ALIGNED-RV32-NEXT:    lbu a0, 3(a0)
; CHECK-ALIGNED-RV32-NEXT:    slli a2, a2, 8
; CHECK-ALIGNED-RV32-NEXT:    or a2, a2, a3
; CHECK-ALIGNED-RV32-NEXT:    slli a4, a4, 16
; CHECK-ALIGNED-RV32-NEXT:    slli a0, a0, 24
; CHECK-ALIGNED-RV32-NEXT:    or a0, a0, a4
; CHECK-ALIGNED-RV32-NEXT:    or a0, a0, a2
; CHECK-ALIGNED-RV32-NEXT:    lbu a2, 1(a1)
; CHECK-ALIGNED-RV32-NEXT:    lbu a3, 0(a1)
; CHECK-ALIGNED-RV32-NEXT:    lbu a4, 2(a1)
; CHECK-ALIGNED-RV32-NEXT:    lbu a1, 3(a1)
; CHECK-ALIGNED-RV32-NEXT:    slli a2, a2, 8
; CHECK-ALIGNED-RV32-NEXT:    or a2, a2, a3
; CHECK-ALIGNED-RV32-NEXT:    slli a4, a4, 16
; CHECK-ALIGNED-RV32-NEXT:    slli a1, a1, 24
; CHECK-ALIGNED-RV32-NEXT:    or a1, a1, a4
; CHECK-ALIGNED-RV32-NEXT:    or a1, a1, a2
; CHECK-ALIGNED-RV32-NEXT:    xor a0, a0, a1
; CHECK-ALIGNED-RV32-NEXT:    seqz a0, a0
; CHECK-ALIGNED-RV32-NEXT:    ret
;
; CHECK-ALIGNED-RV64-LABEL: bcmp_size_4:
; CHECK-ALIGNED-RV64:       # %bb.0: # %entry
; CHECK-ALIGNED-RV64-NEXT:    lbu a2, 1(a0)
; CHECK-ALIGNED-RV64-NEXT:    lbu a3, 0(a0)
; CHECK-ALIGNED-RV64-NEXT:    lbu a4, 2(a0)
; CHECK-ALIGNED-RV64-NEXT:    lb a0, 3(a0)
; CHECK-ALIGNED-RV64-NEXT:    slli a2, a2, 8
; CHECK-ALIGNED-RV64-NEXT:    or a2, a2, a3
; CHECK-ALIGNED-RV64-NEXT:    slli a4, a4, 16
; CHECK-ALIGNED-RV64-NEXT:    slli a0, a0, 24
; CHECK-ALIGNED-RV64-NEXT:    or a0, a0, a4
; CHECK-ALIGNED-RV64-NEXT:    or a0, a0, a2
; CHECK-ALIGNED-RV64-NEXT:    lbu a2, 1(a1)
; CHECK-ALIGNED-RV64-NEXT:    lbu a3, 0(a1)
; CHECK-ALIGNED-RV64-NEXT:    lbu a4, 2(a1)
; CHECK-ALIGNED-RV64-NEXT:    lb a1, 3(a1)
; CHECK-ALIGNED-RV64-NEXT:    slli a2, a2, 8
; CHECK-ALIGNED-RV64-NEXT:    or a2, a2, a3
; CHECK-ALIGNED-RV64-NEXT:    slli a4, a4, 16
; CHECK-ALIGNED-RV64-NEXT:    slli a1, a1, 24
; CHECK-ALIGNED-RV64-NEXT:    or a1, a1, a4
; CHECK-ALIGNED-RV64-NEXT:    or a1, a1, a2
; CHECK-ALIGNED-RV64-NEXT:    xor a0, a0, a1
; CHECK-ALIGNED-RV64-NEXT:    seqz a0, a0
; CHECK-ALIGNED-RV64-NEXT:    ret
;
; CHECK-UNALIGNED-RV32-LABEL: bcmp_size_4:
; CHECK-UNALIGNED-RV32:       # %bb.0: # %entry
; CHECK-UNALIGNED-RV32-NEXT:    lw a0, 0(a0)
; CHECK-UNALIGNED-RV32-NEXT:    lw a1, 0(a1)
; CHECK-UNALIGNED-RV32-NEXT:    xor a0, a0, a1
; CHECK-UNALIGNED-RV32-NEXT:    seqz a0, a0
; CHECK-UNALIGNED-RV32-NEXT:    ret
;
; CHECK-UNALIGNED-RV64-LABEL: bcmp_size_4:
; CHECK-UNALIGNED-RV64:       # %bb.0: # %entry
; CHECK-UNALIGNED-RV64-NEXT:    lw a0, 0(a0)
; CHECK-UNALIGNED-RV64-NEXT:    lw a1, 0(a1)
; CHECK-UNALIGNED-RV64-NEXT:    xor a0, a0, a1
; CHECK-UNALIGNED-RV64-NEXT:    seqz a0, a0
; CHECK-UNALIGNED-RV64-NEXT:    ret
entry:
  %bcmp = call i32 @bcmp(i8* %s1, i8* %s2, iXLen 4)
  %ret = icmp eq i32 %bcmp, 0
  ret i1 %ret
}

define i1 @bcmp_size_5(i8* %s1, i8* %s2) {
; CHECK-ALIGNED-RV32-LABEL: bcmp_size_5:
; CHECK-ALIGNED-RV32:       # %bb.0: # %entry
; CHECK-ALIGNED-RV32-NEXT:    lbu a2, 1(a0)
; CHECK-ALIGNED-RV32-NEXT:    lbu a3, 0(a0)
; CHECK-ALIGNED-RV32-NEXT:    lbu a4, 2(a0)
; CHECK-ALIGNED-RV32-NEXT:    lbu a5, 3(a0)
; CHECK-ALIGNED-RV32-NEXT:    slli a2, a2, 8
; CHECK-ALIGNED-RV32-NEXT:    or a2, a2, a3
; CHECK-ALIGNED-RV32-NEXT:    slli a4, a4, 16
; CHECK-ALIGNED-RV32-NEXT:    slli a5, a5, 24
; CHECK-ALIGNED-RV32-NEXT:    or a4, a5, a4
; CHECK-ALIGNED-RV32-NEXT:    or a2, a4, a2
; CHECK-ALIGNED-RV32-NEXT:    lbu a3, 1(a1)
; CHECK-ALIGNED-RV32-NEXT:    lbu a4, 0(a1)
; CHECK-ALIGNED-RV32-NEXT:    lbu a5, 2(a1)
; CHECK-ALIGNED-RV32-NEXT:    lbu a6, 3(a1)
; CHECK-ALIGNED-RV32-NEXT:    slli a3, a3, 8
; CHECK-ALIGNED-RV32-NEXT:    or a3, a3, a4
; CHECK-ALIGNED-RV32-NEXT:    slli a5, a5, 16
; CHECK-ALIGNED-RV32-NEXT:    slli a6, a6, 24
; CHECK-ALIGNED-RV32-NEXT:    lbu a0, 4(a0)
; CHECK-ALIGNED-RV32-NEXT:    lbu a1, 4(a1)
; CHECK-ALIGNED-RV32-NEXT:    or a4, a6, a5
; CHECK-ALIGNED-RV32-NEXT:    or a3, a4, a3
; CHECK-ALIGNED-RV32-NEXT:    xor a2, a2, a3
; CHECK-ALIGNED-RV32-NEXT:    xor a0, a0, a1
; CHECK-ALIGNED-RV32-NEXT:    or a0, a2, a0
; CHECK-ALIGNED-RV32-NEXT:    seqz a0, a0
; CHECK-ALIGNED-RV32-NEXT:    ret
;
; CHECK-ALIGNED-RV64-LABEL: bcmp_size_5:
; CHECK-ALIGNED-RV64:       # %bb.0: # %entry
; CHECK-ALIGNED-RV64-NEXT:    lbu a2, 1(a0)
; CHECK-ALIGNED-RV64-NEXT:    lbu a3, 0(a0)
; CHECK-ALIGNED-RV64-NEXT:    lbu a4, 2(a0)
; CHECK-ALIGNED-RV64-NEXT:    lb a5, 3(a0)
; CHECK-ALIGNED-RV64-NEXT:    slli a2, a2, 8
; CHECK-ALIGNED-RV64-NEXT:    or a2, a2, a3
; CHECK-ALIGNED-RV64-NEXT:    slli a4, a4, 16
; CHECK-ALIGNED-RV64-NEXT:    slli a5, a5, 24
; CHECK-ALIGNED-RV64-NEXT:    or a4, a5, a4
; CHECK-ALIGNED-RV64-NEXT:    or a2, a4, a2
; CHECK-ALIGNED-RV64-NEXT:    lbu a3, 1(a1)
; CHECK-ALIGNED-RV64-NEXT:    lbu a4, 0(a1)
; CHECK-ALIGNED-RV64-NEXT:    lbu a5, 2(a1)
; CHECK-ALIGNED-RV64-NEXT:    lb a6, 3(a1)
; CHECK-ALIGNED-RV64-NEXT:    slli a3, a3, 8
; CHECK-ALIGNED-RV64-NEXT:    or a3, a3, a4
; CHECK-ALIGNED-RV64-NEXT:    slli a5, a5, 16
; CHECK-ALIGNED-RV64-NEXT:    slli a6, a6, 24
; CHECK-ALIGNED-RV64-NEXT:    lbu a0, 4(a0)
; CHECK-ALIGNED-RV64-NEXT:    lbu a1, 4(a1)
; CHECK-ALIGNED-RV64-NEXT:    or a4, a6, a5
; CHECK-ALIGNED-RV64-NEXT:    or a3, a4, a3
; CHECK-ALIGNED-RV64-NEXT:    xor a2, a2, a3
; CHECK-ALIGNED-RV64-NEXT:    xor a0, a0, a1
; CHECK-ALIGNED-RV64-NEXT:    or a0, a2, a0
; CHECK-ALIGNED-RV64-NEXT:    seqz a0, a0
; CHECK-ALIGNED-RV64-NEXT:    ret
;
; CHECK-UNALIGNED-RV32-LABEL: bcmp_size_5:
; CHECK-UNALIGNED-RV32:       # %bb.0: # %entry
; CHECK-UNALIGNED-RV32-NEXT:    lw a2, 0(a0)
; CHECK-UNALIGNED-RV32-NEXT:    lw a3, 0(a1)
; CHECK-UNALIGNED-RV32-NEXT:    lbu a0, 4(a0)
; CHECK-UNALIGNED-RV32-NEXT:    lbu a1, 4(a1)
; CHECK-UNALIGNED-RV32-NEXT:    xor a2, a2, a3
; CHECK-UNALIGNED-RV32-NEXT:    xor a0, a0, a1
; CHECK-UNALIGNED-RV32-NEXT:    or a0, a2, a0
; CHECK-UNALIGNED-RV32-NEXT:    seqz a0, a0
; CHECK-UNALIGNED-RV32-NEXT:    ret
;
; CHECK-UNALIGNED-RV64-LABEL: bcmp_size_5:
; CHECK-UNALIGNED-RV64:       # %bb.0: # %entry
; CHECK-UNALIGNED-RV64-NEXT:    lw a2, 0(a0)
; CHECK-UNALIGNED-RV64-NEXT:    lw a3, 0(a1)
; CHECK-UNALIGNED-RV64-NEXT:    lbu a0, 4(a0)
; CHECK-UNALIGNED-RV64-NEXT:    lbu a1, 4(a1)
; CHECK-UNALIGNED-RV64-NEXT:    xor a2, a2, a3
; CHECK-UNALIGNED-RV64-NEXT:    xor a0, a0, a1
; CHECK-UNALIGNED-RV64-NEXT:    or a0, a2, a0
; CHECK-UNALIGNED-RV64-NEXT:    seqz a0, a0
; CHECK-UNALIGNED-RV64-NEXT:    ret
entry:
  %bcmp = call i32 @bcmp(i8* %s1, i8* %s2, iXLen 5)
  %ret = icmp eq i32 %bcmp, 0
  ret i1 %ret
}

define i1 @bcmp_size_6(i8* %s1, i8* %s2) {
; CHECK-ALIGNED-RV32-LABEL: bcmp_size_6:
; CHECK-ALIGNED-RV32:       # %bb.0: # %entry
; CHECK-ALIGNED-RV32-NEXT:    lbu a2, 1(a0)
; CHECK-ALIGNED-RV32-NEXT:    lbu a3, 0(a0)
; CHECK-ALIGNED-RV32-NEXT:    lbu a4, 2(a0)
; CHECK-ALIGNED-RV32-NEXT:    lbu a5, 3(a0)
; CHECK-ALIGNED-RV32-NEXT:    slli a2, a2, 8
; CHECK-ALIGNED-RV32-NEXT:    or a2, a2, a3
; CHECK-ALIGNED-RV32-NEXT:    slli a4, a4, 16
; CHECK-ALIGNED-RV32-NEXT:    slli a5, a5, 24
; CHECK-ALIGNED-RV32-NEXT:    or a4, a5, a4
; CHECK-ALIGNED-RV32-NEXT:    or a2, a4, a2
; CHECK-ALIGNED-RV32-NEXT:    lbu a3, 1(a1)
; CHECK-ALIGNED-RV32-NEXT:    lbu a4, 0(a1)
; CHECK-ALIGNED-RV32-NEXT:    lbu a5, 2(a1)
; CHECK-ALIGNED-RV32-NEXT:    lbu a6, 3(a1)
; CHECK-ALIGNED-RV32-NEXT:    slli a3, a3, 8
; CHECK-ALIGNED-RV32-NEXT:    or a3, a3, a4
; CHECK-ALIGNED-RV32-NEXT:    slli a5, a5, 16
; CHECK-ALIGNED-RV32-NEXT:    slli a6, a6, 24
; CHECK-ALIGNED-RV32-NEXT:    or a4, a6, a5
; CHECK-ALIGNED-RV32-NEXT:    or a3, a4, a3
; CHECK-ALIGNED-RV32-NEXT:    xor a2, a2, a3
; CHECK-ALIGNED-RV32-NEXT:    lbu a3, 5(a0)
; CHECK-ALIGNED-RV32-NEXT:    lbu a0, 4(a0)
; CHECK-ALIGNED-RV32-NEXT:    lbu a4, 5(a1)
; CHECK-ALIGNED-RV32-NEXT:    lbu a1, 4(a1)
; CHECK-ALIGNED-RV32-NEXT:    slli a3, a3, 8
; CHECK-ALIGNED-RV32-NEXT:    or a0, a3, a0
; CHECK-ALIGNED-RV32-NEXT:    slli a4, a4, 8
; CHECK-ALIGNED-RV32-NEXT:    or a1, a4, a1
; CHECK-ALIGNED-RV32-NEXT:    xor a0, a0, a1
; CHECK-ALIGNED-RV32-NEXT:    or a0, a2, a0
; CHECK-ALIGNED-RV32-NEXT:    seqz a0, a0
; CHECK-ALIGNED-RV32-NEXT:    ret
;
; CHECK-ALIGNED-RV64-LABEL: bcmp_size_6:
; CHECK-ALIGNED-RV64:       # %bb.0: # %entry
; CHECK-ALIGNED-RV64-NEXT:    lbu a2, 1(a0)
; CHECK-ALIGNED-RV64-NEXT:    lbu a3, 0(a0)
; CHECK-ALIGNED-RV64-NEXT:    lbu a4, 2(a0)
; CHECK-ALIGNED-RV64-NEXT:    lb a5, 3(a0)
; CHECK-ALIGNED-RV64-NEXT:    slli a2, a2, 8
; CHECK-ALIGNED-RV64-NEXT:    or a2, a2, a3
; CHECK-ALIGNED-RV64-NEXT:    slli a4, a4, 16
; CHECK-ALIGNED-RV64-NEXT:    slli a5, a5, 24
; CHECK-ALIGNED-RV64-NEXT:    or a4, a5, a4
; CHECK-ALIGNED-RV64-NEXT:    or a2, a4, a2
; CHECK-ALIGNED-RV64-NEXT:    lbu a3, 1(a1)
; CHECK-ALIGNED-RV64-NEXT:    lbu a4, 0(a1)
; CHECK-ALIGNED-RV64-NEXT:    lbu a5, 2(a1)
; CHECK-ALIGNED-RV64-NEXT:    lb a6, 3(a1)
; CHECK-ALIGNED-RV64-NEXT:    slli a3, a3, 8
; CHECK-ALIGNED-RV64-NEXT:    or a3, a3, a4
; CHECK-ALIGNED-RV64-NEXT:    slli a5, a5, 16
; CHECK-ALIGNED-RV64-NEXT:    slli a6, a6, 24
; CHECK-ALIGNED-RV64-NEXT:    or a4, a6, a5
; CHECK-ALIGNED-RV64-NEXT:    or a3, a4, a3
; CHECK-ALIGNED-RV64-NEXT:    xor a2, a2, a3
; CHECK-ALIGNED-RV64-NEXT:    lbu a3, 5(a0)
; CHECK-ALIGNED-RV64-NEXT:    lbu a0, 4(a0)
; CHECK-ALIGNED-RV64-NEXT:    lbu a4, 5(a1)
; CHECK-ALIGNED-RV64-NEXT:    lbu a1, 4(a1)
; CHECK-ALIGNED-RV64-NEXT:    slli a3, a3, 8
; CHECK-ALIGNED-RV64-NEXT:    or a0, a3, a0
; CHECK-ALIGNED-RV64-NEXT:    slli a4, a4, 8
; CHECK-ALIGNED-RV64-NEXT:    or a1, a4, a1
; CHECK-ALIGNED-RV64-NEXT:    xor a0, a0, a1
; CHECK-ALIGNED-RV64-NEXT:    or a0, a2, a0
; CHECK-ALIGNED-RV64-NEXT:    seqz a0, a0
; CHECK-ALIGNED-RV64-NEXT:    ret
;
; CHECK-UNALIGNED-RV32-LABEL: bcmp_size_6:
; CHECK-UNALIGNED-RV32:       # %bb.0: # %entry
; CHECK-UNALIGNED-RV32-NEXT:    lw a2, 0(a0)
; CHECK-UNALIGNED-RV32-NEXT:    lw a3, 0(a1)
; CHECK-UNALIGNED-RV32-NEXT:    lhu a0, 4(a0)
; CHECK-UNALIGNED-RV32-NEXT:    lhu a1, 4(a1)
; CHECK-UNALIGNED-RV32-NEXT:    xor a2, a2, a3
; CHECK-UNALIGNED-RV32-NEXT:    xor a0, a0, a1
; CHECK-UNALIGNED-RV32-NEXT:    or a0, a2, a0
; CHECK-UNALIGNED-RV32-NEXT:    seqz a0, a0
; CHECK-UNALIGNED-RV32-NEXT:    ret
;
; CHECK-UNALIGNED-RV64-LABEL: bcmp_size_6:
; CHECK-UNALIGNED-RV64:       # %bb.0: # %entry
; CHECK-UNALIGNED-RV64-NEXT:    lw a2, 0(a0)
; CHECK-UNALIGNED-RV64-NEXT:    lw a3, 0(a1)
; CHECK-UNALIGNED-RV64-NEXT:    lhu a0, 4(a0)
; CHECK-UNALIGNED-RV64-NEXT:    lhu a1, 4(a1)
; CHECK-UNALIGNED-RV64-NEXT:    xor a2, a2, a3
; CHECK-UNALIGNED-RV64-NEXT:    xor a0, a0, a1
; CHECK-UNALIGNED-RV64-NEXT:    or a0, a2, a0
; CHECK-UNALIGNED-RV64-NEXT:    seqz a0, a0
; CHECK-UNALIGNED-RV64-NEXT:    ret
entry:
  %bcmp = call i32 @bcmp(i8* %s1, i8* %s2, iXLen 6)
  %ret = icmp eq i32 %bcmp, 0
  ret i1 %ret
}

define i1 @bcmp_size_7(i8* %s1, i8* %s2) {
; CHECK-ALIGNED-RV32-LABEL: bcmp_size_7:
; CHECK-ALIGNED-RV32:       # %bb.0: # %entry
; CHECK-ALIGNED-RV32-NEXT:    lbu a2, 1(a0)
; CHECK-ALIGNED-RV32-NEXT:    lbu a3, 0(a0)
; CHECK-ALIGNED-RV32-NEXT:    lbu a4, 2(a0)
; CHECK-ALIGNED-RV32-NEXT:    lbu a5, 3(a0)
; CHECK-ALIGNED-RV32-NEXT:    slli a2, a2, 8
; CHECK-ALIGNED-RV32-NEXT:    or a2, a2, a3
; CHECK-ALIGNED-RV32-NEXT:    slli a4, a4, 16
; CHECK-ALIGNED-RV32-NEXT:    slli a5, a5, 24
; CHECK-ALIGNED-RV32-NEXT:    or a4, a5, a4
; CHECK-ALIGNED-RV32-NEXT:    or a2, a4, a2
; CHECK-ALIGNED-RV32-NEXT:    lbu a3, 1(a1)
; CHECK-ALIGNED-RV32-NEXT:    lbu a4, 0(a1)
; CHECK-ALIGNED-RV32-NEXT:    lbu a5, 2(a1)
; CHECK-ALIGNED-RV32-NEXT:    lbu a6, 3(a1)
; CHECK-ALIGNED-RV32-NEXT:    slli a3, a3, 8
; CHECK-ALIGNED-RV32-NEXT:    or a3, a3, a4
; CHECK-ALIGNED-RV32-NEXT:    slli a5, a5, 16
; CHECK-ALIGNED-RV32-NEXT:    slli a6, a6, 24
; CHECK-ALIGNED-RV32-NEXT:    or a4, a6, a5
; CHECK-ALIGNED-RV32-NEXT:    lbu a5, 5(a0)
; CHECK-ALIGNED-RV32-NEXT:    lbu a6, 4(a0)
; CHECK-ALIGNED-RV32-NEXT:    or a3, a4, a3
; CHECK-ALIGNED-RV32-NEXT:    xor a2, a2, a3
; CHECK-ALIGNED-RV32-NEXT:    slli a5, a5, 8
; CHECK-ALIGNED-RV32-NEXT:    or a3, a5, a6
; CHECK-ALIGNED-RV32-NEXT:    lbu a4, 5(a1)
; CHECK-ALIGNED-RV32-NEXT:    lbu a5, 4(a1)
; CHECK-ALIGNED-RV32-NEXT:    lbu a0, 6(a0)
; CHECK-ALIGNED-RV32-NEXT:    lbu a1, 6(a1)
; CHECK-ALIGNED-RV32-NEXT:    slli a4, a4, 8
; CHECK-ALIGNED-RV32-NEXT:    or a4, a4, a5
; CHECK-ALIGNED-RV32-NEXT:    xor a3, a3, a4
; CHECK-ALIGNED-RV32-NEXT:    xor a0, a0, a1
; CHECK-ALIGNED-RV32-NEXT:    or a0, a3, a0
; CHECK-ALIGNED-RV32-NEXT:    or a0, a2, a0
; CHECK-ALIGNED-RV32-NEXT:    seqz a0, a0
; CHECK-ALIGNED-RV32-NEXT:    ret
;
; CHECK-ALIGNED-RV64-LABEL: bcmp_size_7:
; CHECK-ALIGNED-RV64:       # %bb.0: # %entry
; CHECK-ALIGNED-RV64-NEXT:    lbu a2, 1(a0)
; CHECK-ALIGNED-RV64-NEXT:    lbu a3, 0(a0)
; CHECK-ALIGNED-RV64-NEXT:    lbu a4, 2(a0)
; CHECK-ALIGNED-RV64-NEXT:    lb a5, 3(a0)
; CHECK-ALIGNED-RV64-NEXT:    slli a2, a2, 8
; CHECK-ALIGNED-RV64-NEXT:    or a2, a2, a3
; CHECK-ALIGNED-RV64-NEXT:    slli a4, a4, 16
; CHECK-ALIGNED-RV64-NEXT:    slli a5, a5, 24
; CHECK-ALIGNED-RV64-NEXT:    or a4, a5, a4
; CHECK-ALIGNED-RV64-NEXT:    or a2, a4, a2
; CHECK-ALIGNED-RV64-NEXT:    lbu a3, 1(a1)
; CHECK-ALIGNED-RV64-NEXT:    lbu a4, 0(a1)
; CHECK-ALIGNED-RV64-NEXT:    lbu a5, 2(a1)
; CHECK-ALIGNED-RV64-NEXT:    lb a6, 3(a1)
; CHECK-ALIGNED-RV64-NEXT:    slli a3, a3, 8
; CHECK-ALIGNED-RV64-NEXT:    or a3, a3, a4
; CHECK-ALIGNED-RV64-NEXT:    slli a5, a5, 16
; CHECK-ALIGNED-RV64-NEXT:    slli a6, a6, 24
; CHECK-ALIGNED-RV64-NEXT:    or a4, a6, a5
; CHECK-ALIGNED-RV64-NEXT:    lbu a5, 5(a0)
; CHECK-ALIGNED-RV64-NEXT:    lbu a6, 4(a0)
; CHECK-ALIGNED-RV64-NEXT:    or a3, a4, a3
; CHECK-ALIGNED-RV64-NEXT:    xor a2, a2, a3
; CHECK-ALIGNED-RV64-NEXT:    slli a5, a5, 8
; CHECK-ALIGNED-RV64-NEXT:    or a3, a5, a6
; CHECK-ALIGNED-RV64-NEXT:    lbu a4, 5(a1)
; CHECK-ALIGNED-RV64-NEXT:    lbu a5, 4(a1)
; CHECK-ALIGNED-RV64-NEXT:    lbu a0, 6(a0)
; CHECK-ALIGNED-RV64-NEXT:    lbu a1, 6(a1)
; CHECK-ALIGNED-RV64-NEXT:    slli a4, a4, 8
; CHECK-ALIGNED-RV64-NEXT:    or a4, a4, a5
; CHECK-ALIGNED-RV64-NEXT:    xor a3, a3, a4
; CHECK-ALIGNED-RV64-NEXT:    xor a0, a0, a1
; CHECK-ALIGNED-RV64-NEXT:    or a0, a3, a0
; CHECK-ALIGNED-RV64-NEXT:    or a0, a2, a0
; CHECK-ALIGNED-RV64-NEXT:    seqz a0, a0
; CHECK-ALIGNED-RV64-NEXT:    ret
;
; CHECK-UNALIGNED-RV32-LABEL: bcmp_size_7:
; CHECK-UNALIGNED-RV32:       # %bb.0: # %entry
; CHECK-UNALIGNED-RV32-NEXT:    lw a2, 0(a0)
; CHECK-UNALIGNED-RV32-NEXT:    lw a3, 0(a1)
; CHECK-UNALIGNED-RV32-NEXT:    lw a0, 3(a0)
; CHECK-UNALIGNED-RV32-NEXT:    lw a1, 3(a1)
; CHECK-UNALIGNED-RV32-NEXT:    xor a2, a2, a3
; CHECK-UNALIGNED-RV32-NEXT:    xor a0, a0, a1
; CHECK-UNALIGNED-RV32-NEXT:    or a0, a2, a0
; CHECK-UNALIGNED-RV32-NEXT:    seqz a0, a0
; CHECK-UNALIGNED-RV32-NEXT:    ret
;
; CHECK-UNALIGNED-RV64-LABEL: bcmp_size_7:
; CHECK-UNALIGNED-RV64:       # %bb.0: # %entry
; CHECK-UNALIGNED-RV64-NEXT:    lw a2, 0(a0)
; CHECK-UNALIGNED-RV64-NEXT:    lw a3, 0(a1)
; CHECK-UNALIGNED-RV64-NEXT:    lw a0, 3(a0)
; CHECK-UNALIGNED-RV64-NEXT:    lw a1, 3(a1)
; CHECK-UNALIGNED-RV64-NEXT:    xor a2, a2, a3
; CHECK-UNALIGNED-RV64-NEXT:    xor a0, a0, a1
; CHECK-UNALIGNED-RV64-NEXT:    or a0, a2, a0
; CHECK-UNALIGNED-RV64-NEXT:    seqz a0, a0
; CHECK-UNALIGNED-RV64-NEXT:    ret
entry:
  %bcmp = call i32 @bcmp(i8* %s1, i8* %s2, iXLen 7)
  %ret = icmp eq i32 %bcmp, 0
  ret i1 %ret
}

define i1 @bcmp_size_8(i8* %s1, i8* %s2) {
; CHECK-ALIGNED-RV32-LABEL: bcmp_size_8:
; CHECK-ALIGNED-RV32:       # %bb.0: # %entry
; CHECK-ALIGNED-RV32-NEXT:    lbu a2, 1(a0)
; CHECK-ALIGNED-RV32-NEXT:    lbu a3, 0(a0)
; CHECK-ALIGNED-RV32-NEXT:    lbu a4, 2(a0)
; CHECK-ALIGNED-RV32-NEXT:    lbu a5, 3(a0)
; CHECK-ALIGNED-RV32-NEXT:    slli a2, a2, 8
; CHECK-ALIGNED-RV32-NEXT:    or a2, a2, a3
; CHECK-ALIGNED-RV32-NEXT:    slli a4, a4, 16
; CHECK-ALIGNED-RV32-NEXT:    slli a5, a5, 24
; CHECK-ALIGNED-RV32-NEXT:    or a4, a5, a4
; CHECK-ALIGNED-RV32-NEXT:    or a2, a4, a2
; CHECK-ALIGNED-RV32-NEXT:    lbu a3, 1(a1)
; CHECK-ALIGNED-RV32-NEXT:    lbu a4, 0(a1)
; CHECK-ALIGNED-RV32-NEXT:    lbu a5, 2(a1)
; CHECK-ALIGNED-RV32-NEXT:    lbu a6, 3(a1)
; CHECK-ALIGNED-RV32-NEXT:    slli a3, a3, 8
; CHECK-ALIGNED-RV32-NEXT:    or a3, a3, a4
; CHECK-ALIGNED-RV32-NEXT:    slli a5, a5, 16
; CHECK-ALIGNED-RV32-NEXT:    slli a6, a6, 24
; CHECK-ALIGNED-RV32-NEXT:    or a4, a6, a5
; CHECK-ALIGNED-RV32-NEXT:    or a3, a4, a3
; CHECK-ALIGNED-RV32-NEXT:    xor a2, a2, a3
; CHECK-ALIGNED-RV32-NEXT:    lbu a3, 5(a0)
; CHECK-ALIGNED-RV32-NEXT:    lbu a4, 4(a0)
; CHECK-ALIGNED-RV32-NEXT:    lbu a5, 6(a0)
; CHECK-ALIGNED-RV32-NEXT:    lbu a0, 7(a0)
; CHECK-ALIGNED-RV32-NEXT:    slli a3, a3, 8
; CHECK-ALIGNED-RV32-NEXT:    or a3, a3, a4
; CHECK-ALIGNED-RV32-NEXT:    slli a5, a5, 16
; CHECK-ALIGNED-RV32-NEXT:    slli a0, a0, 24
; CHECK-ALIGNED-RV32-NEXT:    or a0, a0, a5
; CHECK-ALIGNED-RV32-NEXT:    or a0, a0, a3
; CHECK-ALIGNED-RV32-NEXT:    lbu a3, 5(a1)
; CHECK-ALIGNED-RV32-NEXT:    lbu a4, 4(a1)
; CHECK-ALIGNED-RV32-NEXT:    lbu a5, 6(a1)
; CHECK-ALIGNED-RV32-NEXT:    lbu a1, 7(a1)
; CHECK-ALIGNED-RV32-NEXT:    slli a3, a3, 8
; CHECK-ALIGNED-RV32-NEXT:    or a3, a3, a4
; CHECK-ALIGNED-RV32-NEXT:    slli a5, a5, 16
; CHECK-ALIGNED-RV32-NEXT:    slli a1, a1, 24
; CHECK-ALIGNED-RV32-NEXT:    or a1, a1, a5
; CHECK-ALIGNED-RV32-NEXT:    or a1, a1, a3
; CHECK-ALIGNED-RV32-NEXT:    xor a0, a0, a1
; CHECK-ALIGNED-RV32-NEXT:    or a0, a2, a0
; CHECK-ALIGNED-RV32-NEXT:    seqz a0, a0
; CHECK-ALIGNED-RV32-NEXT:    ret
;
; CHECK-ALIGNED-RV64-LABEL: bcmp_size_8:
; CHECK-ALIGNED-RV64:       # %bb.0: # %entry
; CHECK-ALIGNED-RV64-NEXT:    lbu a2, 1(a0)
; CHECK-ALIGNED-RV64-NEXT:    lbu a3, 0(a0)
; CHECK-ALIGNED-RV64-NEXT:    lbu a4, 2(a0)
; CHECK-ALIGNED-RV64-NEXT:    lbu a5, 3(a0)
; CHECK-ALIGNED-RV64-NEXT:    slli a2, a2, 8
; CHECK-ALIGNED-RV64-NEXT:    or a2, a2, a3
; CHECK-ALIGNED-RV64-NEXT:    slli a4, a4, 16
; CHECK-ALIGNED-RV64-NEXT:    slli a5, a5, 24
; CHECK-ALIGNED-RV64-NEXT:    or a4, a5, a4
; CHECK-ALIGNED-RV64-NEXT:    or a2, a4, a2
; CHECK-ALIGNED-RV64-NEXT:    lbu a3, 5(a0)
; CHECK-ALIGNED-RV64-NEXT:    lbu a4, 4(a0)
; CHECK-ALIGNED-RV64-NEXT:    lbu a5, 6(a0)
; CHECK-ALIGNED-RV64-NEXT:    lbu a0, 7(a0)
; CHECK-ALIGNED-RV64-NEXT:    slli a3, a3, 8
; CHECK-ALIGNED-RV64-NEXT:    or a3, a3, a4
; CHECK-ALIGNED-RV64-NEXT:    slli a5, a5, 16
; CHECK-ALIGNED-RV64-NEXT:    slli a0, a0, 24
; CHECK-ALIGNED-RV64-NEXT:    or a0, a0, a5
; CHECK-ALIGNED-RV64-NEXT:    or a0, a0, a3
; CHECK-ALIGNED-RV64-NEXT:    slli a0, a0, 32
; CHECK-ALIGNED-RV64-NEXT:    or a0, a0, a2
; CHECK-ALIGNED-RV64-NEXT:    lbu a2, 1(a1)
; CHECK-ALIGNED-RV64-NEXT:    lbu a3, 0(a1)
; CHECK-ALIGNED-RV64-NEXT:    lbu a4, 2(a1)
; CHECK-ALIGNED-RV64-NEXT:    lbu a5, 3(a1)
; CHECK-ALIGNED-RV64-NEXT:    slli a2, a2, 8
; CHECK-ALIGNED-RV64-NEXT:    or a2, a2, a3
; CHECK-ALIGNED-RV64-NEXT:    slli a4, a4, 16
; CHECK-ALIGNED-RV64-NEXT:    slli a5, a5, 24
; CHECK-ALIGNED-RV64-NEXT:    or a4, a5, a4
; CHECK-ALIGNED-RV64-NEXT:    or a2, a4, a2
; CHECK-ALIGNED-RV64-NEXT:    lbu a3, 5(a1)
; CHECK-ALIGNED-RV64-NEXT:    lbu a4, 4(a1)
; CHECK-ALIGNED-RV64-NEXT:    lbu a5, 6(a1)
; CHECK-ALIGNED-RV64-NEXT:    lbu a1, 7(a1)
; CHECK-ALIGNED-RV64-NEXT:    slli a3, a3, 8
; CHECK-ALIGNED-RV64-NEXT:    or a3, a3, a4
; CHECK-ALIGNED-RV64-NEXT:    slli a5, a5, 16
; CHECK-ALIGNED-RV64-NEXT:    slli a1, a1, 24
; CHECK-ALIGNED-RV64-NEXT:    or a1, a1, a5
; CHECK-ALIGNED-RV64-NEXT:    or a1, a1, a3
; CHECK-ALIGNED-RV64-NEXT:    slli a1, a1, 32
; CHECK-ALIGNED-RV64-NEXT:    or a1, a1, a2
; CHECK-ALIGNED-RV64-NEXT:    xor a0, a0, a1
; CHECK-ALIGNED-RV64-NEXT:    seqz a0, a0
; CHECK-ALIGNED-RV64-NEXT:    ret
;
; CHECK-UNALIGNED-RV32-LABEL: bcmp_size_8:
; CHECK-UNALIGNED-RV32:       # %bb.0: # %entry
; CHECK-UNALIGNED-RV32-NEXT:    lw a2, 0(a0)
; CHECK-UNALIGNED-RV32-NEXT:    lw a3, 0(a1)
; CHECK-UNALIGNED-RV32-NEXT:    lw a0, 4(a0)
; CHECK-UNALIGNED-RV32-NEXT:    lw a1, 4(a1)
; CHECK-UNALIGNED-RV32-NEXT:    xor a2, a2, a3
; CHECK-UNALIGNED-RV32-NEXT:    xor a0, a0, a1
; CHECK-UNALIGNED-RV32-NEXT:    or a0, a2, a0
; CHECK-UNALIGNED-RV32-NEXT:    seqz a0, a0
; CHECK-UNALIGNED-RV32-NEXT:    ret
;
; CHECK-UNALIGNED-RV64-LABEL: bcmp_size_8:
; CHECK-UNALIGNED-RV64:       # %bb.0: # %entry
; CHECK-UNALIGNED-RV64-NEXT:    ld a0, 0(a0)
; CHECK-UNALIGNED-RV64-NEXT:    ld a1, 0(a1)
; CHECK-UNALIGNED-RV64-NEXT:    xor a0, a0, a1
; CHECK-UNALIGNED-RV64-NEXT:    seqz a0, a0
; CHECK-UNALIGNED-RV64-NEXT:    ret
entry:
  %bcmp = call i32 @bcmp(i8* %s1, i8* %s2, iXLen 8)
  %ret = icmp eq i32 %bcmp, 0
  ret i1 %ret
}

define i1 @bcmp_size_16(i8* %s1, i8* %s2) {
; CHECK-ALIGNED-RV32-LABEL: bcmp_size_16:
; CHECK-ALIGNED-RV32:       # %bb.0: # %entry
; CHECK-ALIGNED-RV32-NEXT:    lbu a2, 1(a0)
; CHECK-ALIGNED-RV32-NEXT:    lbu a3, 0(a0)
; CHECK-ALIGNED-RV32-NEXT:    lbu a4, 2(a0)
; CHECK-ALIGNED-RV32-NEXT:    lbu a5, 3(a0)
; CHECK-ALIGNED-RV32-NEXT:    slli a2, a2, 8
; CHECK-ALIGNED-RV32-NEXT:    or a2, a2, a3
; CHECK-ALIGNED-RV32-NEXT:    slli a4, a4, 16
; CHECK-ALIGNED-RV32-NEXT:    slli a5, a5, 24
; CHECK-ALIGNED-RV32-NEXT:    or a4, a5, a4
; CHECK-ALIGNED-RV32-NEXT:    or a2, a4, a2
; CHECK-ALIGNED-RV32-NEXT:    lbu a3, 1(a1)
; CHECK-ALIGNED-RV32-NEXT:    lbu a4, 0(a1)
; CHECK-ALIGNED-RV32-NEXT:    lbu a5, 2(a1)
; CHECK-ALIGNED-RV32-NEXT:    lbu a6, 3(a1)
; CHECK-ALIGNED-RV32-NEXT:    slli a3, a3, 8
; CHECK-ALIGNED-RV32-NEXT:    or a3, a3, a4
; CHECK-ALIGNED-RV32-NEXT:    slli a5, a5, 16
; CHECK-ALIGNED-RV32-NEXT:    slli a6, a6, 24
; CHECK-ALIGNED-RV32-NEXT:    or a4, a6, a5
; CHECK-ALIGNED-RV32-NEXT:    or a3, a4, a3
; CHECK-ALIGNED-RV32-NEXT:    xor a2, a2, a3
; CHECK-ALIGNED-RV32-NEXT:    lbu a3, 5(a0)
; CHECK-ALIGNED-RV32-NEXT:    lbu a4, 4(a0)
; CHECK-ALIGNED-RV32-NEXT:    lbu a5, 6(a0)
; CHECK-ALIGNED-RV32-NEXT:    lbu a6, 7(a0)
; CHECK-ALIGNED-RV32-NEXT:    slli a3, a3, 8
; CHECK-ALIGNED-RV32-NEXT:    or a3, a3, a4
; CHECK-ALIGNED-RV32-NEXT:    slli a5, a5, 16
; CHECK-ALIGNED-RV32-NEXT:    slli a6, a6, 24
; CHECK-ALIGNED-RV32-NEXT:    or a4, a6, a5
; CHECK-ALIGNED-RV32-NEXT:    or a3, a4, a3
; CHECK-ALIGNED-RV32-NEXT:    lbu a4, 5(a1)
; CHECK-ALIGNED-RV32-NEXT:    lbu a5, 4(a1)
; CHECK-ALIGNED-RV32-NEXT:    lbu a6, 6(a1)
; CHECK-ALIGNED-RV32-NEXT:    lbu a7, 7(a1)
; CHECK-ALIGNED-RV32-NEXT:    slli a4, a4, 8
; CHECK-ALIGNED-RV32-NEXT:    or a4, a4, a5
; CHECK-ALIGNED-RV32-NEXT:    slli a6, a6, 16
; CHECK-ALIGNED-RV32-NEXT:    slli a7, a7, 24
; CHECK-ALIGNED-RV32-NEXT:    or a5, a7, a6
; CHECK-ALIGNED-RV32-NEXT:    or a4, a5, a4
; CHECK-ALIGNED-RV32-NEXT:    xor a3, a3, a4
; CHECK-ALIGNED-RV32-NEXT:    lbu a4, 9(a0)
; CHECK-ALIGNED-RV32-NEXT:    lbu a5, 8(a0)
; CHECK-ALIGNED-RV32-NEXT:    lbu a6, 10(a0)
; CHECK-ALIGNED-RV32-NEXT:    lbu a7, 11(a0)
; CHECK-ALIGNED-RV32-NEXT:    slli a4, a4, 8
; CHECK-ALIGNED-RV32-NEXT:    or a4, a4, a5
; CHECK-ALIGNED-RV32-NEXT:    slli a6, a6, 16
; CHECK-ALIGNED-RV32-NEXT:    slli a7, a7, 24
; CHECK-ALIGNED-RV32-NEXT:    or a5, a7, a6
; CHECK-ALIGNED-RV32-NEXT:    or a4, a5, a4
; CHECK-ALIGNED-RV32-NEXT:    lbu a5, 9(a1)
; CHECK-ALIGNED-RV32-NEXT:    lbu a6, 8(a1)
; CHECK-ALIGNED-RV32-NEXT:    lbu a7, 10(a1)
; CHECK-ALIGNED-RV32-NEXT:    lbu t0, 11(a1)
; CHECK-ALIGNED-RV32-NEXT:    slli a5, a5, 8
; CHECK-ALIGNED-RV32-NEXT:    or a5, a5, a6
; CHECK-ALIGNED-RV32-NEXT:    slli a7, a7, 16
; CHECK-ALIGNED-RV32-NEXT:    slli t0, t0, 24
; CHECK-ALIGNED-RV32-NEXT:    or a6, t0, a7
; CHECK-ALIGNED-RV32-NEXT:    or a5, a6, a5
; CHECK-ALIGNED-RV32-NEXT:    xor a4, a4, a5
; CHECK-ALIGNED-RV32-NEXT:    lbu a5, 13(a0)
; CHECK-ALIGNED-RV32-NEXT:    lbu a6, 12(a0)
; CHECK-ALIGNED-RV32-NEXT:    lbu a7, 14(a0)
; CHECK-ALIGNED-RV32-NEXT:    lbu a0, 15(a0)
; CHECK-ALIGNED-RV32-NEXT:    slli a5, a5, 8
; CHECK-ALIGNED-RV32-NEXT:    or a5, a5, a6
; CHECK-ALIGNED-RV32-NEXT:    slli a7, a7, 16
; CHECK-ALIGNED-RV32-NEXT:    slli a0, a0, 24
; CHECK-ALIGNED-RV32-NEXT:    or a0, a0, a7
; CHECK-ALIGNED-RV32-NEXT:    or a0, a0, a5
; CHECK-ALIGNED-RV32-NEXT:    lbu a5, 13(a1)
; CHECK-ALIGNED-RV32-NEXT:    lbu a6, 12(a1)
; CHECK-ALIGNED-RV32-NEXT:    lbu a7, 14(a1)
; CHECK-ALIGNED-RV32-NEXT:    lbu a1, 15(a1)
; CHECK-ALIGNED-RV32-NEXT:    slli a5, a5, 8
; CHECK-ALIGNED-RV32-NEXT:    or a5, a5, a6
; CHECK-ALIGNED-RV32-NEXT:    slli a7, a7, 16
; CHECK-ALIGNED-RV32-NEXT:    slli a1, a1, 24
; CHECK-ALIGNED-RV32-NEXT:    or a1, a1, a7
; CHECK-ALIGNED-RV32-NEXT:    or a1, a1, a5
; CHECK-ALIGNED-RV32-NEXT:    xor a0, a0, a1
; CHECK-ALIGNED-RV32-NEXT:    or a2, a2, a3
; CHECK-ALIGNED-RV32-NEXT:    or a0, a4, a0
; CHECK-ALIGNED-RV32-NEXT:    or a0, a2, a0
; CHECK-ALIGNED-RV32-NEXT:    seqz a0, a0
; CHECK-ALIGNED-RV32-NEXT:    ret
;
; CHECK-ALIGNED-RV64-LABEL: bcmp_size_16:
; CHECK-ALIGNED-RV64:       # %bb.0: # %entry
; CHECK-ALIGNED-RV64-NEXT:    lbu a2, 1(a0)
; CHECK-ALIGNED-RV64-NEXT:    lbu a3, 0(a0)
; CHECK-ALIGNED-RV64-NEXT:    lbu a4, 2(a0)
; CHECK-ALIGNED-RV64-NEXT:    lbu a5, 3(a0)
; CHECK-ALIGNED-RV64-NEXT:    slli a2, a2, 8
; CHECK-ALIGNED-RV64-NEXT:    or a2, a2, a3
; CHECK-ALIGNED-RV64-NEXT:    slli a4, a4, 16
; CHECK-ALIGNED-RV64-NEXT:    slli a5, a5, 24
; CHECK-ALIGNED-RV64-NEXT:    or a4, a5, a4
; CHECK-ALIGNED-RV64-NEXT:    or a2, a4, a2
; CHECK-ALIGNED-RV64-NEXT:    lbu a3, 5(a0)
; CHECK-ALIGNED-RV64-NEXT:    lbu a4, 4(a0)
; CHECK-ALIGNED-RV64-NEXT:    lbu a5, 6(a0)
; CHECK-ALIGNED-RV64-NEXT:    lbu a6, 7(a0)
; CHECK-ALIGNED-RV64-NEXT:    slli a3, a3, 8
; CHECK-ALIGNED-RV64-NEXT:    or a3, a3, a4
; CHECK-ALIGNED-RV64-NEXT:    slli a5, a5, 16
; CHECK-ALIGNED-RV64-NEXT:    slli a6, a6, 24
; CHECK-ALIGNED-RV64-NEXT:    or a4, a6, a5
; CHECK-ALIGNED-RV64-NEXT:    or a3, a4, a3
; CHECK-ALIGNED-RV64-NEXT:    slli a3, a3, 32
; CHECK-ALIGNED-RV64-NEXT:    or a2, a3, a2
; CHECK-ALIGNED-RV64-NEXT:    lbu a3, 1(a1)
; CHECK-ALIGNED-RV64-NEXT:    lbu a4, 0(a1)
; CHECK-ALIGNED-RV64-NEXT:    lbu a5, 2(a1)
; CHECK-ALIGNED-RV64-NEXT:    lbu a6, 3(a1)
; CHECK-ALIGNED-RV64-NEXT:    slli a3, a3, 8
; CHECK-ALIGNED-RV64-NEXT:    or a3, a3, a4
; CHECK-ALIGNED-RV64-NEXT:    slli a5, a5, 16
; CHECK-ALIGNED-RV64-NEXT:    slli a6, a6, 24
; CHECK-ALIGNED-RV64-NEXT:    or a4, a6, a5
; CHECK-ALIGNED-RV64-NEXT:    or a3, a4, a3
; CHECK-ALIGNED-RV64-NEXT:    lbu a4, 5(a1)
; CHECK-ALIGNED-RV64-NEXT:    lbu a5, 4(a1)
; CHECK-ALIGNED-RV64-NEXT:    lbu a6, 6(a1)
; CHECK-ALIGNED-RV64-NEXT:    lbu a7, 7(a1)
; CHECK-ALIGNED-RV64-NEXT:    slli a4, a4, 8
; CHECK-ALIGNED-RV64-NEXT:    or a4, a4, a5
; CHECK-ALIGNED-RV64-NEXT:    slli a6, a6, 16
; CHECK-ALIGNED-RV64-NEXT:    slli a7, a7, 24
; CHECK-ALIGNED-RV64-NEXT:    or a5, a7, a6
; CHECK-ALIGNED-RV64-NEXT:    or a4, a5, a4
; CHECK-ALIGNED-RV64-NEXT:    slli a4, a4, 32
; CHECK-ALIGNED-RV64-NEXT:    or a3, a4, a3
; CHECK-ALIGNED-RV64-NEXT:    xor a2, a2, a3
; CHECK-ALIGNED-RV64-NEXT:    lbu a3, 9(a0)
; CHECK-ALIGNED-RV64-NEXT:    lbu a4, 8(a0)
; CHECK-ALIGNED-RV64-NEXT:    lbu a5, 10(a0)
; CHECK-ALIGNED-RV64-NEXT:    lbu a6, 11(a0)
; CHECK-ALIGNED-RV64-NEXT:    slli a3, a3, 8
; CHECK-ALIGNED-RV64-NEXT:    or a3, a3, a4
; CHECK-ALIGNED-RV64-NEXT:    slli a5, a5, 16
; CHECK-ALIGNED-RV64-NEXT:    slli a6, a6, 24
; CHECK-ALIGNED-RV64-NEXT:    or a4, a6, a5
; CHECK-ALIGNED-RV64-NEXT:    or a3, a4, a3
; CHECK-ALIGNED-RV64-NEXT:    lbu a4, 13(a0)
; CHECK-ALIGNED-RV64-NEXT:    lbu a5, 12(a0)
; CHECK-ALIGNED-RV64-NEXT:    lbu a6, 14(a0)
; CHECK-ALIGNED-RV64-NEXT:    lbu a0, 15(a0)
; CHECK-ALIGNED-RV64-NEXT:    slli a4, a4, 8
; CHECK-ALIGNED-RV64-NEXT:    or a4, a4, a5
; CHECK-ALIGNED-RV64-NEXT:    slli a6, a6, 16
; CHECK-ALIGNED-RV64-NEXT:    slli a0, a0, 24
; CHECK-ALIGNED-RV64-NEXT:    or a0, a0, a6
; CHECK-ALIGNED-RV64-NEXT:    or a0, a0, a4
; CHECK-ALIGNED-RV64-NEXT:    slli a0, a0, 32
; CHECK-ALIGNED-RV64-NEXT:    or a0, a0, a3
; CHECK-ALIGNED-RV64-NEXT:    lbu a3, 9(a1)
; CHECK-ALIGNED-RV64-NEXT:    lbu a4, 8(a1)
; CHECK-ALIGNED-RV64-NEXT:    lbu a5, 10(a1)
; CHECK-ALIGNED-RV64-NEXT:    lbu a6, 11(a1)
; CHECK-ALIGNED-RV64-NEXT:    slli a3, a3, 8
; CHECK-ALIGNED-RV64-NEXT:    or a3, a3, a4
; CHECK-ALIGNED-RV64-NEXT:    slli a5, a5, 16
; CHECK-ALIGNED-RV64-NEXT:    slli a6, a6, 24
; CHECK-ALIGNED-RV64-NEXT:    or a4, a6, a5
; CHECK-ALIGNED-RV64-NEXT:    or a3, a4, a3
; CHECK-ALIGNED-RV64-NEXT:    lbu a4, 13(a1)
; CHECK-ALIGNED-RV64-NEXT:    lbu a5, 12(a1)
; CHECK-ALIGNED-RV64-NEXT:    lbu a6, 14(a1)
; CHECK-ALIGNED-RV64-NEXT:    lbu a1, 15(a1)
; CHECK-ALIGNED-RV64-NEXT:    slli a4, a4, 8
; CHECK-ALIGNED-RV64-NEXT:    or a4, a4, a5
; CHECK-ALIGNED-RV64-NEXT:    slli a6, a6, 16
; CHECK-ALIGNED-RV64-NEXT:    slli a1, a1, 24
; CHECK-ALIGNED-RV64-NEXT:    or a1, a1, a6
; CHECK-ALIGNED-RV64-NEXT:    or a1, a1, a4
; CHECK-ALIGNED-RV64-NEXT:    slli a1, a1, 32
; CHECK-ALIGNED-RV64-NEXT:    or a1, a1, a3
; CHECK-ALIGNED-RV64-NEXT:    xor a0, a0, a1
; CHECK-ALIGNED-RV64-NEXT:    or a0, a2, a0
; CHECK-ALIGNED-RV64-NEXT:    seqz a0, a0
; CHECK-ALIGNED-RV64-NEXT:    ret
;
; CHECK-UNALIGNED-RV32-LABEL: bcmp_size_16:
; CHECK-UNALIGNED-RV32:       # %bb.0: # %entry
; CHECK-UNALIGNED-RV32-NEXT:    lw a2, 0(a0)
; CHECK-UNALIGNED-RV32-NEXT:    lw a3, 0(a1)
; CHECK-UNALIGNED-RV32-NEXT:    lw a4, 4(a0)
; CHECK-UNALIGNED-RV32-NEXT:    lw a5, 4(a1)
; CHECK-UNALIGNED-RV32-NEXT:    lw a6, 8(a0)
; CHECK-UNALIGNED-RV32-NEXT:    lw a7, 8(a1)
; CHECK-UNALIGNED-RV32-NEXT:    lw a0, 12(a0)
; CHECK-UNALIGNED-RV32-NEXT:    lw a1, 12(a1)
; CHECK-UNALIGNED-RV32-NEXT:    xor a2, a2, a3
; CHECK-UNALIGNED-RV32-NEXT:    xor a4, a4, a5
; CHECK-UNALIGNED-RV32-NEXT:    xor a3, a6, a7
; CHECK-UNALIGNED-RV32-NEXT:    xor a0, a0, a1
; CHECK-UNALIGNED-RV32-NEXT:    or a2, a2, a4
; CHECK-UNALIGNED-RV32-NEXT:    or a0, a3, a0
; CHECK-UNALIGNED-RV32-NEXT:    or a0, a2, a0
; CHECK-UNALIGNED-RV32-NEXT:    seqz a0, a0
; CHECK-UNALIGNED-RV32-NEXT:    ret
;
; CHECK-UNALIGNED-RV64-LABEL: bcmp_size_16:
; CHECK-UNALIGNED-RV64:       # %bb.0: # %entry
; CHECK-UNALIGNED-RV64-NEXT:    ld a2, 0(a0)
; CHECK-UNALIGNED-RV64-NEXT:    ld a3, 0(a1)
; CHECK-UNALIGNED-RV64-NEXT:    ld a0, 8(a0)
; CHECK-UNALIGNED-RV64-NEXT:    ld a1, 8(a1)
; CHECK-UNALIGNED-RV64-NEXT:    xor a2, a2, a3
; CHECK-UNALIGNED-RV64-NEXT:    xor a0, a0, a1
; CHECK-UNALIGNED-RV64-NEXT:    or a0, a2, a0
; CHECK-UNALIGNED-RV64-NEXT:    seqz a0, a0
; CHECK-UNALIGNED-RV64-NEXT:    ret
entry:
  %bcmp = call i32 @bcmp(i8* %s1, i8* %s2, iXLen 16)
  %ret = icmp eq i32 %bcmp, 0
  ret i1 %ret
}

define i1 @bcmp_size_32(i8* %s1, i8* %s2) {
; CHECK-ALIGNED-RV32-LABEL: bcmp_size_32:
; CHECK-ALIGNED-RV32:       # %bb.0: # %entry
; CHECK-ALIGNED-RV32-NEXT:    lbu a2, 1(a0)
; CHECK-ALIGNED-RV32-NEXT:    lbu a3, 0(a0)
; CHECK-ALIGNED-RV32-NEXT:    lbu a4, 2(a0)
; CHECK-ALIGNED-RV32-NEXT:    lbu a5, 3(a0)
; CHECK-ALIGNED-RV32-NEXT:    slli a2, a2, 8
; CHECK-ALIGNED-RV32-NEXT:    or a2, a2, a3
; CHECK-ALIGNED-RV32-NEXT:    slli a4, a4, 16
; CHECK-ALIGNED-RV32-NEXT:    slli a5, a5, 24
; CHECK-ALIGNED-RV32-NEXT:    or a4, a5, a4
; CHECK-ALIGNED-RV32-NEXT:    or a2, a4, a2
; CHECK-ALIGNED-RV32-NEXT:    lbu a3, 1(a1)
; CHECK-ALIGNED-RV32-NEXT:    lbu a4, 0(a1)
; CHECK-ALIGNED-RV32-NEXT:    lbu a5, 2(a1)
; CHECK-ALIGNED-RV32-NEXT:    lbu a6, 3(a1)
; CHECK-ALIGNED-RV32-NEXT:    slli a3, a3, 8
; CHECK-ALIGNED-RV32-NEXT:    or a3, a3, a4
; CHECK-ALIGNED-RV32-NEXT:    slli a5, a5, 16
; CHECK-ALIGNED-RV32-NEXT:    slli a6, a6, 24
; CHECK-ALIGNED-RV32-NEXT:    or a4, a6, a5
; CHECK-ALIGNED-RV32-NEXT:    or a3, a4, a3
; CHECK-ALIGNED-RV32-NEXT:    xor a2, a2, a3
; CHECK-ALIGNED-RV32-NEXT:    lbu a3, 5(a0)
; CHECK-ALIGNED-RV32-NEXT:    lbu a4, 4(a0)
; CHECK-ALIGNED-RV32-NEXT:    lbu a5, 6(a0)
; CHECK-ALIGNED-RV32-NEXT:    lbu a6, 7(a0)
; CHECK-ALIGNED-RV32-NEXT:    slli a3, a3, 8
; CHECK-ALIGNED-RV32-NEXT:    or a3, a3, a4
; CHECK-ALIGNED-RV32-NEXT:    slli a5, a5, 16
; CHECK-ALIGNED-RV32-NEXT:    slli a6, a6, 24
; CHECK-ALIGNED-RV32-NEXT:    or a4, a6, a5
; CHECK-ALIGNED-RV32-NEXT:    or a3, a4, a3
; CHECK-ALIGNED-RV32-NEXT:    lbu a4, 5(a1)
; CHECK-ALIGNED-RV32-NEXT:    lbu a5, 4(a1)
; CHECK-ALIGNED-RV32-NEXT:    lbu a6, 6(a1)
; CHECK-ALIGNED-RV32-NEXT:    lbu a7, 7(a1)
; CHECK-ALIGNED-RV32-NEXT:    slli a4, a4, 8
; CHECK-ALIGNED-RV32-NEXT:    or a4, a4, a5
; CHECK-ALIGNED-RV32-NEXT:    slli a6, a6, 16
; CHECK-ALIGNED-RV32-NEXT:    slli a7, a7, 24
; CHECK-ALIGNED-RV32-NEXT:    or a5, a7, a6
; CHECK-ALIGNED-RV32-NEXT:    or a4, a5, a4
; CHECK-ALIGNED-RV32-NEXT:    xor a3, a3, a4
; CHECK-ALIGNED-RV32-NEXT:    lbu a4, 9(a0)
; CHECK-ALIGNED-RV32-NEXT:    lbu a5, 8(a0)
; CHECK-ALIGNED-RV32-NEXT:    lbu a6, 10(a0)
; CHECK-ALIGNED-RV32-NEXT:    lbu a7, 11(a0)
; CHECK-ALIGNED-RV32-NEXT:    slli a4, a4, 8
; CHECK-ALIGNED-RV32-NEXT:    or a4, a4, a5
; CHECK-ALIGNED-RV32-NEXT:    slli a6, a6, 16
; CHECK-ALIGNED-RV32-NEXT:    slli a7, a7, 24
; CHECK-ALIGNED-RV32-NEXT:    or a5, a7, a6
; CHECK-ALIGNED-RV32-NEXT:    or a4, a5, a4
; CHECK-ALIGNED-RV32-NEXT:    lbu a5, 9(a1)
; CHECK-ALIGNED-RV32-NEXT:    lbu a6, 8(a1)
; CHECK-ALIGNED-RV32-NEXT:    lbu a7, 10(a1)
; CHECK-ALIGNED-RV32-NEXT:    lbu t0, 11(a1)
; CHECK-ALIGNED-RV32-NEXT:    slli a5, a5, 8
; CHECK-ALIGNED-RV32-NEXT:    or a5, a5, a6
; CHECK-ALIGNED-RV32-NEXT:    slli a7, a7, 16
; CHECK-ALIGNED-RV32-NEXT:    slli t0, t0, 24
; CHECK-ALIGNED-RV32-NEXT:    or a6, t0, a7
; CHECK-ALIGNED-RV32-NEXT:    or a5, a6, a5
; CHECK-ALIGNED-RV32-NEXT:    xor a4, a4, a5
; CHECK-ALIGNED-RV32-NEXT:    lbu a5, 13(a0)
; CHECK-ALIGNED-RV32-NEXT:    lbu a6, 12(a0)
; CHECK-ALIGNED-RV32-NEXT:    lbu a7, 14(a0)
; CHECK-ALIGNED-RV32-NEXT:    lbu t0, 15(a0)
; CHECK-ALIGNED-RV32-NEXT:    slli a5, a5, 8
; CHECK-ALIGNED-RV32-NEXT:    or a5, a5, a6
; CHECK-ALIGNED-RV32-NEXT:    slli a7, a7, 16
; CHECK-ALIGNED-RV32-NEXT:    slli t0, t0, 24
; CHECK-ALIGNED-RV32-NEXT:    or a6, t0, a7
; CHECK-ALIGNED-RV32-NEXT:    or a5, a6, a5
; CHECK-ALIGNED-RV32-NEXT:    lbu a6, 13(a1)
; CHECK-ALIGNED-RV32-NEXT:    lbu a7, 12(a1)
; CHECK-ALIGNED-RV32-NEXT:    lbu t0, 14(a1)
; CHECK-ALIGNED-RV32-NEXT:    lbu t1, 15(a1)
; CHECK-ALIGNED-RV32-NEXT:    slli a6, a6, 8
; CHECK-ALIGNED-RV32-NEXT:    or a6, a6, a7
; CHECK-ALIGNED-RV32-NEXT:    slli t0, t0, 16
; CHECK-ALIGNED-RV32-NEXT:    slli t1, t1, 24
; CHECK-ALIGNED-RV32-NEXT:    or a7, t1, t0
; CHECK-ALIGNED-RV32-NEXT:    or a6, a7, a6
; CHECK-ALIGNED-RV32-NEXT:    xor a5, a5, a6
; CHECK-ALIGNED-RV32-NEXT:    lbu a6, 17(a0)
; CHECK-ALIGNED-RV32-NEXT:    lbu a7, 16(a0)
; CHECK-ALIGNED-RV32-NEXT:    lbu t0, 18(a0)
; CHECK-ALIGNED-RV32-NEXT:    lbu t1, 19(a0)
; CHECK-ALIGNED-RV32-NEXT:    slli a6, a6, 8
; CHECK-ALIGNED-RV32-NEXT:    or a6, a6, a7
; CHECK-ALIGNED-RV32-NEXT:    slli t0, t0, 16
; CHECK-ALIGNED-RV32-NEXT:    slli t1, t1, 24
; CHECK-ALIGNED-RV32-NEXT:    or a7, t1, t0
; CHECK-ALIGNED-RV32-NEXT:    or a6, a7, a6
; CHECK-ALIGNED-RV32-NEXT:    lbu a7, 17(a1)
; CHECK-ALIGNED-RV32-NEXT:    lbu t0, 16(a1)
; CHECK-ALIGNED-RV32-NEXT:    lbu t1, 18(a1)
; CHECK-ALIGNED-RV32-NEXT:    lbu t2, 19(a1)
; CHECK-ALIGNED-RV32-NEXT:    slli a7, a7, 8
; CHECK-ALIGNED-RV32-NEXT:    or a7, a7, t0
; CHECK-ALIGNED-RV32-NEXT:    slli t1, t1, 16
; CHECK-ALIGNED-RV32-NEXT:    slli t2, t2, 24
; CHECK-ALIGNED-RV32-NEXT:    or t0, t2, t1
; CHECK-ALIGNED-RV32-NEXT:    or a7, t0, a7
; CHECK-ALIGNED-RV32-NEXT:    xor a6, a6, a7
; CHECK-ALIGNED-RV32-NEXT:    lbu a7, 21(a0)
; CHECK-ALIGNED-RV32-NEXT:    lbu t0, 20(a0)
; CHECK-ALIGNED-RV32-NEXT:    lbu t1, 22(a0)
; CHECK-ALIGNED-RV32-NEXT:    lbu t2, 23(a0)
; CHECK-ALIGNED-RV32-NEXT:    slli a7, a7, 8
; CHECK-ALIGNED-RV32-NEXT:    or a7, a7, t0
; CHECK-ALIGNED-RV32-NEXT:    slli t1, t1, 16
; CHECK-ALIGNED-RV32-NEXT:    slli t2, t2, 24
; CHECK-ALIGNED-RV32-NEXT:    or t0, t2, t1
; CHECK-ALIGNED-RV32-NEXT:    or a7, t0, a7
; CHECK-ALIGNED-RV32-NEXT:    lbu t0, 21(a1)
; CHECK-ALIGNED-RV32-NEXT:    lbu t1, 20(a1)
; CHECK-ALIGNED-RV32-NEXT:    lbu t2, 22(a1)
; CHECK-ALIGNED-RV32-NEXT:    lbu t3, 23(a1)
; CHECK-ALIGNED-RV32-NEXT:    slli t0, t0, 8
; CHECK-ALIGNED-RV32-NEXT:    or t0, t0, t1
; CHECK-ALIGNED-RV32-NEXT:    slli t2, t2, 16
; CHECK-ALIGNED-RV32-NEXT:    slli t3, t3, 24
; CHECK-ALIGNED-RV32-NEXT:    or t1, t3, t2
; CHECK-ALIGNED-RV32-NEXT:    or t0, t1, t0
; CHECK-ALIGNED-RV32-NEXT:    xor a7, a7, t0
; CHECK-ALIGNED-RV32-NEXT:    lbu t0, 25(a0)
; CHECK-ALIGNED-RV32-NEXT:    lbu t1, 24(a0)
; CHECK-ALIGNED-RV32-NEXT:    lbu t2, 26(a0)
; CHECK-ALIGNED-RV32-NEXT:    lbu t3, 27(a0)
; CHECK-ALIGNED-RV32-NEXT:    slli t0, t0, 8
; CHECK-ALIGNED-RV32-NEXT:    or t0, t0, t1
; CHECK-ALIGNED-RV32-NEXT:    slli t2, t2, 16
; CHECK-ALIGNED-RV32-NEXT:    slli t3, t3, 24
; CHECK-ALIGNED-RV32-NEXT:    or t1, t3, t2
; CHECK-ALIGNED-RV32-NEXT:    or t0, t1, t0
; CHECK-ALIGNED-RV32-NEXT:    lbu t1, 25(a1)
; CHECK-ALIGNED-RV32-NEXT:    lbu t2, 24(a1)
; CHECK-ALIGNED-RV32-NEXT:    lbu t3, 26(a1)
; CHECK-ALIGNED-RV32-NEXT:    lbu t4, 27(a1)
; CHECK-ALIGNED-RV32-NEXT:    slli t1, t1, 8
; CHECK-ALIGNED-RV32-NEXT:    or t1, t1, t2
; CHECK-ALIGNED-RV32-NEXT:    slli t3, t3, 16
; CHECK-ALIGNED-RV32-NEXT:    slli t4, t4, 24
; CHECK-ALIGNED-RV32-NEXT:    or t2, t4, t3
; CHECK-ALIGNED-RV32-NEXT:    or t1, t2, t1
; CHECK-ALIGNED-RV32-NEXT:    xor t0, t0, t1
; CHECK-ALIGNED-RV32-NEXT:    lbu t1, 29(a0)
; CHECK-ALIGNED-RV32-NEXT:    lbu t2, 28(a0)
; CHECK-ALIGNED-RV32-NEXT:    lbu t3, 30(a0)
; CHECK-ALIGNED-RV32-NEXT:    lbu a0, 31(a0)
; CHECK-ALIGNED-RV32-NEXT:    slli t1, t1, 8
; CHECK-ALIGNED-RV32-NEXT:    or t1, t1, t2
; CHECK-ALIGNED-RV32-NEXT:    slli t3, t3, 16
; CHECK-ALIGNED-RV32-NEXT:    slli a0, a0, 24
; CHECK-ALIGNED-RV32-NEXT:    or a0, a0, t3
; CHECK-ALIGNED-RV32-NEXT:    or a0, a0, t1
; CHECK-ALIGNED-RV32-NEXT:    lbu t1, 29(a1)
; CHECK-ALIGNED-RV32-NEXT:    lbu t2, 28(a1)
; CHECK-ALIGNED-RV32-NEXT:    lbu t3, 30(a1)
; CHECK-ALIGNED-RV32-NEXT:    lbu a1, 31(a1)
; CHECK-ALIGNED-RV32-NEXT:    slli t1, t1, 8
; CHECK-ALIGNED-RV32-NEXT:    or t1, t1, t2
; CHECK-ALIGNED-RV32-NEXT:    slli t3, t3, 16
; CHECK-ALIGNED-RV32-NEXT:    slli a1, a1, 24
; CHECK-ALIGNED-RV32-NEXT:    or a1, a1, t3
; CHECK-ALIGNED-RV32-NEXT:    or a1, a1, t1
; CHECK-ALIGNED-RV32-NEXT:    xor a0, a0, a1
; CHECK-ALIGNED-RV32-NEXT:    or a2, a2, a3
; CHECK-ALIGNED-RV32-NEXT:    or a4, a4, a5
; CHECK-ALIGNED-RV32-NEXT:    or a1, a6, a7
; CHECK-ALIGNED-RV32-NEXT:    or a0, t0, a0
; CHECK-ALIGNED-RV32-NEXT:    or a2, a2, a4
; CHECK-ALIGNED-RV32-NEXT:    or a0, a1, a0
; CHECK-ALIGNED-RV32-NEXT:    or a0, a2, a0
; CHECK-ALIGNED-RV32-NEXT:    seqz a0, a0
; CHECK-ALIGNED-RV32-NEXT:    ret
;
; CHECK-ALIGNED-RV64-LABEL: bcmp_size_32:
; CHECK-ALIGNED-RV64:       # %bb.0: # %entry
; CHECK-ALIGNED-RV64-NEXT:    lbu a2, 1(a0)
; CHECK-ALIGNED-RV64-NEXT:    lbu a3, 0(a0)
; CHECK-ALIGNED-RV64-NEXT:    lbu a4, 2(a0)
; CHECK-ALIGNED-RV64-NEXT:    lbu a5, 3(a0)
; CHECK-ALIGNED-RV64-NEXT:    slli a2, a2, 8
; CHECK-ALIGNED-RV64-NEXT:    or a2, a2, a3
; CHECK-ALIGNED-RV64-NEXT:    slli a4, a4, 16
; CHECK-ALIGNED-RV64-NEXT:    slli a5, a5, 24
; CHECK-ALIGNED-RV64-NEXT:    or a4, a5, a4
; CHECK-ALIGNED-RV64-NEXT:    or a2, a4, a2
; CHECK-ALIGNED-RV64-NEXT:    lbu a3, 5(a0)
; CHECK-ALIGNED-RV64-NEXT:    lbu a4, 4(a0)
; CHECK-ALIGNED-RV64-NEXT:    lbu a5, 6(a0)
; CHECK-ALIGNED-RV64-NEXT:    lbu a6, 7(a0)
; CHECK-ALIGNED-RV64-NEXT:    slli a3, a3, 8
; CHECK-ALIGNED-RV64-NEXT:    or a3, a3, a4
; CHECK-ALIGNED-RV64-NEXT:    slli a5, a5, 16
; CHECK-ALIGNED-RV64-NEXT:    slli a6, a6, 24
; CHECK-ALIGNED-RV64-NEXT:    or a4, a6, a5
; CHECK-ALIGNED-RV64-NEXT:    or a3, a4, a3
; CHECK-ALIGNED-RV64-NEXT:    slli a3, a3, 32
; CHECK-ALIGNED-RV64-NEXT:    or a2, a3, a2
; CHECK-ALIGNED-RV64-NEXT:    lbu a3, 1(a1)
; CHECK-ALIGNED-RV64-NEXT:    lbu a4, 0(a1)
; CHECK-ALIGNED-RV64-NEXT:    lbu a5, 2(a1)
; CHECK-ALIGNED-RV64-NEXT:    lbu a6, 3(a1)
; CHECK-ALIGNED-RV64-NEXT:    slli a3, a3, 8
; CHECK-ALIGNED-RV64-NEXT:    or a3, a3, a4
; CHECK-ALIGNED-RV64-NEXT:    slli a5, a5, 16
; CHECK-ALIGNED-RV64-NEXT:    slli a6, a6, 24
; CHECK-ALIGNED-RV64-NEXT:    or a4, a6, a5
; CHECK-ALIGNED-RV64-NEXT:    or a3, a4, a3
; CHECK-ALIGNED-RV64-NEXT:    lbu a4, 5(a1)
; CHECK-ALIGNED-RV64-NEXT:    lbu a5, 4(a1)
; CHECK-ALIGNED-RV64-NEXT:    lbu a6, 6(a1)
; CHECK-ALIGNED-RV64-NEXT:    lbu a7, 7(a1)
; CHECK-ALIGNED-RV64-NEXT:    slli a4, a4, 8
; CHECK-ALIGNED-RV64-NEXT:    or a4, a4, a5
; CHECK-ALIGNED-RV64-NEXT:    slli a6, a6, 16
; CHECK-ALIGNED-RV64-NEXT:    slli a7, a7, 24
; CHECK-ALIGNED-RV64-NEXT:    or a5, a7, a6
; CHECK-ALIGNED-RV64-NEXT:    or a4, a5, a4
; CHECK-ALIGNED-RV64-NEXT:    slli a4, a4, 32
; CHECK-ALIGNED-RV64-NEXT:    or a3, a4, a3
; CHECK-ALIGNED-RV64-NEXT:    xor a2, a2, a3
; CHECK-ALIGNED-RV64-NEXT:    lbu a3, 9(a0)
; CHECK-ALIGNED-RV64-NEXT:    lbu a4, 8(a0)
; CHECK-ALIGNED-RV64-NEXT:    lbu a5, 10(a0)
; CHECK-ALIGNED-RV64-NEXT:    lbu a6, 11(a0)
; CHECK-ALIGNED-RV64-NEXT:    slli a3, a3, 8
; CHECK-ALIGNED-RV64-NEXT:    or a3, a3, a4
; CHECK-ALIGNED-RV64-NEXT:    slli a5, a5, 16
; CHECK-ALIGNED-RV64-NEXT:    slli a6, a6, 24
; CHECK-ALIGNED-RV64-NEXT:    or a4, a6, a5
; CHECK-ALIGNED-RV64-NEXT:    or a3, a4, a3
; CHECK-ALIGNED-RV64-NEXT:    lbu a4, 13(a0)
; CHECK-ALIGNED-RV64-NEXT:    lbu a5, 12(a0)
; CHECK-ALIGNED-RV64-NEXT:    lbu a6, 14(a0)
; CHECK-ALIGNED-RV64-NEXT:    lbu a7, 15(a0)
; CHECK-ALIGNED-RV64-NEXT:    slli a4, a4, 8
; CHECK-ALIGNED-RV64-NEXT:    or a4, a4, a5
; CHECK-ALIGNED-RV64-NEXT:    slli a6, a6, 16
; CHECK-ALIGNED-RV64-NEXT:    slli a7, a7, 24
; CHECK-ALIGNED-RV64-NEXT:    or a5, a7, a6
; CHECK-ALIGNED-RV64-NEXT:    or a4, a5, a4
; CHECK-ALIGNED-RV64-NEXT:    slli a4, a4, 32
; CHECK-ALIGNED-RV64-NEXT:    or a3, a4, a3
; CHECK-ALIGNED-RV64-NEXT:    lbu a4, 9(a1)
; CHECK-ALIGNED-RV64-NEXT:    lbu a5, 8(a1)
; CHECK-ALIGNED-RV64-NEXT:    lbu a6, 10(a1)
; CHECK-ALIGNED-RV64-NEXT:    lbu a7, 11(a1)
; CHECK-ALIGNED-RV64-NEXT:    slli a4, a4, 8
; CHECK-ALIGNED-RV64-NEXT:    or a4, a4, a5
; CHECK-ALIGNED-RV64-NEXT:    slli a6, a6, 16
; CHECK-ALIGNED-RV64-NEXT:    slli a7, a7, 24
; CHECK-ALIGNED-RV64-NEXT:    or a5, a7, a6
; CHECK-ALIGNED-RV64-NEXT:    or a4, a5, a4
; CHECK-ALIGNED-RV64-NEXT:    lbu a5, 13(a1)
; CHECK-ALIGNED-RV64-NEXT:    lbu a6, 12(a1)
; CHECK-ALIGNED-RV64-NEXT:    lbu a7, 14(a1)
; CHECK-ALIGNED-RV64-NEXT:    lbu t0, 15(a1)
; CHECK-ALIGNED-RV64-NEXT:    slli a5, a5, 8
; CHECK-ALIGNED-RV64-NEXT:    or a5, a5, a6
; CHECK-ALIGNED-RV64-NEXT:    slli a7, a7, 16
; CHECK-ALIGNED-RV64-NEXT:    slli t0, t0, 24
; CHECK-ALIGNED-RV64-NEXT:    or a6, t0, a7
; CHECK-ALIGNED-RV64-NEXT:    or a5, a6, a5
; CHECK-ALIGNED-RV64-NEXT:    slli a5, a5, 32
; CHECK-ALIGNED-RV64-NEXT:    or a4, a5, a4
; CHECK-ALIGNED-RV64-NEXT:    xor a3, a3, a4
; CHECK-ALIGNED-RV64-NEXT:    lbu a4, 17(a0)
; CHECK-ALIGNED-RV64-NEXT:    lbu a5, 16(a0)
; CHECK-ALIGNED-RV64-NEXT:    lbu a6, 18(a0)
; CHECK-ALIGNED-RV64-NEXT:    lbu a7, 19(a0)
; CHECK-ALIGNED-RV64-NEXT:    slli a4, a4, 8
; CHECK-ALIGNED-RV64-NEXT:    or a4, a4, a5
; CHECK-ALIGNED-RV64-NEXT:    slli a6, a6, 16
; CHECK-ALIGNED-RV64-NEXT:    slli a7, a7, 24
; CHECK-ALIGNED-RV64-NEXT:    or a5, a7, a6
; CHECK-ALIGNED-RV64-NEXT:    or a4, a5, a4
; CHECK-ALIGNED-RV64-NEXT:    lbu a5, 21(a0)
; CHECK-ALIGNED-RV64-NEXT:    lbu a6, 20(a0)
; CHECK-ALIGNED-RV64-NEXT:    lbu a7, 22(a0)
; CHECK-ALIGNED-RV64-NEXT:    lbu t0, 23(a0)
; CHECK-ALIGNED-RV64-NEXT:    slli a5, a5, 8
; CHECK-ALIGNED-RV64-NEXT:    or a5, a5, a6
; CHECK-ALIGNED-RV64-NEXT:    slli a7, a7, 16
; CHECK-ALIGNED-RV64-NEXT:    slli t0, t0, 24
; CHECK-ALIGNED-RV64-NEXT:    or a6, t0, a7
; CHECK-ALIGNED-RV64-NEXT:    or a5, a6, a5
; CHECK-ALIGNED-RV64-NEXT:    slli a5, a5, 32
; CHECK-ALIGNED-RV64-NEXT:    or a4, a5, a4
; CHECK-ALIGNED-RV64-NEXT:    lbu a5, 17(a1)
; CHECK-ALIGNED-RV64-NEXT:    lbu a6, 16(a1)
; CHECK-ALIGNED-RV64-NEXT:    lbu a7, 18(a1)
; CHECK-ALIGNED-RV64-NEXT:    lbu t0, 19(a1)
; CHECK-ALIGNED-RV64-NEXT:    slli a5, a5, 8
; CHECK-ALIGNED-RV64-NEXT:    or a5, a5, a6
; CHECK-ALIGNED-RV64-NEXT:    slli a7, a7, 16
; CHECK-ALIGNED-RV64-NEXT:    slli t0, t0, 24
; CHECK-ALIGNED-RV64-NEXT:    or a6, t0, a7
; CHECK-ALIGNED-RV64-NEXT:    or a5, a6, a5
; CHECK-ALIGNED-RV64-NEXT:    lbu a6, 21(a1)
; CHECK-ALIGNED-RV64-NEXT:    lbu a7, 20(a1)
; CHECK-ALIGNED-RV64-NEXT:    lbu t0, 22(a1)
; CHECK-ALIGNED-RV64-NEXT:    lbu t1, 23(a1)
; CHECK-ALIGNED-RV64-NEXT:    slli a6, a6, 8
; CHECK-ALIGNED-RV64-NEXT:    or a6, a6, a7
; CHECK-ALIGNED-RV64-NEXT:    slli t0, t0, 16
; CHECK-ALIGNED-RV64-NEXT:    slli t1, t1, 24
; CHECK-ALIGNED-RV64-NEXT:    or a7, t1, t0
; CHECK-ALIGNED-RV64-NEXT:    or a6, a7, a6
; CHECK-ALIGNED-RV64-NEXT:    slli a6, a6, 32
; CHECK-ALIGNED-RV64-NEXT:    or a5, a6, a5
; CHECK-ALIGNED-RV64-NEXT:    xor a4, a4, a5
; CHECK-ALIGNED-RV64-NEXT:    lbu a5, 25(a0)
; CHECK-ALIGNED-RV64-NEXT:    lbu a6, 24(a0)
; CHECK-ALIGNED-RV64-NEXT:    lbu a7, 26(a0)
; CHECK-ALIGNED-RV64-NEXT:    lbu t0, 27(a0)
; CHECK-ALIGNED-RV64-NEXT:    slli a5, a5, 8
; CHECK-ALIGNED-RV64-NEXT:    or a5, a5, a6
; CHECK-ALIGNED-RV64-NEXT:    slli a7, a7, 16
; CHECK-ALIGNED-RV64-NEXT:    slli t0, t0, 24
; CHECK-ALIGNED-RV64-NEXT:    or a6, t0, a7
; CHECK-ALIGNED-RV64-NEXT:    or a5, a6, a5
; CHECK-ALIGNED-RV64-NEXT:    lbu a6, 29(a0)
; CHECK-ALIGNED-RV64-NEXT:    lbu a7, 28(a0)
; CHECK-ALIGNED-RV64-NEXT:    lbu t0, 30(a0)
; CHECK-ALIGNED-RV64-NEXT:    lbu a0, 31(a0)
; CHECK-ALIGNED-RV64-NEXT:    slli a6, a6, 8
; CHECK-ALIGNED-RV64-NEXT:    or a6, a6, a7
; CHECK-ALIGNED-RV64-NEXT:    slli t0, t0, 16
; CHECK-ALIGNED-RV64-NEXT:    slli a0, a0, 24
; CHECK-ALIGNED-RV64-NEXT:    or a0, a0, t0
; CHECK-ALIGNED-RV64-NEXT:    or a0, a0, a6
; CHECK-ALIGNED-RV64-NEXT:    slli a0, a0, 32
; CHECK-ALIGNED-RV64-NEXT:    or a0, a0, a5
; CHECK-ALIGNED-RV64-NEXT:    lbu a5, 25(a1)
; CHECK-ALIGNED-RV64-NEXT:    lbu a6, 24(a1)
; CHECK-ALIGNED-RV64-NEXT:    lbu a7, 26(a1)
; CHECK-ALIGNED-RV64-NEXT:    lbu t0, 27(a1)
; CHECK-ALIGNED-RV64-NEXT:    slli a5, a5, 8
; CHECK-ALIGNED-RV64-NEXT:    or a5, a5, a6
; CHECK-ALIGNED-RV64-NEXT:    slli a7, a7, 16
; CHECK-ALIGNED-RV64-NEXT:    slli t0, t0, 24
; CHECK-ALIGNED-RV64-NEXT:    or a6, t0, a7
; CHECK-ALIGNED-RV64-NEXT:    or a5, a6, a5
; CHECK-ALIGNED-RV64-NEXT:    lbu a6, 29(a1)
; CHECK-ALIGNED-RV64-NEXT:    lbu a7, 28(a1)
; CHECK-ALIGNED-RV64-NEXT:    lbu t0, 30(a1)
; CHECK-ALIGNED-RV64-NEXT:    lbu a1, 31(a1)
; CHECK-ALIGNED-RV64-NEXT:    slli a6, a6, 8
; CHECK-ALIGNED-RV64-NEXT:    or a6, a6, a7
; CHECK-ALIGNED-RV64-NEXT:    slli t0, t0, 16
; CHECK-ALIGNED-RV64-NEXT:    slli a1, a1, 24
; CHECK-ALIGNED-RV64-NEXT:    or a1, a1, t0
; CHECK-ALIGNED-RV64-NEXT:    or a1, a1, a6
; CHECK-ALIGNED-RV64-NEXT:    slli a1, a1, 32
; CHECK-ALIGNED-RV64-NEXT:    or a1, a1, a5
; CHECK-ALIGNED-RV64-NEXT:    xor a0, a0, a1
; CHECK-ALIGNED-RV64-NEXT:    or a2, a2, a3
; CHECK-ALIGNED-RV64-NEXT:    or a0, a4, a0
; CHECK-ALIGNED-RV64-NEXT:    or a0, a2, a0
; CHECK-ALIGNED-RV64-NEXT:    seqz a0, a0
; CHECK-ALIGNED-RV64-NEXT:    ret
;
; CHECK-UNALIGNED-RV32-LABEL: bcmp_size_32:
; CHECK-UNALIGNED-RV32:       # %bb.0: # %entry
; CHECK-UNALIGNED-RV32-NEXT:    lw a2, 0(a0)
; CHECK-UNALIGNED-RV32-NEXT:    lw a3, 0(a1)
; CHECK-UNALIGNED-RV32-NEXT:    lw a4, 4(a0)
; CHECK-UNALIGNED-RV32-NEXT:    lw a5, 4(a1)
; CHECK-UNALIGNED-RV32-NEXT:    lw a6, 8(a0)
; CHECK-UNALIGNED-RV32-NEXT:    lw a7, 8(a1)
; CHECK-UNALIGNED-RV32-NEXT:    lw t0, 12(a0)
; CHECK-UNALIGNED-RV32-NEXT:    lw t1, 12(a1)
; CHECK-UNALIGNED-RV32-NEXT:    xor a2, a2, a3
; CHECK-UNALIGNED-RV32-NEXT:    xor a4, a4, a5
; CHECK-UNALIGNED-RV32-NEXT:    xor a3, a6, a7
; CHECK-UNALIGNED-RV32-NEXT:    xor a5, t0, t1
; CHECK-UNALIGNED-RV32-NEXT:    lw a6, 16(a0)
; CHECK-UNALIGNED-RV32-NEXT:    lw a7, 16(a1)
; CHECK-UNALIGNED-RV32-NEXT:    lw t0, 20(a0)
; CHECK-UNALIGNED-RV32-NEXT:    lw t1, 20(a1)
; CHECK-UNALIGNED-RV32-NEXT:    lw t2, 24(a0)
; CHECK-UNALIGNED-RV32-NEXT:    lw t3, 24(a1)
; CHECK-UNALIGNED-RV32-NEXT:    lw a0, 28(a0)
; CHECK-UNALIGNED-RV32-NEXT:    lw a1, 28(a1)
; CHECK-UNALIGNED-RV32-NEXT:    xor a6, a6, a7
; CHECK-UNALIGNED-RV32-NEXT:    xor a7, t0, t1
; CHECK-UNALIGNED-RV32-NEXT:    xor t0, t2, t3
; CHECK-UNALIGNED-RV32-NEXT:    xor a0, a0, a1
; CHECK-UNALIGNED-RV32-NEXT:    or a2, a2, a4
; CHECK-UNALIGNED-RV32-NEXT:    or a3, a3, a5
; CHECK-UNALIGNED-RV32-NEXT:    or a1, a6, a7
; CHECK-UNALIGNED-RV32-NEXT:    or a0, t0, a0
; CHECK-UNALIGNED-RV32-NEXT:    or a2, a2, a3
; CHECK-UNALIGNED-RV32-NEXT:    or a0, a1, a0
; CHECK-UNALIGNED-RV32-NEXT:    or a0, a2, a0
; CHECK-UNALIGNED-RV32-NEXT:    seqz a0, a0
; CHECK-UNALIGNED-RV32-NEXT:    ret
;
; CHECK-UNALIGNED-RV64-LABEL: bcmp_size_32:
; CHECK-UNALIGNED-RV64:       # %bb.0: # %entry
; CHECK-UNALIGNED-RV64-NEXT:    ld a2, 0(a0)
; CHECK-UNALIGNED-RV64-NEXT:    ld a3, 0(a1)
; CHECK-UNALIGNED-RV64-NEXT:    ld a4, 8(a0)
; CHECK-UNALIGNED-RV64-NEXT:    ld a5, 8(a1)
; CHECK-UNALIGNED-RV64-NEXT:    ld a6, 16(a0)
; CHECK-UNALIGNED-RV64-NEXT:    ld a7, 16(a1)
; CHECK-UNALIGNED-RV64-NEXT:    ld a0, 24(a0)
; CHECK-UNALIGNED-RV64-NEXT:    ld a1, 24(a1)
; CHECK-UNALIGNED-RV64-NEXT:    xor a2, a2, a3
; CHECK-UNALIGNED-RV64-NEXT:    xor a4, a4, a5
; CHECK-UNALIGNED-RV64-NEXT:    xor a3, a6, a7
; CHECK-UNALIGNED-RV64-NEXT:    xor a0, a0, a1
; CHECK-UNALIGNED-RV64-NEXT:    or a2, a2, a4
; CHECK-UNALIGNED-RV64-NEXT:    or a0, a3, a0
; CHECK-UNALIGNED-RV64-NEXT:    or a0, a2, a0
; CHECK-UNALIGNED-RV64-NEXT:    seqz a0, a0
; CHECK-UNALIGNED-RV64-NEXT:    ret
entry:
  %bcmp = call i32 @bcmp(i8* %s1, i8* %s2, iXLen 32)
  %ret = icmp eq i32 %bcmp, 0
  ret i1 %ret
}

define i1 @bcmp_size_64(i8* %s1, i8* %s2) {
; CHECK-ALIGNED-RV32-LABEL: bcmp_size_64:
; CHECK-ALIGNED-RV32:       # %bb.0: # %entry
; CHECK-ALIGNED-RV32-NEXT:    addi sp, sp, -16
; CHECK-ALIGNED-RV32-NEXT:    .cfi_def_cfa_offset 16
; CHECK-ALIGNED-RV32-NEXT:    sw ra, 12(sp) # 4-byte Folded Spill
; CHECK-ALIGNED-RV32-NEXT:    .cfi_offset ra, -4
; CHECK-ALIGNED-RV32-NEXT:    li a2, 64
; CHECK-ALIGNED-RV32-NEXT:    call bcmp
; CHECK-ALIGNED-RV32-NEXT:    seqz a0, a0
; CHECK-ALIGNED-RV32-NEXT:    lw ra, 12(sp) # 4-byte Folded Reload
; CHECK-ALIGNED-RV32-NEXT:    addi sp, sp, 16
; CHECK-ALIGNED-RV32-NEXT:    ret
;
; CHECK-ALIGNED-RV64-LABEL: bcmp_size_64:
; CHECK-ALIGNED-RV64:       # %bb.0: # %entry
; CHECK-ALIGNED-RV64-NEXT:    lbu a2, 1(a0)
; CHECK-ALIGNED-RV64-NEXT:    lbu a3, 0(a0)
; CHECK-ALIGNED-RV64-NEXT:    lbu a4, 2(a0)
; CHECK-ALIGNED-RV64-NEXT:    lbu a5, 3(a0)
; CHECK-ALIGNED-RV64-NEXT:    slli a2, a2, 8
; CHECK-ALIGNED-RV64-NEXT:    or a2, a2, a3
; CHECK-ALIGNED-RV64-NEXT:    slli a4, a4, 16
; CHECK-ALIGNED-RV64-NEXT:    slli a5, a5, 24
; CHECK-ALIGNED-RV64-NEXT:    or a4, a5, a4
; CHECK-ALIGNED-RV64-NEXT:    or a2, a4, a2
; CHECK-ALIGNED-RV64-NEXT:    lbu a3, 5(a0)
; CHECK-ALIGNED-RV64-NEXT:    lbu a4, 4(a0)
; CHECK-ALIGNED-RV64-NEXT:    lbu a5, 6(a0)
; CHECK-ALIGNED-RV64-NEXT:    lbu a6, 7(a0)
; CHECK-ALIGNED-RV64-NEXT:    slli a3, a3, 8
; CHECK-ALIGNED-RV64-NEXT:    or a3, a3, a4
; CHECK-ALIGNED-RV64-NEXT:    slli a5, a5, 16
; CHECK-ALIGNED-RV64-NEXT:    slli a6, a6, 24
; CHECK-ALIGNED-RV64-NEXT:    or a4, a6, a5
; CHECK-ALIGNED-RV64-NEXT:    or a3, a4, a3
; CHECK-ALIGNED-RV64-NEXT:    slli a3, a3, 32
; CHECK-ALIGNED-RV64-NEXT:    or a2, a3, a2
; CHECK-ALIGNED-RV64-NEXT:    lbu a3, 1(a1)
; CHECK-ALIGNED-RV64-NEXT:    lbu a4, 0(a1)
; CHECK-ALIGNED-RV64-NEXT:    lbu a5, 2(a1)
; CHECK-ALIGNED-RV64-NEXT:    lbu a6, 3(a1)
; CHECK-ALIGNED-RV64-NEXT:    slli a3, a3, 8
; CHECK-ALIGNED-RV64-NEXT:    or a3, a3, a4
; CHECK-ALIGNED-RV64-NEXT:    slli a5, a5, 16
; CHECK-ALIGNED-RV64-NEXT:    slli a6, a6, 24
; CHECK-ALIGNED-RV64-NEXT:    or a4, a6, a5
; CHECK-ALIGNED-RV64-NEXT:    or a3, a4, a3
; CHECK-ALIGNED-RV64-NEXT:    lbu a4, 5(a1)
; CHECK-ALIGNED-RV64-NEXT:    lbu a5, 4(a1)
; CHECK-ALIGNED-RV64-NEXT:    lbu a6, 6(a1)
; CHECK-ALIGNED-RV64-NEXT:    lbu a7, 7(a1)
; CHECK-ALIGNED-RV64-NEXT:    slli a4, a4, 8
; CHECK-ALIGNED-RV64-NEXT:    or a4, a4, a5
; CHECK-ALIGNED-RV64-NEXT:    slli a6, a6, 16
; CHECK-ALIGNED-RV64-NEXT:    slli a7, a7, 24
; CHECK-ALIGNED-RV64-NEXT:    or a5, a7, a6
; CHECK-ALIGNED-RV64-NEXT:    or a4, a5, a4
; CHECK-ALIGNED-RV64-NEXT:    slli a4, a4, 32
; CHECK-ALIGNED-RV64-NEXT:    or a3, a4, a3
; CHECK-ALIGNED-RV64-NEXT:    xor a2, a2, a3
; CHECK-ALIGNED-RV64-NEXT:    lbu a3, 9(a0)
; CHECK-ALIGNED-RV64-NEXT:    lbu a4, 8(a0)
; CHECK-ALIGNED-RV64-NEXT:    lbu a5, 10(a0)
; CHECK-ALIGNED-RV64-NEXT:    lbu a6, 11(a0)
; CHECK-ALIGNED-RV64-NEXT:    slli a3, a3, 8
; CHECK-ALIGNED-RV64-NEXT:    or a3, a3, a4
; CHECK-ALIGNED-RV64-NEXT:    slli a5, a5, 16
; CHECK-ALIGNED-RV64-NEXT:    slli a6, a6, 24
; CHECK-ALIGNED-RV64-NEXT:    or a4, a6, a5
; CHECK-ALIGNED-RV64-NEXT:    or a3, a4, a3
; CHECK-ALIGNED-RV64-NEXT:    lbu a4, 13(a0)
; CHECK-ALIGNED-RV64-NEXT:    lbu a5, 12(a0)
; CHECK-ALIGNED-RV64-NEXT:    lbu a6, 14(a0)
; CHECK-ALIGNED-RV64-NEXT:    lbu a7, 15(a0)
; CHECK-ALIGNED-RV64-NEXT:    slli a4, a4, 8
; CHECK-ALIGNED-RV64-NEXT:    or a4, a4, a5
; CHECK-ALIGNED-RV64-NEXT:    slli a6, a6, 16
; CHECK-ALIGNED-RV64-NEXT:    slli a7, a7, 24
; CHECK-ALIGNED-RV64-NEXT:    or a5, a7, a6
; CHECK-ALIGNED-RV64-NEXT:    or a4, a5, a4
; CHECK-ALIGNED-RV64-NEXT:    slli a4, a4, 32
; CHECK-ALIGNED-RV64-NEXT:    or a3, a4, a3
; CHECK-ALIGNED-RV64-NEXT:    lbu a4, 9(a1)
; CHECK-ALIGNED-RV64-NEXT:    lbu a5, 8(a1)
; CHECK-ALIGNED-RV64-NEXT:    lbu a6, 10(a1)
; CHECK-ALIGNED-RV64-NEXT:    lbu a7, 11(a1)
; CHECK-ALIGNED-RV64-NEXT:    slli a4, a4, 8
; CHECK-ALIGNED-RV64-NEXT:    or a4, a4, a5
; CHECK-ALIGNED-RV64-NEXT:    slli a6, a6, 16
; CHECK-ALIGNED-RV64-NEXT:    slli a7, a7, 24
; CHECK-ALIGNED-RV64-NEXT:    or a5, a7, a6
; CHECK-ALIGNED-RV64-NEXT:    or a4, a5, a4
; CHECK-ALIGNED-RV64-NEXT:    lbu a5, 13(a1)
; CHECK-ALIGNED-RV64-NEXT:    lbu a6, 12(a1)
; CHECK-ALIGNED-RV64-NEXT:    lbu a7, 14(a1)
; CHECK-ALIGNED-RV64-NEXT:    lbu t0, 15(a1)
; CHECK-ALIGNED-RV64-NEXT:    slli a5, a5, 8
; CHECK-ALIGNED-RV64-NEXT:    or a5, a5, a6
; CHECK-ALIGNED-RV64-NEXT:    slli a7, a7, 16
; CHECK-ALIGNED-RV64-NEXT:    slli t0, t0, 24
; CHECK-ALIGNED-RV64-NEXT:    or a6, t0, a7
; CHECK-ALIGNED-RV64-NEXT:    or a5, a6, a5
; CHECK-ALIGNED-RV64-NEXT:    slli a5, a5, 32
; CHECK-ALIGNED-RV64-NEXT:    or a4, a5, a4
; CHECK-ALIGNED-RV64-NEXT:    xor a3, a3, a4
; CHECK-ALIGNED-RV64-NEXT:    lbu a4, 17(a0)
; CHECK-ALIGNED-RV64-NEXT:    lbu a5, 16(a0)
; CHECK-ALIGNED-RV64-NEXT:    lbu a6, 18(a0)
; CHECK-ALIGNED-RV64-NEXT:    lbu a7, 19(a0)
; CHECK-ALIGNED-RV64-NEXT:    slli a4, a4, 8
; CHECK-ALIGNED-RV64-NEXT:    or a4, a4, a5
; CHECK-ALIGNED-RV64-NEXT:    slli a6, a6, 16
; CHECK-ALIGNED-RV64-NEXT:    slli a7, a7, 24
; CHECK-ALIGNED-RV64-NEXT:    or a5, a7, a6
; CHECK-ALIGNED-RV64-NEXT:    or a4, a5, a4
; CHECK-ALIGNED-RV64-NEXT:    lbu a5, 21(a0)
; CHECK-ALIGNED-RV64-NEXT:    lbu a6, 20(a0)
; CHECK-ALIGNED-RV64-NEXT:    lbu a7, 22(a0)
; CHECK-ALIGNED-RV64-NEXT:    lbu t0, 23(a0)
; CHECK-ALIGNED-RV64-NEXT:    slli a5, a5, 8
; CHECK-ALIGNED-RV64-NEXT:    or a5, a5, a6
; CHECK-ALIGNED-RV64-NEXT:    slli a7, a7, 16
; CHECK-ALIGNED-RV64-NEXT:    slli t0, t0, 24
; CHECK-ALIGNED-RV64-NEXT:    or a6, t0, a7
; CHECK-ALIGNED-RV64-NEXT:    or a5, a6, a5
; CHECK-ALIGNED-RV64-NEXT:    slli a5, a5, 32
; CHECK-ALIGNED-RV64-NEXT:    or a4, a5, a4
; CHECK-ALIGNED-RV64-NEXT:    lbu a5, 17(a1)
; CHECK-ALIGNED-RV64-NEXT:    lbu a6, 16(a1)
; CHECK-ALIGNED-RV64-NEXT:    lbu a7, 18(a1)
; CHECK-ALIGNED-RV64-NEXT:    lbu t0, 19(a1)
; CHECK-ALIGNED-RV64-NEXT:    slli a5, a5, 8
; CHECK-ALIGNED-RV64-NEXT:    or a5, a5, a6
; CHECK-ALIGNED-RV64-NEXT:    slli a7, a7, 16
; CHECK-ALIGNED-RV64-NEXT:    slli t0, t0, 24
; CHECK-ALIGNED-RV64-NEXT:    or a6, t0, a7
; CHECK-ALIGNED-RV64-NEXT:    or a5, a6, a5
; CHECK-ALIGNED-RV64-NEXT:    lbu a6, 21(a1)
; CHECK-ALIGNED-RV64-NEXT:    lbu a7, 20(a1)
; CHECK-ALIGNED-RV64-NEXT:    lbu t0, 22(a1)
; CHECK-ALIGNED-RV64-NEXT:    lbu t1, 23(a1)
; CHECK-ALIGNED-RV64-NEXT:    slli a6, a6, 8
; CHECK-ALIGNED-RV64-NEXT:    or a6, a6, a7
; CHECK-ALIGNED-RV64-NEXT:    slli t0, t0, 16
; CHECK-ALIGNED-RV64-NEXT:    slli t1, t1, 24
; CHECK-ALIGNED-RV64-NEXT:    or a7, t1, t0
; CHECK-ALIGNED-RV64-NEXT:    or a6, a7, a6
; CHECK-ALIGNED-RV64-NEXT:    slli a6, a6, 32
; CHECK-ALIGNED-RV64-NEXT:    or a5, a6, a5
; CHECK-ALIGNED-RV64-NEXT:    xor a4, a4, a5
; CHECK-ALIGNED-RV64-NEXT:    lbu a5, 25(a0)
; CHECK-ALIGNED-RV64-NEXT:    lbu a6, 24(a0)
; CHECK-ALIGNED-RV64-NEXT:    lbu a7, 26(a0)
; CHECK-ALIGNED-RV64-NEXT:    lbu t0, 27(a0)
; CHECK-ALIGNED-RV64-NEXT:    slli a5, a5, 8
; CHECK-ALIGNED-RV64-NEXT:    or a5, a5, a6
; CHECK-ALIGNED-RV64-NEXT:    slli a7, a7, 16
; CHECK-ALIGNED-RV64-NEXT:    slli t0, t0, 24
; CHECK-ALIGNED-RV64-NEXT:    or a6, t0, a7
; CHECK-ALIGNED-RV64-NEXT:    or a5, a6, a5
; CHECK-ALIGNED-RV64-NEXT:    lbu a6, 29(a0)
; CHECK-ALIGNED-RV64-NEXT:    lbu a7, 28(a0)
; CHECK-ALIGNED-RV64-NEXT:    lbu t0, 30(a0)
; CHECK-ALIGNED-RV64-NEXT:    lbu t1, 31(a0)
; CHECK-ALIGNED-RV64-NEXT:    slli a6, a6, 8
; CHECK-ALIGNED-RV64-NEXT:    or a6, a6, a7
; CHECK-ALIGNED-RV64-NEXT:    slli t0, t0, 16
; CHECK-ALIGNED-RV64-NEXT:    slli t1, t1, 24
; CHECK-ALIGNED-RV64-NEXT:    or a7, t1, t0
; CHECK-ALIGNED-RV64-NEXT:    or a6, a7, a6
; CHECK-ALIGNED-RV64-NEXT:    slli a6, a6, 32
; CHECK-ALIGNED-RV64-NEXT:    or a5, a6, a5
; CHECK-ALIGNED-RV64-NEXT:    lbu a6, 25(a1)
; CHECK-ALIGNED-RV64-NEXT:    lbu a7, 24(a1)
; CHECK-ALIGNED-RV64-NEXT:    lbu t0, 26(a1)
; CHECK-ALIGNED-RV64-NEXT:    lbu t1, 27(a1)
; CHECK-ALIGNED-RV64-NEXT:    slli a6, a6, 8
; CHECK-ALIGNED-RV64-NEXT:    or a6, a6, a7
; CHECK-ALIGNED-RV64-NEXT:    slli t0, t0, 16
; CHECK-ALIGNED-RV64-NEXT:    slli t1, t1, 24
; CHECK-ALIGNED-RV64-NEXT:    or a7, t1, t0
; CHECK-ALIGNED-RV64-NEXT:    or a6, a7, a6
; CHECK-ALIGNED-RV64-NEXT:    lbu a7, 29(a1)
; CHECK-ALIGNED-RV64-NEXT:    lbu t0, 28(a1)
; CHECK-ALIGNED-RV64-NEXT:    lbu t1, 30(a1)
; CHECK-ALIGNED-RV64-NEXT:    lbu t2, 31(a1)
; CHECK-ALIGNED-RV64-NEXT:    slli a7, a7, 8
; CHECK-ALIGNED-RV64-NEXT:    or a7, a7, t0
; CHECK-ALIGNED-RV64-NEXT:    slli t1, t1, 16
; CHECK-ALIGNED-RV64-NEXT:    slli t2, t2, 24
; CHECK-ALIGNED-RV64-NEXT:    or t0, t2, t1
; CHECK-ALIGNED-RV64-NEXT:    or a7, t0, a7
; CHECK-ALIGNED-RV64-NEXT:    slli a7, a7, 32
; CHECK-ALIGNED-RV64-NEXT:    or a6, a7, a6
; CHECK-ALIGNED-RV64-NEXT:    xor a5, a5, a6
; CHECK-ALIGNED-RV64-NEXT:    lbu a6, 33(a0)
; CHECK-ALIGNED-RV64-NEXT:    lbu a7, 32(a0)
; CHECK-ALIGNED-RV64-NEXT:    lbu t0, 34(a0)
; CHECK-ALIGNED-RV64-NEXT:    lbu t1, 35(a0)
; CHECK-ALIGNED-RV64-NEXT:    slli a6, a6, 8
; CHECK-ALIGNED-RV64-NEXT:    or a6, a6, a7
; CHECK-ALIGNED-RV64-NEXT:    slli t0, t0, 16
; CHECK-ALIGNED-RV64-NEXT:    slli t1, t1, 24
; CHECK-ALIGNED-RV64-NEXT:    or a7, t1, t0
; CHECK-ALIGNED-RV64-NEXT:    or a6, a7, a6
; CHECK-ALIGNED-RV64-NEXT:    lbu a7, 37(a0)
; CHECK-ALIGNED-RV64-NEXT:    lbu t0, 36(a0)
; CHECK-ALIGNED-RV64-NEXT:    lbu t1, 38(a0)
; CHECK-ALIGNED-RV64-NEXT:    lbu t2, 39(a0)
; CHECK-ALIGNED-RV64-NEXT:    slli a7, a7, 8
; CHECK-ALIGNED-RV64-NEXT:    or a7, a7, t0
; CHECK-ALIGNED-RV64-NEXT:    slli t1, t1, 16
; CHECK-ALIGNED-RV64-NEXT:    slli t2, t2, 24
; CHECK-ALIGNED-RV64-NEXT:    or t0, t2, t1
; CHECK-ALIGNED-RV64-NEXT:    or a7, t0, a7
; CHECK-ALIGNED-RV64-NEXT:    slli a7, a7, 32
; CHECK-ALIGNED-RV64-NEXT:    or a6, a7, a6
; CHECK-ALIGNED-RV64-NEXT:    lbu a7, 33(a1)
; CHECK-ALIGNED-RV64-NEXT:    lbu t0, 32(a1)
; CHECK-ALIGNED-RV64-NEXT:    lbu t1, 34(a1)
; CHECK-ALIGNED-RV64-NEXT:    lbu t2, 35(a1)
; CHECK-ALIGNED-RV64-NEXT:    slli a7, a7, 8
; CHECK-ALIGNED-RV64-NEXT:    or a7, a7, t0
; CHECK-ALIGNED-RV64-NEXT:    slli t1, t1, 16
; CHECK-ALIGNED-RV64-NEXT:    slli t2, t2, 24
; CHECK-ALIGNED-RV64-NEXT:    or t0, t2, t1
; CHECK-ALIGNED-RV64-NEXT:    or a7, t0, a7
; CHECK-ALIGNED-RV64-NEXT:    lbu t0, 37(a1)
; CHECK-ALIGNED-RV64-NEXT:    lbu t1, 36(a1)
; CHECK-ALIGNED-RV64-NEXT:    lbu t2, 38(a1)
; CHECK-ALIGNED-RV64-NEXT:    lbu t3, 39(a1)
; CHECK-ALIGNED-RV64-NEXT:    slli t0, t0, 8
; CHECK-ALIGNED-RV64-NEXT:    or t0, t0, t1
; CHECK-ALIGNED-RV64-NEXT:    slli t2, t2, 16
; CHECK-ALIGNED-RV64-NEXT:    slli t3, t3, 24
; CHECK-ALIGNED-RV64-NEXT:    or t1, t3, t2
; CHECK-ALIGNED-RV64-NEXT:    or t0, t1, t0
; CHECK-ALIGNED-RV64-NEXT:    slli t0, t0, 32
; CHECK-ALIGNED-RV64-NEXT:    or a7, t0, a7
; CHECK-ALIGNED-RV64-NEXT:    xor a6, a6, a7
; CHECK-ALIGNED-RV64-NEXT:    lbu a7, 41(a0)
; CHECK-ALIGNED-RV64-NEXT:    lbu t0, 40(a0)
; CHECK-ALIGNED-RV64-NEXT:    lbu t1, 42(a0)
; CHECK-ALIGNED-RV64-NEXT:    lbu t2, 43(a0)
; CHECK-ALIGNED-RV64-NEXT:    slli a7, a7, 8
; CHECK-ALIGNED-RV64-NEXT:    or a7, a7, t0
; CHECK-ALIGNED-RV64-NEXT:    slli t1, t1, 16
; CHECK-ALIGNED-RV64-NEXT:    slli t2, t2, 24
; CHECK-ALIGNED-RV64-NEXT:    or t0, t2, t1
; CHECK-ALIGNED-RV64-NEXT:    or a7, t0, a7
; CHECK-ALIGNED-RV64-NEXT:    lbu t0, 45(a0)
; CHECK-ALIGNED-RV64-NEXT:    lbu t1, 44(a0)
; CHECK-ALIGNED-RV64-NEXT:    lbu t2, 46(a0)
; CHECK-ALIGNED-RV64-NEXT:    lbu t3, 47(a0)
; CHECK-ALIGNED-RV64-NEXT:    slli t0, t0, 8
; CHECK-ALIGNED-RV64-NEXT:    or t0, t0, t1
; CHECK-ALIGNED-RV64-NEXT:    slli t2, t2, 16
; CHECK-ALIGNED-RV64-NEXT:    slli t3, t3, 24
; CHECK-ALIGNED-RV64-NEXT:    or t1, t3, t2
; CHECK-ALIGNED-RV64-NEXT:    or t0, t1, t0
; CHECK-ALIGNED-RV64-NEXT:    slli t0, t0, 32
; CHECK-ALIGNED-RV64-NEXT:    or a7, t0, a7
; CHECK-ALIGNED-RV64-NEXT:    lbu t0, 41(a1)
; CHECK-ALIGNED-RV64-NEXT:    lbu t1, 40(a1)
; CHECK-ALIGNED-RV64-NEXT:    lbu t2, 42(a1)
; CHECK-ALIGNED-RV64-NEXT:    lbu t3, 43(a1)
; CHECK-ALIGNED-RV64-NEXT:    slli t0, t0, 8
; CHECK-ALIGNED-RV64-NEXT:    or t0, t0, t1
; CHECK-ALIGNED-RV64-NEXT:    slli t2, t2, 16
; CHECK-ALIGNED-RV64-NEXT:    slli t3, t3, 24
; CHECK-ALIGNED-RV64-NEXT:    or t1, t3, t2
; CHECK-ALIGNED-RV64-NEXT:    or t0, t1, t0
; CHECK-ALIGNED-RV64-NEXT:    lbu t1, 45(a1)
; CHECK-ALIGNED-RV64-NEXT:    lbu t2, 44(a1)
; CHECK-ALIGNED-RV64-NEXT:    lbu t3, 46(a1)
; CHECK-ALIGNED-RV64-NEXT:    lbu t4, 47(a1)
; CHECK-ALIGNED-RV64-NEXT:    slli t1, t1, 8
; CHECK-ALIGNED-RV64-NEXT:    or t1, t1, t2
; CHECK-ALIGNED-RV64-NEXT:    slli t3, t3, 16
; CHECK-ALIGNED-RV64-NEXT:    slli t4, t4, 24
; CHECK-ALIGNED-RV64-NEXT:    or t2, t4, t3
; CHECK-ALIGNED-RV64-NEXT:    or t1, t2, t1
; CHECK-ALIGNED-RV64-NEXT:    slli t1, t1, 32
; CHECK-ALIGNED-RV64-NEXT:    or t0, t1, t0
; CHECK-ALIGNED-RV64-NEXT:    xor a7, a7, t0
; CHECK-ALIGNED-RV64-NEXT:    lbu t0, 49(a0)
; CHECK-ALIGNED-RV64-NEXT:    lbu t1, 48(a0)
; CHECK-ALIGNED-RV64-NEXT:    lbu t2, 50(a0)
; CHECK-ALIGNED-RV64-NEXT:    lbu t3, 51(a0)
; CHECK-ALIGNED-RV64-NEXT:    slli t0, t0, 8
; CHECK-ALIGNED-RV64-NEXT:    or t0, t0, t1
; CHECK-ALIGNED-RV64-NEXT:    slli t2, t2, 16
; CHECK-ALIGNED-RV64-NEXT:    slli t3, t3, 24
; CHECK-ALIGNED-RV64-NEXT:    or t1, t3, t2
; CHECK-ALIGNED-RV64-NEXT:    or t0, t1, t0
; CHECK-ALIGNED-RV64-NEXT:    lbu t1, 53(a0)
; CHECK-ALIGNED-RV64-NEXT:    lbu t2, 52(a0)
; CHECK-ALIGNED-RV64-NEXT:    lbu t3, 54(a0)
; CHECK-ALIGNED-RV64-NEXT:    lbu t4, 55(a0)
; CHECK-ALIGNED-RV64-NEXT:    slli t1, t1, 8
; CHECK-ALIGNED-RV64-NEXT:    or t1, t1, t2
; CHECK-ALIGNED-RV64-NEXT:    slli t3, t3, 16
; CHECK-ALIGNED-RV64-NEXT:    slli t4, t4, 24
; CHECK-ALIGNED-RV64-NEXT:    or t2, t4, t3
; CHECK-ALIGNED-RV64-NEXT:    or t1, t2, t1
; CHECK-ALIGNED-RV64-NEXT:    slli t1, t1, 32
; CHECK-ALIGNED-RV64-NEXT:    or t0, t1, t0
; CHECK-ALIGNED-RV64-NEXT:    lbu t1, 49(a1)
; CHECK-ALIGNED-RV64-NEXT:    lbu t2, 48(a1)
; CHECK-ALIGNED-RV64-NEXT:    lbu t3, 50(a1)
; CHECK-ALIGNED-RV64-NEXT:    lbu t4, 51(a1)
; CHECK-ALIGNED-RV64-NEXT:    slli t1, t1, 8
; CHECK-ALIGNED-RV64-NEXT:    or t1, t1, t2
; CHECK-ALIGNED-RV64-NEXT:    slli t3, t3, 16
; CHECK-ALIGNED-RV64-NEXT:    slli t4, t4, 24
; CHECK-ALIGNED-RV64-NEXT:    or t2, t4, t3
; CHECK-ALIGNED-RV64-NEXT:    or t1, t2, t1
; CHECK-ALIGNED-RV64-NEXT:    lbu t2, 53(a1)
; CHECK-ALIGNED-RV64-NEXT:    lbu t3, 52(a1)
; CHECK-ALIGNED-RV64-NEXT:    lbu t4, 54(a1)
; CHECK-ALIGNED-RV64-NEXT:    lbu t5, 55(a1)
; CHECK-ALIGNED-RV64-NEXT:    slli t2, t2, 8
; CHECK-ALIGNED-RV64-NEXT:    or t2, t2, t3
; CHECK-ALIGNED-RV64-NEXT:    slli t4, t4, 16
; CHECK-ALIGNED-RV64-NEXT:    slli t5, t5, 24
; CHECK-ALIGNED-RV64-NEXT:    or t3, t5, t4
; CHECK-ALIGNED-RV64-NEXT:    or t2, t3, t2
; CHECK-ALIGNED-RV64-NEXT:    slli t2, t2, 32
; CHECK-ALIGNED-RV64-NEXT:    or t1, t2, t1
; CHECK-ALIGNED-RV64-NEXT:    xor t0, t0, t1
; CHECK-ALIGNED-RV64-NEXT:    lbu t1, 57(a0)
; CHECK-ALIGNED-RV64-NEXT:    lbu t2, 56(a0)
; CHECK-ALIGNED-RV64-NEXT:    lbu t3, 58(a0)
; CHECK-ALIGNED-RV64-NEXT:    lbu t4, 59(a0)
; CHECK-ALIGNED-RV64-NEXT:    slli t1, t1, 8
; CHECK-ALIGNED-RV64-NEXT:    or t1, t1, t2
; CHECK-ALIGNED-RV64-NEXT:    slli t3, t3, 16
; CHECK-ALIGNED-RV64-NEXT:    slli t4, t4, 24
; CHECK-ALIGNED-RV64-NEXT:    or t2, t4, t3
; CHECK-ALIGNED-RV64-NEXT:    or t1, t2, t1
; CHECK-ALIGNED-RV64-NEXT:    lbu t2, 61(a0)
; CHECK-ALIGNED-RV64-NEXT:    lbu t3, 60(a0)
; CHECK-ALIGNED-RV64-NEXT:    lbu t4, 62(a0)
; CHECK-ALIGNED-RV64-NEXT:    lbu a0, 63(a0)
; CHECK-ALIGNED-RV64-NEXT:    slli t2, t2, 8
; CHECK-ALIGNED-RV64-NEXT:    or t2, t2, t3
; CHECK-ALIGNED-RV64-NEXT:    slli t4, t4, 16
; CHECK-ALIGNED-RV64-NEXT:    slli a0, a0, 24
; CHECK-ALIGNED-RV64-NEXT:    or a0, a0, t4
; CHECK-ALIGNED-RV64-NEXT:    or a0, a0, t2
; CHECK-ALIGNED-RV64-NEXT:    slli a0, a0, 32
; CHECK-ALIGNED-RV64-NEXT:    or a0, a0, t1
; CHECK-ALIGNED-RV64-NEXT:    lbu t1, 57(a1)
; CHECK-ALIGNED-RV64-NEXT:    lbu t2, 56(a1)
; CHECK-ALIGNED-RV64-NEXT:    lbu t3, 58(a1)
; CHECK-ALIGNED-RV64-NEXT:    lbu t4, 59(a1)
; CHECK-ALIGNED-RV64-NEXT:    slli t1, t1, 8
; CHECK-ALIGNED-RV64-NEXT:    or t1, t1, t2
; CHECK-ALIGNED-RV64-NEXT:    slli t3, t3, 16
; CHECK-ALIGNED-RV64-NEXT:    slli t4, t4, 24
; CHECK-ALIGNED-RV64-NEXT:    or t2, t4, t3
; CHECK-ALIGNED-RV64-NEXT:    or t1, t2, t1
; CHECK-ALIGNED-RV64-NEXT:    lbu t2, 61(a1)
; CHECK-ALIGNED-RV64-NEXT:    lbu t3, 60(a1)
; CHECK-ALIGNED-RV64-NEXT:    lbu t4, 62(a1)
; CHECK-ALIGNED-RV64-NEXT:    lbu a1, 63(a1)
; CHECK-ALIGNED-RV64-NEXT:    slli t2, t2, 8
; CHECK-ALIGNED-RV64-NEXT:    or t2, t2, t3
; CHECK-ALIGNED-RV64-NEXT:    slli t4, t4, 16
; CHECK-ALIGNED-RV64-NEXT:    slli a1, a1, 24
; CHECK-ALIGNED-RV64-NEXT:    or a1, a1, t4
; CHECK-ALIGNED-RV64-NEXT:    or a1, a1, t2
; CHECK-ALIGNED-RV64-NEXT:    slli a1, a1, 32
; CHECK-ALIGNED-RV64-NEXT:    or a1, a1, t1
; CHECK-ALIGNED-RV64-NEXT:    xor a0, a0, a1
; CHECK-ALIGNED-RV64-NEXT:    or a2, a2, a3
; CHECK-ALIGNED-RV64-NEXT:    or a4, a4, a5
; CHECK-ALIGNED-RV64-NEXT:    or a1, a6, a7
; CHECK-ALIGNED-RV64-NEXT:    or a0, t0, a0
; CHECK-ALIGNED-RV64-NEXT:    or a2, a2, a4
; CHECK-ALIGNED-RV64-NEXT:    or a0, a1, a0
; CHECK-ALIGNED-RV64-NEXT:    or a0, a2, a0
; CHECK-ALIGNED-RV64-NEXT:    seqz a0, a0
; CHECK-ALIGNED-RV64-NEXT:    ret
;
; CHECK-UNALIGNED-RV32-LABEL: bcmp_size_64:
; CHECK-UNALIGNED-RV32:       # %bb.0: # %entry
; CHECK-UNALIGNED-RV32-NEXT:    addi sp, sp, -16
; CHECK-UNALIGNED-RV32-NEXT:    .cfi_def_cfa_offset 16
; CHECK-UNALIGNED-RV32-NEXT:    sw ra, 12(sp) # 4-byte Folded Spill
; CHECK-UNALIGNED-RV32-NEXT:    .cfi_offset ra, -4
; CHECK-UNALIGNED-RV32-NEXT:    li a2, 64
; CHECK-UNALIGNED-RV32-NEXT:    call bcmp
; CHECK-UNALIGNED-RV32-NEXT:    seqz a0, a0
; CHECK-UNALIGNED-RV32-NEXT:    lw ra, 12(sp) # 4-byte Folded Reload
; CHECK-UNALIGNED-RV32-NEXT:    addi sp, sp, 16
; CHECK-UNALIGNED-RV32-NEXT:    ret
;
; CHECK-UNALIGNED-RV64-LABEL: bcmp_size_64:
; CHECK-UNALIGNED-RV64:       # %bb.0: # %entry
; CHECK-UNALIGNED-RV64-NEXT:    ld a2, 0(a0)
; CHECK-UNALIGNED-RV64-NEXT:    ld a3, 0(a1)
; CHECK-UNALIGNED-RV64-NEXT:    ld a4, 8(a0)
; CHECK-UNALIGNED-RV64-NEXT:    ld a5, 8(a1)
; CHECK-UNALIGNED-RV64-NEXT:    ld a6, 16(a0)
; CHECK-UNALIGNED-RV64-NEXT:    ld a7, 16(a1)
; CHECK-UNALIGNED-RV64-NEXT:    ld t0, 24(a0)
; CHECK-UNALIGNED-RV64-NEXT:    ld t1, 24(a1)
; CHECK-UNALIGNED-RV64-NEXT:    xor a2, a2, a3
; CHECK-UNALIGNED-RV64-NEXT:    xor a4, a4, a5
; CHECK-UNALIGNED-RV64-NEXT:    xor a3, a6, a7
; CHECK-UNALIGNED-RV64-NEXT:    xor a5, t0, t1
; CHECK-UNALIGNED-RV64-NEXT:    ld a6, 32(a0)
; CHECK-UNALIGNED-RV64-NEXT:    ld a7, 32(a1)
; CHECK-UNALIGNED-RV64-NEXT:    ld t0, 40(a0)
; CHECK-UNALIGNED-RV64-NEXT:    ld t1, 40(a1)
; CHECK-UNALIGNED-RV64-NEXT:    ld t2, 48(a0)
; CHECK-UNALIGNED-RV64-NEXT:    ld t3, 48(a1)
; CHECK-UNALIGNED-RV64-NEXT:    ld a0, 56(a0)
; CHECK-UNALIGNED-RV64-NEXT:    ld a1, 56(a1)
; CHECK-UNALIGNED-RV64-NEXT:    xor a6, a6, a7
; CHECK-UNALIGNED-RV64-NEXT:    xor a7, t0, t1
; CHECK-UNALIGNED-RV64-NEXT:    xor t0, t2, t3
; CHECK-UNALIGNED-RV64-NEXT:    xor a0, a0, a1
; CHECK-UNALIGNED-RV64-NEXT:    or a2, a2, a4
; CHECK-UNALIGNED-RV64-NEXT:    or a3, a3, a5
; CHECK-UNALIGNED-RV64-NEXT:    or a1, a6, a7
; CHECK-UNALIGNED-RV64-NEXT:    or a0, t0, a0
; CHECK-UNALIGNED-RV64-NEXT:    or a2, a2, a3
; CHECK-UNALIGNED-RV64-NEXT:    or a0, a1, a0
; CHECK-UNALIGNED-RV64-NEXT:    or a0, a2, a0
; CHECK-UNALIGNED-RV64-NEXT:    seqz a0, a0
; CHECK-UNALIGNED-RV64-NEXT:    ret
entry:
  %bcmp = call i32 @bcmp(i8* %s1, i8* %s2, iXLen 64)
  %ret = icmp eq i32 %bcmp, 0
  ret i1 %ret
}

define i1 @bcmp_size_runtime(i8* %s1, i8* %s2, iXLen %len) {
; CHECK-ALIGNED-RV32-LABEL: bcmp_size_runtime:
; CHECK-ALIGNED-RV32:       # %bb.0: # %entry
; CHECK-ALIGNED-RV32-NEXT:    addi sp, sp, -16
; CHECK-ALIGNED-RV32-NEXT:    .cfi_def_cfa_offset 16
; CHECK-ALIGNED-RV32-NEXT:    sw ra, 12(sp) # 4-byte Folded Spill
; CHECK-ALIGNED-RV32-NEXT:    .cfi_offset ra, -4
; CHECK-ALIGNED-RV32-NEXT:    call bcmp
; CHECK-ALIGNED-RV32-NEXT:    seqz a0, a0
; CHECK-ALIGNED-RV32-NEXT:    lw ra, 12(sp) # 4-byte Folded Reload
; CHECK-ALIGNED-RV32-NEXT:    addi sp, sp, 16
; CHECK-ALIGNED-RV32-NEXT:    ret
;
; CHECK-ALIGNED-RV64-LABEL: bcmp_size_runtime:
; CHECK-ALIGNED-RV64:       # %bb.0: # %entry
; CHECK-ALIGNED-RV64-NEXT:    addi sp, sp, -16
; CHECK-ALIGNED-RV64-NEXT:    .cfi_def_cfa_offset 16
; CHECK-ALIGNED-RV64-NEXT:    sd ra, 8(sp) # 8-byte Folded Spill
; CHECK-ALIGNED-RV64-NEXT:    .cfi_offset ra, -8
; CHECK-ALIGNED-RV64-NEXT:    call bcmp
; CHECK-ALIGNED-RV64-NEXT:    sext.w a0, a0
; CHECK-ALIGNED-RV64-NEXT:    seqz a0, a0
; CHECK-ALIGNED-RV64-NEXT:    ld ra, 8(sp) # 8-byte Folded Reload
; CHECK-ALIGNED-RV64-NEXT:    addi sp, sp, 16
; CHECK-ALIGNED-RV64-NEXT:    ret
;
; CHECK-UNALIGNED-RV32-LABEL: bcmp_size_runtime:
; CHECK-UNALIGNED-RV32:       # %bb.0: # %entry
; CHECK-UNALIGNED-RV32-NEXT:    addi sp, sp, -16
; CHECK-UNALIGNED-RV32-NEXT:    .cfi_def_cfa_offset 16
; CHECK-UNALIGNED-RV32-NEXT:    sw ra, 12(sp) # 4-byte Folded Spill
; CHECK-UNALIGNED-RV32-NEXT:    .cfi_offset ra, -4
; CHECK-UNALIGNED-RV32-NEXT:    call bcmp
; CHECK-UNALIGNED-RV32-NEXT:    seqz a0, a0
; CHECK-UNALIGNED-RV32-NEXT:    lw ra, 12(sp) # 4-byte Folded Reload
; CHECK-UNALIGNED-RV32-NEXT:    addi sp, sp, 16
; CHECK-UNALIGNED-RV32-NEXT:    ret
;
; CHECK-UNALIGNED-RV64-LABEL: bcmp_size_runtime:
; CHECK-UNALIGNED-RV64:       # %bb.0: # %entry
; CHECK-UNALIGNED-RV64-NEXT:    addi sp, sp, -16
; CHECK-UNALIGNED-RV64-NEXT:    .cfi_def_cfa_offset 16
; CHECK-UNALIGNED-RV64-NEXT:    sd ra, 8(sp) # 8-byte Folded Spill
; CHECK-UNALIGNED-RV64-NEXT:    .cfi_offset ra, -8
; CHECK-UNALIGNED-RV64-NEXT:    call bcmp
; CHECK-UNALIGNED-RV64-NEXT:    sext.w a0, a0
; CHECK-UNALIGNED-RV64-NEXT:    seqz a0, a0
; CHECK-UNALIGNED-RV64-NEXT:    ld ra, 8(sp) # 8-byte Folded Reload
; CHECK-UNALIGNED-RV64-NEXT:    addi sp, sp, 16
; CHECK-UNALIGNED-RV64-NEXT:    ret
entry:
  %bcmp = call i32 @bcmp(i8* %s1, i8* %s2, iXLen %len)
  %ret = icmp eq i32 %bcmp, 0
  ret i1 %ret
}

define i1 @bcmp_not_compare_zero(i8* %s1, i8* %s2) {
; CHECK-ALIGNED-RV32-LABEL: bcmp_not_compare_zero:
; CHECK-ALIGNED-RV32:       # %bb.0: # %entry
; CHECK-ALIGNED-RV32-NEXT:    lbu a2, 1(a0)
; CHECK-ALIGNED-RV32-NEXT:    lbu a3, 0(a0)
; CHECK-ALIGNED-RV32-NEXT:    lbu a4, 2(a0)
; CHECK-ALIGNED-RV32-NEXT:    lbu a0, 3(a0)
; CHECK-ALIGNED-RV32-NEXT:    slli a2, a2, 8
; CHECK-ALIGNED-RV32-NEXT:    or a2, a2, a3
; CHECK-ALIGNED-RV32-NEXT:    slli a4, a4, 16
; CHECK-ALIGNED-RV32-NEXT:    slli a0, a0, 24
; CHECK-ALIGNED-RV32-NEXT:    or a0, a0, a4
; CHECK-ALIGNED-RV32-NEXT:    or a0, a0, a2
; CHECK-ALIGNED-RV32-NEXT:    lbu a2, 1(a1)
; CHECK-ALIGNED-RV32-NEXT:    lbu a3, 0(a1)
; CHECK-ALIGNED-RV32-NEXT:    lbu a4, 2(a1)
; CHECK-ALIGNED-RV32-NEXT:    lbu a1, 3(a1)
; CHECK-ALIGNED-RV32-NEXT:    slli a2, a2, 8
; CHECK-ALIGNED-RV32-NEXT:    or a2, a2, a3
; CHECK-ALIGNED-RV32-NEXT:    slli a4, a4, 16
; CHECK-ALIGNED-RV32-NEXT:    slli a1, a1, 24
; CHECK-ALIGNED-RV32-NEXT:    or a1, a1, a4
; CHECK-ALIGNED-RV32-NEXT:    or a1, a1, a2
; CHECK-ALIGNED-RV32-NEXT:    xor a0, a0, a1
; CHECK-ALIGNED-RV32-NEXT:    snez a0, a0
; CHECK-ALIGNED-RV32-NEXT:    ret
;
; CHECK-ALIGNED-RV64-LABEL: bcmp_not_compare_zero:
; CHECK-ALIGNED-RV64:       # %bb.0: # %entry
; CHECK-ALIGNED-RV64-NEXT:    lbu a2, 1(a0)
; CHECK-ALIGNED-RV64-NEXT:    lbu a3, 0(a0)
; CHECK-ALIGNED-RV64-NEXT:    lbu a4, 2(a0)
; CHECK-ALIGNED-RV64-NEXT:    lb a0, 3(a0)
; CHECK-ALIGNED-RV64-NEXT:    slli a2, a2, 8
; CHECK-ALIGNED-RV64-NEXT:    or a2, a2, a3
; CHECK-ALIGNED-RV64-NEXT:    slli a4, a4, 16
; CHECK-ALIGNED-RV64-NEXT:    slli a0, a0, 24
; CHECK-ALIGNED-RV64-NEXT:    or a0, a0, a4
; CHECK-ALIGNED-RV64-NEXT:    or a0, a0, a2
; CHECK-ALIGNED-RV64-NEXT:    lbu a2, 1(a1)
; CHECK-ALIGNED-RV64-NEXT:    lbu a3, 0(a1)
; CHECK-ALIGNED-RV64-NEXT:    lbu a4, 2(a1)
; CHECK-ALIGNED-RV64-NEXT:    lb a1, 3(a1)
; CHECK-ALIGNED-RV64-NEXT:    slli a2, a2, 8
; CHECK-ALIGNED-RV64-NEXT:    or a2, a2, a3
; CHECK-ALIGNED-RV64-NEXT:    slli a4, a4, 16
; CHECK-ALIGNED-RV64-NEXT:    slli a1, a1, 24
; CHECK-ALIGNED-RV64-NEXT:    or a1, a1, a4
; CHECK-ALIGNED-RV64-NEXT:    or a1, a1, a2
; CHECK-ALIGNED-RV64-NEXT:    xor a0, a0, a1
; CHECK-ALIGNED-RV64-NEXT:    snez a0, a0
; CHECK-ALIGNED-RV64-NEXT:    ret
;
; CHECK-UNALIGNED-RV32-LABEL: bcmp_not_compare_zero:
; CHECK-UNALIGNED-RV32:       # %bb.0: # %entry
; CHECK-UNALIGNED-RV32-NEXT:    lw a0, 0(a0)
; CHECK-UNALIGNED-RV32-NEXT:    lw a1, 0(a1)
; CHECK-UNALIGNED-RV32-NEXT:    xor a0, a0, a1
; CHECK-UNALIGNED-RV32-NEXT:    snez a0, a0
; CHECK-UNALIGNED-RV32-NEXT:    ret
;
; CHECK-UNALIGNED-RV64-LABEL: bcmp_not_compare_zero:
; CHECK-UNALIGNED-RV64:       # %bb.0: # %entry
; CHECK-UNALIGNED-RV64-NEXT:    lw a0, 0(a0)
; CHECK-UNALIGNED-RV64-NEXT:    lw a1, 0(a1)
; CHECK-UNALIGNED-RV64-NEXT:    xor a0, a0, a1
; CHECK-UNALIGNED-RV64-NEXT:    snez a0, a0
; CHECK-UNALIGNED-RV64-NEXT:    ret
entry:
  %bcmp = call i32 @bcmp(i8* %s1, i8* %s2, iXLen 4)
  %ret = icmp eq i32 %bcmp, 1
  ret i1 %ret
}

define i1 @memcmp_size_0(i8* %s1, i8* %s2) {
; CHECK-ALIGNED-RV32-LABEL: memcmp_size_0:
; CHECK-ALIGNED-RV32:       # %bb.0: # %entry
; CHECK-ALIGNED-RV32-NEXT:    li a0, 1
; CHECK-ALIGNED-RV32-NEXT:    ret
;
; CHECK-ALIGNED-RV64-LABEL: memcmp_size_0:
; CHECK-ALIGNED-RV64:       # %bb.0: # %entry
; CHECK-ALIGNED-RV64-NEXT:    li a0, 1
; CHECK-ALIGNED-RV64-NEXT:    ret
;
; CHECK-UNALIGNED-RV32-LABEL: memcmp_size_0:
; CHECK-UNALIGNED-RV32:       # %bb.0: # %entry
; CHECK-UNALIGNED-RV32-NEXT:    li a0, 1
; CHECK-UNALIGNED-RV32-NEXT:    ret
;
; CHECK-UNALIGNED-RV64-LABEL: memcmp_size_0:
; CHECK-UNALIGNED-RV64:       # %bb.0: # %entry
; CHECK-UNALIGNED-RV64-NEXT:    li a0, 1
; CHECK-UNALIGNED-RV64-NEXT:    ret
entry:
  %memcmp = call i32 @memcmp(i8* %s1, i8* %s2, iXLen 0)
  %ret = icmp eq i32 %memcmp, 0
  ret i1 %ret
}

define i1 @memcmp_size_1(i8* %s1, i8* %s2) {
; CHECK-ALIGNED-RV32-LABEL: memcmp_size_1:
; CHECK-ALIGNED-RV32:       # %bb.0: # %entry
; CHECK-ALIGNED-RV32-NEXT:    lbu a0, 0(a0)
; CHECK-ALIGNED-RV32-NEXT:    lbu a1, 0(a1)
; CHECK-ALIGNED-RV32-NEXT:    xor a0, a0, a1
; CHECK-ALIGNED-RV32-NEXT:    seqz a0, a0
; CHECK-ALIGNED-RV32-NEXT:    ret
;
; CHECK-ALIGNED-RV64-LABEL: memcmp_size_1:
; CHECK-ALIGNED-RV64:       # %bb.0: # %entry
; CHECK-ALIGNED-RV64-NEXT:    lbu a0, 0(a0)
; CHECK-ALIGNED-RV64-NEXT:    lbu a1, 0(a1)
; CHECK-ALIGNED-RV64-NEXT:    xor a0, a0, a1
; CHECK-ALIGNED-RV64-NEXT:    seqz a0, a0
; CHECK-ALIGNED-RV64-NEXT:    ret
;
; CHECK-UNALIGNED-RV32-LABEL: memcmp_size_1:
; CHECK-UNALIGNED-RV32:       # %bb.0: # %entry
; CHECK-UNALIGNED-RV32-NEXT:    lbu a0, 0(a0)
; CHECK-UNALIGNED-RV32-NEXT:    lbu a1, 0(a1)
; CHECK-UNALIGNED-RV32-NEXT:    xor a0, a0, a1
; CHECK-UNALIGNED-RV32-NEXT:    seqz a0, a0
; CHECK-UNALIGNED-RV32-NEXT:    ret
;
; CHECK-UNALIGNED-RV64-LABEL: memcmp_size_1:
; CHECK-UNALIGNED-RV64:       # %bb.0: # %entry
; CHECK-UNALIGNED-RV64-NEXT:    lbu a0, 0(a0)
; CHECK-UNALIGNED-RV64-NEXT:    lbu a1, 0(a1)
; CHECK-UNALIGNED-RV64-NEXT:    xor a0, a0, a1
; CHECK-UNALIGNED-RV64-NEXT:    seqz a0, a0
; CHECK-UNALIGNED-RV64-NEXT:    ret
entry:
  %memcmp = call i32 @memcmp(i8* %s1, i8* %s2, iXLen 1)
  %ret = icmp eq i32 %memcmp, 0
  ret i1 %ret
}

define i1 @memcmp_size_2(i8* %s1, i8* %s2) {
; CHECK-ALIGNED-RV32-LABEL: memcmp_size_2:
; CHECK-ALIGNED-RV32:       # %bb.0: # %entry
; CHECK-ALIGNED-RV32-NEXT:    lbu a2, 1(a0)
; CHECK-ALIGNED-RV32-NEXT:    lbu a0, 0(a0)
; CHECK-ALIGNED-RV32-NEXT:    lbu a3, 1(a1)
; CHECK-ALIGNED-RV32-NEXT:    lbu a1, 0(a1)
; CHECK-ALIGNED-RV32-NEXT:    slli a2, a2, 8
; CHECK-ALIGNED-RV32-NEXT:    or a0, a2, a0
; CHECK-ALIGNED-RV32-NEXT:    slli a3, a3, 8
; CHECK-ALIGNED-RV32-NEXT:    or a1, a3, a1
; CHECK-ALIGNED-RV32-NEXT:    xor a0, a0, a1
; CHECK-ALIGNED-RV32-NEXT:    seqz a0, a0
; CHECK-ALIGNED-RV32-NEXT:    ret
;
; CHECK-ALIGNED-RV64-LABEL: memcmp_size_2:
; CHECK-ALIGNED-RV64:       # %bb.0: # %entry
; CHECK-ALIGNED-RV64-NEXT:    lbu a2, 1(a0)
; CHECK-ALIGNED-RV64-NEXT:    lbu a0, 0(a0)
; CHECK-ALIGNED-RV64-NEXT:    lbu a3, 1(a1)
; CHECK-ALIGNED-RV64-NEXT:    lbu a1, 0(a1)
; CHECK-ALIGNED-RV64-NEXT:    slli a2, a2, 8
; CHECK-ALIGNED-RV64-NEXT:    or a0, a2, a0
; CHECK-ALIGNED-RV64-NEXT:    slli a3, a3, 8
; CHECK-ALIGNED-RV64-NEXT:    or a1, a3, a1
; CHECK-ALIGNED-RV64-NEXT:    xor a0, a0, a1
; CHECK-ALIGNED-RV64-NEXT:    seqz a0, a0
; CHECK-ALIGNED-RV64-NEXT:    ret
;
; CHECK-UNALIGNED-RV32-LABEL: memcmp_size_2:
; CHECK-UNALIGNED-RV32:       # %bb.0: # %entry
; CHECK-UNALIGNED-RV32-NEXT:    lhu a0, 0(a0)
; CHECK-UNALIGNED-RV32-NEXT:    lhu a1, 0(a1)
; CHECK-UNALIGNED-RV32-NEXT:    xor a0, a0, a1
; CHECK-UNALIGNED-RV32-NEXT:    seqz a0, a0
; CHECK-UNALIGNED-RV32-NEXT:    ret
;
; CHECK-UNALIGNED-RV64-LABEL: memcmp_size_2:
; CHECK-UNALIGNED-RV64:       # %bb.0: # %entry
; CHECK-UNALIGNED-RV64-NEXT:    lhu a0, 0(a0)
; CHECK-UNALIGNED-RV64-NEXT:    lhu a1, 0(a1)
; CHECK-UNALIGNED-RV64-NEXT:    xor a0, a0, a1
; CHECK-UNALIGNED-RV64-NEXT:    seqz a0, a0
; CHECK-UNALIGNED-RV64-NEXT:    ret
entry:
  %memcmp = call i32 @memcmp(i8* %s1, i8* %s2, iXLen 2)
  %ret = icmp eq i32 %memcmp, 0
  ret i1 %ret
}

define i1 @memcmp_size_3(i8* %s1, i8* %s2) {
; CHECK-ALIGNED-RV32-LABEL: memcmp_size_3:
; CHECK-ALIGNED-RV32:       # %bb.0: # %entry
; CHECK-ALIGNED-RV32-NEXT:    lbu a2, 1(a0)
; CHECK-ALIGNED-RV32-NEXT:    lbu a3, 0(a0)
; CHECK-ALIGNED-RV32-NEXT:    slli a2, a2, 8
; CHECK-ALIGNED-RV32-NEXT:    or a2, a2, a3
; CHECK-ALIGNED-RV32-NEXT:    lbu a3, 1(a1)
; CHECK-ALIGNED-RV32-NEXT:    lbu a4, 0(a1)
; CHECK-ALIGNED-RV32-NEXT:    lbu a0, 2(a0)
; CHECK-ALIGNED-RV32-NEXT:    lbu a1, 2(a1)
; CHECK-ALIGNED-RV32-NEXT:    slli a3, a3, 8
; CHECK-ALIGNED-RV32-NEXT:    or a3, a3, a4
; CHECK-ALIGNED-RV32-NEXT:    xor a2, a2, a3
; CHECK-ALIGNED-RV32-NEXT:    xor a0, a0, a1
; CHECK-ALIGNED-RV32-NEXT:    or a0, a2, a0
; CHECK-ALIGNED-RV32-NEXT:    seqz a0, a0
; CHECK-ALIGNED-RV32-NEXT:    ret
;
; CHECK-ALIGNED-RV64-LABEL: memcmp_size_3:
; CHECK-ALIGNED-RV64:       # %bb.0: # %entry
; CHECK-ALIGNED-RV64-NEXT:    lbu a2, 1(a0)
; CHECK-ALIGNED-RV64-NEXT:    lbu a3, 0(a0)
; CHECK-ALIGNED-RV64-NEXT:    slli a2, a2, 8
; CHECK-ALIGNED-RV64-NEXT:    or a2, a2, a3
; CHECK-ALIGNED-RV64-NEXT:    lbu a3, 1(a1)
; CHECK-ALIGNED-RV64-NEXT:    lbu a4, 0(a1)
; CHECK-ALIGNED-RV64-NEXT:    lbu a0, 2(a0)
; CHECK-ALIGNED-RV64-NEXT:    lbu a1, 2(a1)
; CHECK-ALIGNED-RV64-NEXT:    slli a3, a3, 8
; CHECK-ALIGNED-RV64-NEXT:    or a3, a3, a4
; CHECK-ALIGNED-RV64-NEXT:    xor a2, a2, a3
; CHECK-ALIGNED-RV64-NEXT:    xor a0, a0, a1
; CHECK-ALIGNED-RV64-NEXT:    or a0, a2, a0
; CHECK-ALIGNED-RV64-NEXT:    seqz a0, a0
; CHECK-ALIGNED-RV64-NEXT:    ret
;
; CHECK-UNALIGNED-RV32-LABEL: memcmp_size_3:
; CHECK-UNALIGNED-RV32:       # %bb.0: # %entry
; CHECK-UNALIGNED-RV32-NEXT:    lhu a2, 0(a0)
; CHECK-UNALIGNED-RV32-NEXT:    lhu a3, 0(a1)
; CHECK-UNALIGNED-RV32-NEXT:    lbu a0, 2(a0)
; CHECK-UNALIGNED-RV32-NEXT:    lbu a1, 2(a1)
; CHECK-UNALIGNED-RV32-NEXT:    xor a2, a2, a3
; CHECK-UNALIGNED-RV32-NEXT:    xor a0, a0, a1
; CHECK-UNALIGNED-RV32-NEXT:    or a0, a2, a0
; CHECK-UNALIGNED-RV32-NEXT:    seqz a0, a0
; CHECK-UNALIGNED-RV32-NEXT:    ret
;
; CHECK-UNALIGNED-RV64-LABEL: memcmp_size_3:
; CHECK-UNALIGNED-RV64:       # %bb.0: # %entry
; CHECK-UNALIGNED-RV64-NEXT:    lhu a2, 0(a0)
; CHECK-UNALIGNED-RV64-NEXT:    lhu a3, 0(a1)
; CHECK-UNALIGNED-RV64-NEXT:    lbu a0, 2(a0)
; CHECK-UNALIGNED-RV64-NEXT:    lbu a1, 2(a1)
; CHECK-UNALIGNED-RV64-NEXT:    xor a2, a2, a3
; CHECK-UNALIGNED-RV64-NEXT:    xor a0, a0, a1
; CHECK-UNALIGNED-RV64-NEXT:    or a0, a2, a0
; CHECK-UNALIGNED-RV64-NEXT:    seqz a0, a0
; CHECK-UNALIGNED-RV64-NEXT:    ret
entry:
  %memcmp = call i32 @memcmp(i8* %s1, i8* %s2, iXLen 3)
  %ret = icmp eq i32 %memcmp, 0
  ret i1 %ret
}

define i1 @memcmp_size_4(i8* %s1, i8* %s2) {
; CHECK-ALIGNED-RV32-LABEL: memcmp_size_4:
; CHECK-ALIGNED-RV32:       # %bb.0: # %entry
; CHECK-ALIGNED-RV32-NEXT:    lbu a2, 1(a0)
; CHECK-ALIGNED-RV32-NEXT:    lbu a3, 0(a0)
; CHECK-ALIGNED-RV32-NEXT:    lbu a4, 2(a0)
; CHECK-ALIGNED-RV32-NEXT:    lbu a0, 3(a0)
; CHECK-ALIGNED-RV32-NEXT:    slli a2, a2, 8
; CHECK-ALIGNED-RV32-NEXT:    or a2, a2, a3
; CHECK-ALIGNED-RV32-NEXT:    slli a4, a4, 16
; CHECK-ALIGNED-RV32-NEXT:    slli a0, a0, 24
; CHECK-ALIGNED-RV32-NEXT:    or a0, a0, a4
; CHECK-ALIGNED-RV32-NEXT:    or a0, a0, a2
; CHECK-ALIGNED-RV32-NEXT:    lbu a2, 1(a1)
; CHECK-ALIGNED-RV32-NEXT:    lbu a3, 0(a1)
; CHECK-ALIGNED-RV32-NEXT:    lbu a4, 2(a1)
; CHECK-ALIGNED-RV32-NEXT:    lbu a1, 3(a1)
; CHECK-ALIGNED-RV32-NEXT:    slli a2, a2, 8
; CHECK-ALIGNED-RV32-NEXT:    or a2, a2, a3
; CHECK-ALIGNED-RV32-NEXT:    slli a4, a4, 16
; CHECK-ALIGNED-RV32-NEXT:    slli a1, a1, 24
; CHECK-ALIGNED-RV32-NEXT:    or a1, a1, a4
; CHECK-ALIGNED-RV32-NEXT:    or a1, a1, a2
; CHECK-ALIGNED-RV32-NEXT:    xor a0, a0, a1
; CHECK-ALIGNED-RV32-NEXT:    seqz a0, a0
; CHECK-ALIGNED-RV32-NEXT:    ret
;
; CHECK-ALIGNED-RV64-LABEL: memcmp_size_4:
; CHECK-ALIGNED-RV64:       # %bb.0: # %entry
; CHECK-ALIGNED-RV64-NEXT:    lbu a2, 1(a0)
; CHECK-ALIGNED-RV64-NEXT:    lbu a3, 0(a0)
; CHECK-ALIGNED-RV64-NEXT:    lbu a4, 2(a0)
; CHECK-ALIGNED-RV64-NEXT:    lb a0, 3(a0)
; CHECK-ALIGNED-RV64-NEXT:    slli a2, a2, 8
; CHECK-ALIGNED-RV64-NEXT:    or a2, a2, a3
; CHECK-ALIGNED-RV64-NEXT:    slli a4, a4, 16
; CHECK-ALIGNED-RV64-NEXT:    slli a0, a0, 24
; CHECK-ALIGNED-RV64-NEXT:    or a0, a0, a4
; CHECK-ALIGNED-RV64-NEXT:    or a0, a0, a2
; CHECK-ALIGNED-RV64-NEXT:    lbu a2, 1(a1)
; CHECK-ALIGNED-RV64-NEXT:    lbu a3, 0(a1)
; CHECK-ALIGNED-RV64-NEXT:    lbu a4, 2(a1)
; CHECK-ALIGNED-RV64-NEXT:    lb a1, 3(a1)
; CHECK-ALIGNED-RV64-NEXT:    slli a2, a2, 8
; CHECK-ALIGNED-RV64-NEXT:    or a2, a2, a3
; CHECK-ALIGNED-RV64-NEXT:    slli a4, a4, 16
; CHECK-ALIGNED-RV64-NEXT:    slli a1, a1, 24
; CHECK-ALIGNED-RV64-NEXT:    or a1, a1, a4
; CHECK-ALIGNED-RV64-NEXT:    or a1, a1, a2
; CHECK-ALIGNED-RV64-NEXT:    xor a0, a0, a1
; CHECK-ALIGNED-RV64-NEXT:    seqz a0, a0
; CHECK-ALIGNED-RV64-NEXT:    ret
;
; CHECK-UNALIGNED-RV32-LABEL: memcmp_size_4:
; CHECK-UNALIGNED-RV32:       # %bb.0: # %entry
; CHECK-UNALIGNED-RV32-NEXT:    lw a0, 0(a0)
; CHECK-UNALIGNED-RV32-NEXT:    lw a1, 0(a1)
; CHECK-UNALIGNED-RV32-NEXT:    xor a0, a0, a1
; CHECK-UNALIGNED-RV32-NEXT:    seqz a0, a0
; CHECK-UNALIGNED-RV32-NEXT:    ret
;
; CHECK-UNALIGNED-RV64-LABEL: memcmp_size_4:
; CHECK-UNALIGNED-RV64:       # %bb.0: # %entry
; CHECK-UNALIGNED-RV64-NEXT:    lw a0, 0(a0)
; CHECK-UNALIGNED-RV64-NEXT:    lw a1, 0(a1)
; CHECK-UNALIGNED-RV64-NEXT:    xor a0, a0, a1
; CHECK-UNALIGNED-RV64-NEXT:    seqz a0, a0
; CHECK-UNALIGNED-RV64-NEXT:    ret
entry:
  %memcmp = call i32 @memcmp(i8* %s1, i8* %s2, iXLen 4)
  %ret = icmp eq i32 %memcmp, 0
  ret i1 %ret
}

define i1 @memcmp_size_5(i8* %s1, i8* %s2) {
; CHECK-ALIGNED-RV32-LABEL: memcmp_size_5:
; CHECK-ALIGNED-RV32:       # %bb.0: # %entry
; CHECK-ALIGNED-RV32-NEXT:    lbu a2, 1(a0)
; CHECK-ALIGNED-RV32-NEXT:    lbu a3, 0(a0)
; CHECK-ALIGNED-RV32-NEXT:    lbu a4, 2(a0)
; CHECK-ALIGNED-RV32-NEXT:    lbu a5, 3(a0)
; CHECK-ALIGNED-RV32-NEXT:    slli a2, a2, 8
; CHECK-ALIGNED-RV32-NEXT:    or a2, a2, a3
; CHECK-ALIGNED-RV32-NEXT:    slli a4, a4, 16
; CHECK-ALIGNED-RV32-NEXT:    slli a5, a5, 24
; CHECK-ALIGNED-RV32-NEXT:    or a4, a5, a4
; CHECK-ALIGNED-RV32-NEXT:    or a2, a4, a2
; CHECK-ALIGNED-RV32-NEXT:    lbu a3, 1(a1)
; CHECK-ALIGNED-RV32-NEXT:    lbu a4, 0(a1)
; CHECK-ALIGNED-RV32-NEXT:    lbu a5, 2(a1)
; CHECK-ALIGNED-RV32-NEXT:    lbu a6, 3(a1)
; CHECK-ALIGNED-RV32-NEXT:    slli a3, a3, 8
; CHECK-ALIGNED-RV32-NEXT:    or a3, a3, a4
; CHECK-ALIGNED-RV32-NEXT:    slli a5, a5, 16
; CHECK-ALIGNED-RV32-NEXT:    slli a6, a6, 24
; CHECK-ALIGNED-RV32-NEXT:    lbu a0, 4(a0)
; CHECK-ALIGNED-RV32-NEXT:    lbu a1, 4(a1)
; CHECK-ALIGNED-RV32-NEXT:    or a4, a6, a5
; CHECK-ALIGNED-RV32-NEXT:    or a3, a4, a3
; CHECK-ALIGNED-RV32-NEXT:    xor a2, a2, a3
; CHECK-ALIGNED-RV32-NEXT:    xor a0, a0, a1
; CHECK-ALIGNED-RV32-NEXT:    or a0, a2, a0
; CHECK-ALIGNED-RV32-NEXT:    seqz a0, a0
; CHECK-ALIGNED-RV32-NEXT:    ret
;
; CHECK-ALIGNED-RV64-LABEL: memcmp_size_5:
; CHECK-ALIGNED-RV64:       # %bb.0: # %entry
; CHECK-ALIGNED-RV64-NEXT:    lbu a2, 1(a0)
; CHECK-ALIGNED-RV64-NEXT:    lbu a3, 0(a0)
; CHECK-ALIGNED-RV64-NEXT:    lbu a4, 2(a0)
; CHECK-ALIGNED-RV64-NEXT:    lb a5, 3(a0)
; CHECK-ALIGNED-RV64-NEXT:    slli a2, a2, 8
; CHECK-ALIGNED-RV64-NEXT:    or a2, a2, a3
; CHECK-ALIGNED-RV64-NEXT:    slli a4, a4, 16
; CHECK-ALIGNED-RV64-NEXT:    slli a5, a5, 24
; CHECK-ALIGNED-RV64-NEXT:    or a4, a5, a4
; CHECK-ALIGNED-RV64-NEXT:    or a2, a4, a2
; CHECK-ALIGNED-RV64-NEXT:    lbu a3, 1(a1)
; CHECK-ALIGNED-RV64-NEXT:    lbu a4, 0(a1)
; CHECK-ALIGNED-RV64-NEXT:    lbu a5, 2(a1)
; CHECK-ALIGNED-RV64-NEXT:    lb a6, 3(a1)
; CHECK-ALIGNED-RV64-NEXT:    slli a3, a3, 8
; CHECK-ALIGNED-RV64-NEXT:    or a3, a3, a4
; CHECK-ALIGNED-RV64-NEXT:    slli a5, a5, 16
; CHECK-ALIGNED-RV64-NEXT:    slli a6, a6, 24
; CHECK-ALIGNED-RV64-NEXT:    lbu a0, 4(a0)
; CHECK-ALIGNED-RV64-NEXT:    lbu a1, 4(a1)
; CHECK-ALIGNED-RV64-NEXT:    or a4, a6, a5
; CHECK-ALIGNED-RV64-NEXT:    or a3, a4, a3
; CHECK-ALIGNED-RV64-NEXT:    xor a2, a2, a3
; CHECK-ALIGNED-RV64-NEXT:    xor a0, a0, a1
; CHECK-ALIGNED-RV64-NEXT:    or a0, a2, a0
; CHECK-ALIGNED-RV64-NEXT:    seqz a0, a0
; CHECK-ALIGNED-RV64-NEXT:    ret
;
; CHECK-UNALIGNED-RV32-LABEL: memcmp_size_5:
; CHECK-UNALIGNED-RV32:       # %bb.0: # %entry
; CHECK-UNALIGNED-RV32-NEXT:    lw a2, 0(a0)
; CHECK-UNALIGNED-RV32-NEXT:    lw a3, 0(a1)
; CHECK-UNALIGNED-RV32-NEXT:    lbu a0, 4(a0)
; CHECK-UNALIGNED-RV32-NEXT:    lbu a1, 4(a1)
; CHECK-UNALIGNED-RV32-NEXT:    xor a2, a2, a3
; CHECK-UNALIGNED-RV32-NEXT:    xor a0, a0, a1
; CHECK-UNALIGNED-RV32-NEXT:    or a0, a2, a0
; CHECK-UNALIGNED-RV32-NEXT:    seqz a0, a0
; CHECK-UNALIGNED-RV32-NEXT:    ret
;
; CHECK-UNALIGNED-RV64-LABEL: memcmp_size_5:
; CHECK-UNALIGNED-RV64:       # %bb.0: # %entry
; CHECK-UNALIGNED-RV64-NEXT:    lw a2, 0(a0)
; CHECK-UNALIGNED-RV64-NEXT:    lw a3, 0(a1)
; CHECK-UNALIGNED-RV64-NEXT:    lbu a0, 4(a0)
; CHECK-UNALIGNED-RV64-NEXT:    lbu a1, 4(a1)
; CHECK-UNALIGNED-RV64-NEXT:    xor a2, a2, a3
; CHECK-UNALIGNED-RV64-NEXT:    xor a0, a0, a1
; CHECK-UNALIGNED-RV64-NEXT:    or a0, a2, a0
; CHECK-UNALIGNED-RV64-NEXT:    seqz a0, a0
; CHECK-UNALIGNED-RV64-NEXT:    ret
entry:
  %memcmp = call i32 @memcmp(i8* %s1, i8* %s2, iXLen 5)
  %ret = icmp eq i32 %memcmp, 0
  ret i1 %ret
}

define i1 @memcmp_size_6(i8* %s1, i8* %s2) {
; CHECK-ALIGNED-RV32-LABEL: memcmp_size_6:
; CHECK-ALIGNED-RV32:       # %bb.0: # %entry
; CHECK-ALIGNED-RV32-NEXT:    lbu a2, 1(a0)
; CHECK-ALIGNED-RV32-NEXT:    lbu a3, 0(a0)
; CHECK-ALIGNED-RV32-NEXT:    lbu a4, 2(a0)
; CHECK-ALIGNED-RV32-NEXT:    lbu a5, 3(a0)
; CHECK-ALIGNED-RV32-NEXT:    slli a2, a2, 8
; CHECK-ALIGNED-RV32-NEXT:    or a2, a2, a3
; CHECK-ALIGNED-RV32-NEXT:    slli a4, a4, 16
; CHECK-ALIGNED-RV32-NEXT:    slli a5, a5, 24
; CHECK-ALIGNED-RV32-NEXT:    or a4, a5, a4
; CHECK-ALIGNED-RV32-NEXT:    or a2, a4, a2
; CHECK-ALIGNED-RV32-NEXT:    lbu a3, 1(a1)
; CHECK-ALIGNED-RV32-NEXT:    lbu a4, 0(a1)
; CHECK-ALIGNED-RV32-NEXT:    lbu a5, 2(a1)
; CHECK-ALIGNED-RV32-NEXT:    lbu a6, 3(a1)
; CHECK-ALIGNED-RV32-NEXT:    slli a3, a3, 8
; CHECK-ALIGNED-RV32-NEXT:    or a3, a3, a4
; CHECK-ALIGNED-RV32-NEXT:    slli a5, a5, 16
; CHECK-ALIGNED-RV32-NEXT:    slli a6, a6, 24
; CHECK-ALIGNED-RV32-NEXT:    or a4, a6, a5
; CHECK-ALIGNED-RV32-NEXT:    or a3, a4, a3
; CHECK-ALIGNED-RV32-NEXT:    xor a2, a2, a3
; CHECK-ALIGNED-RV32-NEXT:    lbu a3, 5(a0)
; CHECK-ALIGNED-RV32-NEXT:    lbu a0, 4(a0)
; CHECK-ALIGNED-RV32-NEXT:    lbu a4, 5(a1)
; CHECK-ALIGNED-RV32-NEXT:    lbu a1, 4(a1)
; CHECK-ALIGNED-RV32-NEXT:    slli a3, a3, 8
; CHECK-ALIGNED-RV32-NEXT:    or a0, a3, a0
; CHECK-ALIGNED-RV32-NEXT:    slli a4, a4, 8
; CHECK-ALIGNED-RV32-NEXT:    or a1, a4, a1
; CHECK-ALIGNED-RV32-NEXT:    xor a0, a0, a1
; CHECK-ALIGNED-RV32-NEXT:    or a0, a2, a0
; CHECK-ALIGNED-RV32-NEXT:    seqz a0, a0
; CHECK-ALIGNED-RV32-NEXT:    ret
;
; CHECK-ALIGNED-RV64-LABEL: memcmp_size_6:
; CHECK-ALIGNED-RV64:       # %bb.0: # %entry
; CHECK-ALIGNED-RV64-NEXT:    lbu a2, 1(a0)
; CHECK-ALIGNED-RV64-NEXT:    lbu a3, 0(a0)
; CHECK-ALIGNED-RV64-NEXT:    lbu a4, 2(a0)
; CHECK-ALIGNED-RV64-NEXT:    lb a5, 3(a0)
; CHECK-ALIGNED-RV64-NEXT:    slli a2, a2, 8
; CHECK-ALIGNED-RV64-NEXT:    or a2, a2, a3
; CHECK-ALIGNED-RV64-NEXT:    slli a4, a4, 16
; CHECK-ALIGNED-RV64-NEXT:    slli a5, a5, 24
; CHECK-ALIGNED-RV64-NEXT:    or a4, a5, a4
; CHECK-ALIGNED-RV64-NEXT:    or a2, a4, a2
; CHECK-ALIGNED-RV64-NEXT:    lbu a3, 1(a1)
; CHECK-ALIGNED-RV64-NEXT:    lbu a4, 0(a1)
; CHECK-ALIGNED-RV64-NEXT:    lbu a5, 2(a1)
; CHECK-ALIGNED-RV64-NEXT:    lb a6, 3(a1)
; CHECK-ALIGNED-RV64-NEXT:    slli a3, a3, 8
; CHECK-ALIGNED-RV64-NEXT:    or a3, a3, a4
; CHECK-ALIGNED-RV64-NEXT:    slli a5, a5, 16
; CHECK-ALIGNED-RV64-NEXT:    slli a6, a6, 24
; CHECK-ALIGNED-RV64-NEXT:    or a4, a6, a5
; CHECK-ALIGNED-RV64-NEXT:    or a3, a4, a3
; CHECK-ALIGNED-RV64-NEXT:    xor a2, a2, a3
; CHECK-ALIGNED-RV64-NEXT:    lbu a3, 5(a0)
; CHECK-ALIGNED-RV64-NEXT:    lbu a0, 4(a0)
; CHECK-ALIGNED-RV64-NEXT:    lbu a4, 5(a1)
; CHECK-ALIGNED-RV64-NEXT:    lbu a1, 4(a1)
; CHECK-ALIGNED-RV64-NEXT:    slli a3, a3, 8
; CHECK-ALIGNED-RV64-NEXT:    or a0, a3, a0
; CHECK-ALIGNED-RV64-NEXT:    slli a4, a4, 8
; CHECK-ALIGNED-RV64-NEXT:    or a1, a4, a1
; CHECK-ALIGNED-RV64-NEXT:    xor a0, a0, a1
; CHECK-ALIGNED-RV64-NEXT:    or a0, a2, a0
; CHECK-ALIGNED-RV64-NEXT:    seqz a0, a0
; CHECK-ALIGNED-RV64-NEXT:    ret
;
; CHECK-UNALIGNED-RV32-LABEL: memcmp_size_6:
; CHECK-UNALIGNED-RV32:       # %bb.0: # %entry
; CHECK-UNALIGNED-RV32-NEXT:    lw a2, 0(a0)
; CHECK-UNALIGNED-RV32-NEXT:    lw a3, 0(a1)
; CHECK-UNALIGNED-RV32-NEXT:    lhu a0, 4(a0)
; CHECK-UNALIGNED-RV32-NEXT:    lhu a1, 4(a1)
; CHECK-UNALIGNED-RV32-NEXT:    xor a2, a2, a3
; CHECK-UNALIGNED-RV32-NEXT:    xor a0, a0, a1
; CHECK-UNALIGNED-RV32-NEXT:    or a0, a2, a0
; CHECK-UNALIGNED-RV32-NEXT:    seqz a0, a0
; CHECK-UNALIGNED-RV32-NEXT:    ret
;
; CHECK-UNALIGNED-RV64-LABEL: memcmp_size_6:
; CHECK-UNALIGNED-RV64:       # %bb.0: # %entry
; CHECK-UNALIGNED-RV64-NEXT:    lw a2, 0(a0)
; CHECK-UNALIGNED-RV64-NEXT:    lw a3, 0(a1)
; CHECK-UNALIGNED-RV64-NEXT:    lhu a0, 4(a0)
; CHECK-UNALIGNED-RV64-NEXT:    lhu a1, 4(a1)
; CHECK-UNALIGNED-RV64-NEXT:    xor a2, a2, a3
; CHECK-UNALIGNED-RV64-NEXT:    xor a0, a0, a1
; CHECK-UNALIGNED-RV64-NEXT:    or a0, a2, a0
; CHECK-UNALIGNED-RV64-NEXT:    seqz a0, a0
; CHECK-UNALIGNED-RV64-NEXT:    ret
entry:
  %memcmp = call i32 @memcmp(i8* %s1, i8* %s2, iXLen 6)
  %ret = icmp eq i32 %memcmp, 0
  ret i1 %ret
}

define i1 @memcmp_size_7(i8* %s1, i8* %s2) {
; CHECK-ALIGNED-RV32-LABEL: memcmp_size_7:
; CHECK-ALIGNED-RV32:       # %bb.0: # %entry
; CHECK-ALIGNED-RV32-NEXT:    lbu a2, 1(a0)
; CHECK-ALIGNED-RV32-NEXT:    lbu a3, 0(a0)
; CHECK-ALIGNED-RV32-NEXT:    lbu a4, 2(a0)
; CHECK-ALIGNED-RV32-NEXT:    lbu a5, 3(a0)
; CHECK-ALIGNED-RV32-NEXT:    slli a2, a2, 8
; CHECK-ALIGNED-RV32-NEXT:    or a2, a2, a3
; CHECK-ALIGNED-RV32-NEXT:    slli a4, a4, 16
; CHECK-ALIGNED-RV32-NEXT:    slli a5, a5, 24
; CHECK-ALIGNED-RV32-NEXT:    or a4, a5, a4
; CHECK-ALIGNED-RV32-NEXT:    or a2, a4, a2
; CHECK-ALIGNED-RV32-NEXT:    lbu a3, 1(a1)
; CHECK-ALIGNED-RV32-NEXT:    lbu a4, 0(a1)
; CHECK-ALIGNED-RV32-NEXT:    lbu a5, 2(a1)
; CHECK-ALIGNED-RV32-NEXT:    lbu a6, 3(a1)
; CHECK-ALIGNED-RV32-NEXT:    slli a3, a3, 8
; CHECK-ALIGNED-RV32-NEXT:    or a3, a3, a4
; CHECK-ALIGNED-RV32-NEXT:    slli a5, a5, 16
; CHECK-ALIGNED-RV32-NEXT:    slli a6, a6, 24
; CHECK-ALIGNED-RV32-NEXT:    or a4, a6, a5
; CHECK-ALIGNED-RV32-NEXT:    lbu a5, 5(a0)
; CHECK-ALIGNED-RV32-NEXT:    lbu a6, 4(a0)
; CHECK-ALIGNED-RV32-NEXT:    or a3, a4, a3
; CHECK-ALIGNED-RV32-NEXT:    xor a2, a2, a3
; CHECK-ALIGNED-RV32-NEXT:    slli a5, a5, 8
; CHECK-ALIGNED-RV32-NEXT:    or a3, a5, a6
; CHECK-ALIGNED-RV32-NEXT:    lbu a4, 5(a1)
; CHECK-ALIGNED-RV32-NEXT:    lbu a5, 4(a1)
; CHECK-ALIGNED-RV32-NEXT:    lbu a0, 6(a0)
; CHECK-ALIGNED-RV32-NEXT:    lbu a1, 6(a1)
; CHECK-ALIGNED-RV32-NEXT:    slli a4, a4, 8
; CHECK-ALIGNED-RV32-NEXT:    or a4, a4, a5
; CHECK-ALIGNED-RV32-NEXT:    xor a3, a3, a4
; CHECK-ALIGNED-RV32-NEXT:    xor a0, a0, a1
; CHECK-ALIGNED-RV32-NEXT:    or a0, a3, a0
; CHECK-ALIGNED-RV32-NEXT:    or a0, a2, a0
; CHECK-ALIGNED-RV32-NEXT:    seqz a0, a0
; CHECK-ALIGNED-RV32-NEXT:    ret
;
; CHECK-ALIGNED-RV64-LABEL: memcmp_size_7:
; CHECK-ALIGNED-RV64:       # %bb.0: # %entry
; CHECK-ALIGNED-RV64-NEXT:    lbu a2, 1(a0)
; CHECK-ALIGNED-RV64-NEXT:    lbu a3, 0(a0)
; CHECK-ALIGNED-RV64-NEXT:    lbu a4, 2(a0)
; CHECK-ALIGNED-RV64-NEXT:    lb a5, 3(a0)
; CHECK-ALIGNED-RV64-NEXT:    slli a2, a2, 8
; CHECK-ALIGNED-RV64-NEXT:    or a2, a2, a3
; CHECK-ALIGNED-RV64-NEXT:    slli a4, a4, 16
; CHECK-ALIGNED-RV64-NEXT:    slli a5, a5, 24
; CHECK-ALIGNED-RV64-NEXT:    or a4, a5, a4
; CHECK-ALIGNED-RV64-NEXT:    or a2, a4, a2
; CHECK-ALIGNED-RV64-NEXT:    lbu a3, 1(a1)
; CHECK-ALIGNED-RV64-NEXT:    lbu a4, 0(a1)
; CHECK-ALIGNED-RV64-NEXT:    lbu a5, 2(a1)
; CHECK-ALIGNED-RV64-NEXT:    lb a6, 3(a1)
; CHECK-ALIGNED-RV64-NEXT:    slli a3, a3, 8
; CHECK-ALIGNED-RV64-NEXT:    or a3, a3, a4
; CHECK-ALIGNED-RV64-NEXT:    slli a5, a5, 16
; CHECK-ALIGNED-RV64-NEXT:    slli a6, a6, 24
; CHECK-ALIGNED-RV64-NEXT:    or a4, a6, a5
; CHECK-ALIGNED-RV64-NEXT:    lbu a5, 5(a0)
; CHECK-ALIGNED-RV64-NEXT:    lbu a6, 4(a0)
; CHECK-ALIGNED-RV64-NEXT:    or a3, a4, a3
; CHECK-ALIGNED-RV64-NEXT:    xor a2, a2, a3
; CHECK-ALIGNED-RV64-NEXT:    slli a5, a5, 8
; CHECK-ALIGNED-RV64-NEXT:    or a3, a5, a6
; CHECK-ALIGNED-RV64-NEXT:    lbu a4, 5(a1)
; CHECK-ALIGNED-RV64-NEXT:    lbu a5, 4(a1)
; CHECK-ALIGNED-RV64-NEXT:    lbu a0, 6(a0)
; CHECK-ALIGNED-RV64-NEXT:    lbu a1, 6(a1)
; CHECK-ALIGNED-RV64-NEXT:    slli a4, a4, 8
; CHECK-ALIGNED-RV64-NEXT:    or a4, a4, a5
; CHECK-ALIGNED-RV64-NEXT:    xor a3, a3, a4
; CHECK-ALIGNED-RV64-NEXT:    xor a0, a0, a1
; CHECK-ALIGNED-RV64-NEXT:    or a0, a3, a0
; CHECK-ALIGNED-RV64-NEXT:    or a0, a2, a0
; CHECK-ALIGNED-RV64-NEXT:    seqz a0, a0
; CHECK-ALIGNED-RV64-NEXT:    ret
;
; CHECK-UNALIGNED-RV32-LABEL: memcmp_size_7:
; CHECK-UNALIGNED-RV32:       # %bb.0: # %entry
; CHECK-UNALIGNED-RV32-NEXT:    lw a2, 0(a0)
; CHECK-UNALIGNED-RV32-NEXT:    lw a3, 0(a1)
; CHECK-UNALIGNED-RV32-NEXT:    lw a0, 3(a0)
; CHECK-UNALIGNED-RV32-NEXT:    lw a1, 3(a1)
; CHECK-UNALIGNED-RV32-NEXT:    xor a2, a2, a3
; CHECK-UNALIGNED-RV32-NEXT:    xor a0, a0, a1
; CHECK-UNALIGNED-RV32-NEXT:    or a0, a2, a0
; CHECK-UNALIGNED-RV32-NEXT:    seqz a0, a0
; CHECK-UNALIGNED-RV32-NEXT:    ret
;
; CHECK-UNALIGNED-RV64-LABEL: memcmp_size_7:
; CHECK-UNALIGNED-RV64:       # %bb.0: # %entry
; CHECK-UNALIGNED-RV64-NEXT:    lw a2, 0(a0)
; CHECK-UNALIGNED-RV64-NEXT:    lw a3, 0(a1)
; CHECK-UNALIGNED-RV64-NEXT:    lw a0, 3(a0)
; CHECK-UNALIGNED-RV64-NEXT:    lw a1, 3(a1)
; CHECK-UNALIGNED-RV64-NEXT:    xor a2, a2, a3
; CHECK-UNALIGNED-RV64-NEXT:    xor a0, a0, a1
; CHECK-UNALIGNED-RV64-NEXT:    or a0, a2, a0
; CHECK-UNALIGNED-RV64-NEXT:    seqz a0, a0
; CHECK-UNALIGNED-RV64-NEXT:    ret
entry:
  %memcmp = call i32 @memcmp(i8* %s1, i8* %s2, iXLen 7)
  %ret = icmp eq i32 %memcmp, 0
  ret i1 %ret
}

define i1 @memcmp_size_8(i8* %s1, i8* %s2) {
; CHECK-ALIGNED-RV32-LABEL: memcmp_size_8:
; CHECK-ALIGNED-RV32:       # %bb.0: # %entry
; CHECK-ALIGNED-RV32-NEXT:    lbu a2, 1(a0)
; CHECK-ALIGNED-RV32-NEXT:    lbu a3, 0(a0)
; CHECK-ALIGNED-RV32-NEXT:    lbu a4, 2(a0)
; CHECK-ALIGNED-RV32-NEXT:    lbu a5, 3(a0)
; CHECK-ALIGNED-RV32-NEXT:    slli a2, a2, 8
; CHECK-ALIGNED-RV32-NEXT:    or a2, a2, a3
; CHECK-ALIGNED-RV32-NEXT:    slli a4, a4, 16
; CHECK-ALIGNED-RV32-NEXT:    slli a5, a5, 24
; CHECK-ALIGNED-RV32-NEXT:    or a4, a5, a4
; CHECK-ALIGNED-RV32-NEXT:    or a2, a4, a2
; CHECK-ALIGNED-RV32-NEXT:    lbu a3, 1(a1)
; CHECK-ALIGNED-RV32-NEXT:    lbu a4, 0(a1)
; CHECK-ALIGNED-RV32-NEXT:    lbu a5, 2(a1)
; CHECK-ALIGNED-RV32-NEXT:    lbu a6, 3(a1)
; CHECK-ALIGNED-RV32-NEXT:    slli a3, a3, 8
; CHECK-ALIGNED-RV32-NEXT:    or a3, a3, a4
; CHECK-ALIGNED-RV32-NEXT:    slli a5, a5, 16
; CHECK-ALIGNED-RV32-NEXT:    slli a6, a6, 24
; CHECK-ALIGNED-RV32-NEXT:    or a4, a6, a5
; CHECK-ALIGNED-RV32-NEXT:    or a3, a4, a3
; CHECK-ALIGNED-RV32-NEXT:    xor a2, a2, a3
; CHECK-ALIGNED-RV32-NEXT:    lbu a3, 5(a0)
; CHECK-ALIGNED-RV32-NEXT:    lbu a4, 4(a0)
; CHECK-ALIGNED-RV32-NEXT:    lbu a5, 6(a0)
; CHECK-ALIGNED-RV32-NEXT:    lbu a0, 7(a0)
; CHECK-ALIGNED-RV32-NEXT:    slli a3, a3, 8
; CHECK-ALIGNED-RV32-NEXT:    or a3, a3, a4
; CHECK-ALIGNED-RV32-NEXT:    slli a5, a5, 16
; CHECK-ALIGNED-RV32-NEXT:    slli a0, a0, 24
; CHECK-ALIGNED-RV32-NEXT:    or a0, a0, a5
; CHECK-ALIGNED-RV32-NEXT:    or a0, a0, a3
; CHECK-ALIGNED-RV32-NEXT:    lbu a3, 5(a1)
; CHECK-ALIGNED-RV32-NEXT:    lbu a4, 4(a1)
; CHECK-ALIGNED-RV32-NEXT:    lbu a5, 6(a1)
; CHECK-ALIGNED-RV32-NEXT:    lbu a1, 7(a1)
; CHECK-ALIGNED-RV32-NEXT:    slli a3, a3, 8
; CHECK-ALIGNED-RV32-NEXT:    or a3, a3, a4
; CHECK-ALIGNED-RV32-NEXT:    slli a5, a5, 16
; CHECK-ALIGNED-RV32-NEXT:    slli a1, a1, 24
; CHECK-ALIGNED-RV32-NEXT:    or a1, a1, a5
; CHECK-ALIGNED-RV32-NEXT:    or a1, a1, a3
; CHECK-ALIGNED-RV32-NEXT:    xor a0, a0, a1
; CHECK-ALIGNED-RV32-NEXT:    or a0, a2, a0
; CHECK-ALIGNED-RV32-NEXT:    seqz a0, a0
; CHECK-ALIGNED-RV32-NEXT:    ret
;
; CHECK-ALIGNED-RV64-LABEL: memcmp_size_8:
; CHECK-ALIGNED-RV64:       # %bb.0: # %entry
; CHECK-ALIGNED-RV64-NEXT:    lbu a2, 1(a0)
; CHECK-ALIGNED-RV64-NEXT:    lbu a3, 0(a0)
; CHECK-ALIGNED-RV64-NEXT:    lbu a4, 2(a0)
; CHECK-ALIGNED-RV64-NEXT:    lbu a5, 3(a0)
; CHECK-ALIGNED-RV64-NEXT:    slli a2, a2, 8
; CHECK-ALIGNED-RV64-NEXT:    or a2, a2, a3
; CHECK-ALIGNED-RV64-NEXT:    slli a4, a4, 16
; CHECK-ALIGNED-RV64-NEXT:    slli a5, a5, 24
; CHECK-ALIGNED-RV64-NEXT:    or a4, a5, a4
; CHECK-ALIGNED-RV64-NEXT:    or a2, a4, a2
; CHECK-ALIGNED-RV64-NEXT:    lbu a3, 5(a0)
; CHECK-ALIGNED-RV64-NEXT:    lbu a4, 4(a0)
; CHECK-ALIGNED-RV64-NEXT:    lbu a5, 6(a0)
; CHECK-ALIGNED-RV64-NEXT:    lbu a0, 7(a0)
; CHECK-ALIGNED-RV64-NEXT:    slli a3, a3, 8
; CHECK-ALIGNED-RV64-NEXT:    or a3, a3, a4
; CHECK-ALIGNED-RV64-NEXT:    slli a5, a5, 16
; CHECK-ALIGNED-RV64-NEXT:    slli a0, a0, 24
; CHECK-ALIGNED-RV64-NEXT:    or a0, a0, a5
; CHECK-ALIGNED-RV64-NEXT:    or a0, a0, a3
; CHECK-ALIGNED-RV64-NEXT:    slli a0, a0, 32
; CHECK-ALIGNED-RV64-NEXT:    or a0, a0, a2
; CHECK-ALIGNED-RV64-NEXT:    lbu a2, 1(a1)
; CHECK-ALIGNED-RV64-NEXT:    lbu a3, 0(a1)
; CHECK-ALIGNED-RV64-NEXT:    lbu a4, 2(a1)
; CHECK-ALIGNED-RV64-NEXT:    lbu a5, 3(a1)
; CHECK-ALIGNED-RV64-NEXT:    slli a2, a2, 8
; CHECK-ALIGNED-RV64-NEXT:    or a2, a2, a3
; CHECK-ALIGNED-RV64-NEXT:    slli a4, a4, 16
; CHECK-ALIGNED-RV64-NEXT:    slli a5, a5, 24
; CHECK-ALIGNED-RV64-NEXT:    or a4, a5, a4
; CHECK-ALIGNED-RV64-NEXT:    or a2, a4, a2
; CHECK-ALIGNED-RV64-NEXT:    lbu a3, 5(a1)
; CHECK-ALIGNED-RV64-NEXT:    lbu a4, 4(a1)
; CHECK-ALIGNED-RV64-NEXT:    lbu a5, 6(a1)
; CHECK-ALIGNED-RV64-NEXT:    lbu a1, 7(a1)
; CHECK-ALIGNED-RV64-NEXT:    slli a3, a3, 8
; CHECK-ALIGNED-RV64-NEXT:    or a3, a3, a4
; CHECK-ALIGNED-RV64-NEXT:    slli a5, a5, 16
; CHECK-ALIGNED-RV64-NEXT:    slli a1, a1, 24
; CHECK-ALIGNED-RV64-NEXT:    or a1, a1, a5
; CHECK-ALIGNED-RV64-NEXT:    or a1, a1, a3
; CHECK-ALIGNED-RV64-NEXT:    slli a1, a1, 32
; CHECK-ALIGNED-RV64-NEXT:    or a1, a1, a2
; CHECK-ALIGNED-RV64-NEXT:    xor a0, a0, a1
; CHECK-ALIGNED-RV64-NEXT:    seqz a0, a0
; CHECK-ALIGNED-RV64-NEXT:    ret
;
; CHECK-UNALIGNED-RV32-LABEL: memcmp_size_8:
; CHECK-UNALIGNED-RV32:       # %bb.0: # %entry
; CHECK-UNALIGNED-RV32-NEXT:    lw a2, 0(a0)
; CHECK-UNALIGNED-RV32-NEXT:    lw a3, 0(a1)
; CHECK-UNALIGNED-RV32-NEXT:    lw a0, 4(a0)
; CHECK-UNALIGNED-RV32-NEXT:    lw a1, 4(a1)
; CHECK-UNALIGNED-RV32-NEXT:    xor a2, a2, a3
; CHECK-UNALIGNED-RV32-NEXT:    xor a0, a0, a1
; CHECK-UNALIGNED-RV32-NEXT:    or a0, a2, a0
; CHECK-UNALIGNED-RV32-NEXT:    seqz a0, a0
; CHECK-UNALIGNED-RV32-NEXT:    ret
;
; CHECK-UNALIGNED-RV64-LABEL: memcmp_size_8:
; CHECK-UNALIGNED-RV64:       # %bb.0: # %entry
; CHECK-UNALIGNED-RV64-NEXT:    ld a0, 0(a0)
; CHECK-UNALIGNED-RV64-NEXT:    ld a1, 0(a1)
; CHECK-UNALIGNED-RV64-NEXT:    xor a0, a0, a1
; CHECK-UNALIGNED-RV64-NEXT:    seqz a0, a0
; CHECK-UNALIGNED-RV64-NEXT:    ret
entry:
  %memcmp = call i32 @memcmp(i8* %s1, i8* %s2, iXLen 8)
  %ret = icmp eq i32 %memcmp, 0
  ret i1 %ret
}

define i1 @memcmp_size_16(i8* %s1, i8* %s2) {
; CHECK-ALIGNED-RV32-LABEL: memcmp_size_16:
; CHECK-ALIGNED-RV32:       # %bb.0: # %entry
; CHECK-ALIGNED-RV32-NEXT:    lbu a2, 1(a0)
; CHECK-ALIGNED-RV32-NEXT:    lbu a3, 0(a0)
; CHECK-ALIGNED-RV32-NEXT:    lbu a4, 2(a0)
; CHECK-ALIGNED-RV32-NEXT:    lbu a5, 3(a0)
; CHECK-ALIGNED-RV32-NEXT:    slli a2, a2, 8
; CHECK-ALIGNED-RV32-NEXT:    or a2, a2, a3
; CHECK-ALIGNED-RV32-NEXT:    slli a4, a4, 16
; CHECK-ALIGNED-RV32-NEXT:    slli a5, a5, 24
; CHECK-ALIGNED-RV32-NEXT:    or a4, a5, a4
; CHECK-ALIGNED-RV32-NEXT:    or a2, a4, a2
; CHECK-ALIGNED-RV32-NEXT:    lbu a3, 1(a1)
; CHECK-ALIGNED-RV32-NEXT:    lbu a4, 0(a1)
; CHECK-ALIGNED-RV32-NEXT:    lbu a5, 2(a1)
; CHECK-ALIGNED-RV32-NEXT:    lbu a6, 3(a1)
; CHECK-ALIGNED-RV32-NEXT:    slli a3, a3, 8
; CHECK-ALIGNED-RV32-NEXT:    or a3, a3, a4
; CHECK-ALIGNED-RV32-NEXT:    slli a5, a5, 16
; CHECK-ALIGNED-RV32-NEXT:    slli a6, a6, 24
; CHECK-ALIGNED-RV32-NEXT:    or a4, a6, a5
; CHECK-ALIGNED-RV32-NEXT:    or a3, a4, a3
; CHECK-ALIGNED-RV32-NEXT:    xor a2, a2, a3
; CHECK-ALIGNED-RV32-NEXT:    lbu a3, 5(a0)
; CHECK-ALIGNED-RV32-NEXT:    lbu a4, 4(a0)
; CHECK-ALIGNED-RV32-NEXT:    lbu a5, 6(a0)
; CHECK-ALIGNED-RV32-NEXT:    lbu a6, 7(a0)
; CHECK-ALIGNED-RV32-NEXT:    slli a3, a3, 8
; CHECK-ALIGNED-RV32-NEXT:    or a3, a3, a4
; CHECK-ALIGNED-RV32-NEXT:    slli a5, a5, 16
; CHECK-ALIGNED-RV32-NEXT:    slli a6, a6, 24
; CHECK-ALIGNED-RV32-NEXT:    or a4, a6, a5
; CHECK-ALIGNED-RV32-NEXT:    or a3, a4, a3
; CHECK-ALIGNED-RV32-NEXT:    lbu a4, 5(a1)
; CHECK-ALIGNED-RV32-NEXT:    lbu a5, 4(a1)
; CHECK-ALIGNED-RV32-NEXT:    lbu a6, 6(a1)
; CHECK-ALIGNED-RV32-NEXT:    lbu a7, 7(a1)
; CHECK-ALIGNED-RV32-NEXT:    slli a4, a4, 8
; CHECK-ALIGNED-RV32-NEXT:    or a4, a4, a5
; CHECK-ALIGNED-RV32-NEXT:    slli a6, a6, 16
; CHECK-ALIGNED-RV32-NEXT:    slli a7, a7, 24
; CHECK-ALIGNED-RV32-NEXT:    or a5, a7, a6
; CHECK-ALIGNED-RV32-NEXT:    or a4, a5, a4
; CHECK-ALIGNED-RV32-NEXT:    xor a3, a3, a4
; CHECK-ALIGNED-RV32-NEXT:    lbu a4, 9(a0)
; CHECK-ALIGNED-RV32-NEXT:    lbu a5, 8(a0)
; CHECK-ALIGNED-RV32-NEXT:    lbu a6, 10(a0)
; CHECK-ALIGNED-RV32-NEXT:    lbu a7, 11(a0)
; CHECK-ALIGNED-RV32-NEXT:    slli a4, a4, 8
; CHECK-ALIGNED-RV32-NEXT:    or a4, a4, a5
; CHECK-ALIGNED-RV32-NEXT:    slli a6, a6, 16
; CHECK-ALIGNED-RV32-NEXT:    slli a7, a7, 24
; CHECK-ALIGNED-RV32-NEXT:    or a5, a7, a6
; CHECK-ALIGNED-RV32-NEXT:    or a4, a5, a4
; CHECK-ALIGNED-RV32-NEXT:    lbu a5, 9(a1)
; CHECK-ALIGNED-RV32-NEXT:    lbu a6, 8(a1)
; CHECK-ALIGNED-RV32-NEXT:    lbu a7, 10(a1)
; CHECK-ALIGNED-RV32-NEXT:    lbu t0, 11(a1)
; CHECK-ALIGNED-RV32-NEXT:    slli a5, a5, 8
; CHECK-ALIGNED-RV32-NEXT:    or a5, a5, a6
; CHECK-ALIGNED-RV32-NEXT:    slli a7, a7, 16
; CHECK-ALIGNED-RV32-NEXT:    slli t0, t0, 24
; CHECK-ALIGNED-RV32-NEXT:    or a6, t0, a7
; CHECK-ALIGNED-RV32-NEXT:    or a5, a6, a5
; CHECK-ALIGNED-RV32-NEXT:    xor a4, a4, a5
; CHECK-ALIGNED-RV32-NEXT:    lbu a5, 13(a0)
; CHECK-ALIGNED-RV32-NEXT:    lbu a6, 12(a0)
; CHECK-ALIGNED-RV32-NEXT:    lbu a7, 14(a0)
; CHECK-ALIGNED-RV32-NEXT:    lbu a0, 15(a0)
; CHECK-ALIGNED-RV32-NEXT:    slli a5, a5, 8
; CHECK-ALIGNED-RV32-NEXT:    or a5, a5, a6
; CHECK-ALIGNED-RV32-NEXT:    slli a7, a7, 16
; CHECK-ALIGNED-RV32-NEXT:    slli a0, a0, 24
; CHECK-ALIGNED-RV32-NEXT:    or a0, a0, a7
; CHECK-ALIGNED-RV32-NEXT:    or a0, a0, a5
; CHECK-ALIGNED-RV32-NEXT:    lbu a5, 13(a1)
; CHECK-ALIGNED-RV32-NEXT:    lbu a6, 12(a1)
; CHECK-ALIGNED-RV32-NEXT:    lbu a7, 14(a1)
; CHECK-ALIGNED-RV32-NEXT:    lbu a1, 15(a1)
; CHECK-ALIGNED-RV32-NEXT:    slli a5, a5, 8
; CHECK-ALIGNED-RV32-NEXT:    or a5, a5, a6
; CHECK-ALIGNED-RV32-NEXT:    slli a7, a7, 16
; CHECK-ALIGNED-RV32-NEXT:    slli a1, a1, 24
; CHECK-ALIGNED-RV32-NEXT:    or a1, a1, a7
; CHECK-ALIGNED-RV32-NEXT:    or a1, a1, a5
; CHECK-ALIGNED-RV32-NEXT:    xor a0, a0, a1
; CHECK-ALIGNED-RV32-NEXT:    or a2, a2, a3
; CHECK-ALIGNED-RV32-NEXT:    or a0, a4, a0
; CHECK-ALIGNED-RV32-NEXT:    or a0, a2, a0
; CHECK-ALIGNED-RV32-NEXT:    seqz a0, a0
; CHECK-ALIGNED-RV32-NEXT:    ret
;
; CHECK-ALIGNED-RV64-LABEL: memcmp_size_16:
; CHECK-ALIGNED-RV64:       # %bb.0: # %entry
; CHECK-ALIGNED-RV64-NEXT:    lbu a2, 1(a0)
; CHECK-ALIGNED-RV64-NEXT:    lbu a3, 0(a0)
; CHECK-ALIGNED-RV64-NEXT:    lbu a4, 2(a0)
; CHECK-ALIGNED-RV64-NEXT:    lbu a5, 3(a0)
; CHECK-ALIGNED-RV64-NEXT:    slli a2, a2, 8
; CHECK-ALIGNED-RV64-NEXT:    or a2, a2, a3
; CHECK-ALIGNED-RV64-NEXT:    slli a4, a4, 16
; CHECK-ALIGNED-RV64-NEXT:    slli a5, a5, 24
; CHECK-ALIGNED-RV64-NEXT:    or a4, a5, a4
; CHECK-ALIGNED-RV64-NEXT:    or a2, a4, a2
; CHECK-ALIGNED-RV64-NEXT:    lbu a3, 5(a0)
; CHECK-ALIGNED-RV64-NEXT:    lbu a4, 4(a0)
; CHECK-ALIGNED-RV64-NEXT:    lbu a5, 6(a0)
; CHECK-ALIGNED-RV64-NEXT:    lbu a6, 7(a0)
; CHECK-ALIGNED-RV64-NEXT:    slli a3, a3, 8
; CHECK-ALIGNED-RV64-NEXT:    or a3, a3, a4
; CHECK-ALIGNED-RV64-NEXT:    slli a5, a5, 16
; CHECK-ALIGNED-RV64-NEXT:    slli a6, a6, 24
; CHECK-ALIGNED-RV64-NEXT:    or a4, a6, a5
; CHECK-ALIGNED-RV64-NEXT:    or a3, a4, a3
; CHECK-ALIGNED-RV64-NEXT:    slli a3, a3, 32
; CHECK-ALIGNED-RV64-NEXT:    or a2, a3, a2
; CHECK-ALIGNED-RV64-NEXT:    lbu a3, 1(a1)
; CHECK-ALIGNED-RV64-NEXT:    lbu a4, 0(a1)
; CHECK-ALIGNED-RV64-NEXT:    lbu a5, 2(a1)
; CHECK-ALIGNED-RV64-NEXT:    lbu a6, 3(a1)
; CHECK-ALIGNED-RV64-NEXT:    slli a3, a3, 8
; CHECK-ALIGNED-RV64-NEXT:    or a3, a3, a4
; CHECK-ALIGNED-RV64-NEXT:    slli a5, a5, 16
; CHECK-ALIGNED-RV64-NEXT:    slli a6, a6, 24
; CHECK-ALIGNED-RV64-NEXT:    or a4, a6, a5
; CHECK-ALIGNED-RV64-NEXT:    or a3, a4, a3
; CHECK-ALIGNED-RV64-NEXT:    lbu a4, 5(a1)
; CHECK-ALIGNED-RV64-NEXT:    lbu a5, 4(a1)
; CHECK-ALIGNED-RV64-NEXT:    lbu a6, 6(a1)
; CHECK-ALIGNED-RV64-NEXT:    lbu a7, 7(a1)
; CHECK-ALIGNED-RV64-NEXT:    slli a4, a4, 8
; CHECK-ALIGNED-RV64-NEXT:    or a4, a4, a5
; CHECK-ALIGNED-RV64-NEXT:    slli a6, a6, 16
; CHECK-ALIGNED-RV64-NEXT:    slli a7, a7, 24
; CHECK-ALIGNED-RV64-NEXT:    or a5, a7, a6
; CHECK-ALIGNED-RV64-NEXT:    or a4, a5, a4
; CHECK-ALIGNED-RV64-NEXT:    slli a4, a4, 32
; CHECK-ALIGNED-RV64-NEXT:    or a3, a4, a3
; CHECK-ALIGNED-RV64-NEXT:    xor a2, a2, a3
; CHECK-ALIGNED-RV64-NEXT:    lbu a3, 9(a0)
; CHECK-ALIGNED-RV64-NEXT:    lbu a4, 8(a0)
; CHECK-ALIGNED-RV64-NEXT:    lbu a5, 10(a0)
; CHECK-ALIGNED-RV64-NEXT:    lbu a6, 11(a0)
; CHECK-ALIGNED-RV64-NEXT:    slli a3, a3, 8
; CHECK-ALIGNED-RV64-NEXT:    or a3, a3, a4
; CHECK-ALIGNED-RV64-NEXT:    slli a5, a5, 16
; CHECK-ALIGNED-RV64-NEXT:    slli a6, a6, 24
; CHECK-ALIGNED-RV64-NEXT:    or a4, a6, a5
; CHECK-ALIGNED-RV64-NEXT:    or a3, a4, a3
; CHECK-ALIGNED-RV64-NEXT:    lbu a4, 13(a0)
; CHECK-ALIGNED-RV64-NEXT:    lbu a5, 12(a0)
; CHECK-ALIGNED-RV64-NEXT:    lbu a6, 14(a0)
; CHECK-ALIGNED-RV64-NEXT:    lbu a0, 15(a0)
; CHECK-ALIGNED-RV64-NEXT:    slli a4, a4, 8
; CHECK-ALIGNED-RV64-NEXT:    or a4, a4, a5
; CHECK-ALIGNED-RV64-NEXT:    slli a6, a6, 16
; CHECK-ALIGNED-RV64-NEXT:    slli a0, a0, 24
; CHECK-ALIGNED-RV64-NEXT:    or a0, a0, a6
; CHECK-ALIGNED-RV64-NEXT:    or a0, a0, a4
; CHECK-ALIGNED-RV64-NEXT:    slli a0, a0, 32
; CHECK-ALIGNED-RV64-NEXT:    or a0, a0, a3
; CHECK-ALIGNED-RV64-NEXT:    lbu a3, 9(a1)
; CHECK-ALIGNED-RV64-NEXT:    lbu a4, 8(a1)
; CHECK-ALIGNED-RV64-NEXT:    lbu a5, 10(a1)
; CHECK-ALIGNED-RV64-NEXT:    lbu a6, 11(a1)
; CHECK-ALIGNED-RV64-NEXT:    slli a3, a3, 8
; CHECK-ALIGNED-RV64-NEXT:    or a3, a3, a4
; CHECK-ALIGNED-RV64-NEXT:    slli a5, a5, 16
; CHECK-ALIGNED-RV64-NEXT:    slli a6, a6, 24
; CHECK-ALIGNED-RV64-NEXT:    or a4, a6, a5
; CHECK-ALIGNED-RV64-NEXT:    or a3, a4, a3
; CHECK-ALIGNED-RV64-NEXT:    lbu a4, 13(a1)
; CHECK-ALIGNED-RV64-NEXT:    lbu a5, 12(a1)
; CHECK-ALIGNED-RV64-NEXT:    lbu a6, 14(a1)
; CHECK-ALIGNED-RV64-NEXT:    lbu a1, 15(a1)
; CHECK-ALIGNED-RV64-NEXT:    slli a4, a4, 8
; CHECK-ALIGNED-RV64-NEXT:    or a4, a4, a5
; CHECK-ALIGNED-RV64-NEXT:    slli a6, a6, 16
; CHECK-ALIGNED-RV64-NEXT:    slli a1, a1, 24
; CHECK-ALIGNED-RV64-NEXT:    or a1, a1, a6
; CHECK-ALIGNED-RV64-NEXT:    or a1, a1, a4
; CHECK-ALIGNED-RV64-NEXT:    slli a1, a1, 32
; CHECK-ALIGNED-RV64-NEXT:    or a1, a1, a3
; CHECK-ALIGNED-RV64-NEXT:    xor a0, a0, a1
; CHECK-ALIGNED-RV64-NEXT:    or a0, a2, a0
; CHECK-ALIGNED-RV64-NEXT:    seqz a0, a0
; CHECK-ALIGNED-RV64-NEXT:    ret
;
; CHECK-UNALIGNED-RV32-LABEL: memcmp_size_16:
; CHECK-UNALIGNED-RV32:       # %bb.0: # %entry
; CHECK-UNALIGNED-RV32-NEXT:    lw a2, 0(a0)
; CHECK-UNALIGNED-RV32-NEXT:    lw a3, 0(a1)
; CHECK-UNALIGNED-RV32-NEXT:    lw a4, 4(a0)
; CHECK-UNALIGNED-RV32-NEXT:    lw a5, 4(a1)
; CHECK-UNALIGNED-RV32-NEXT:    lw a6, 8(a0)
; CHECK-UNALIGNED-RV32-NEXT:    lw a7, 8(a1)
; CHECK-UNALIGNED-RV32-NEXT:    lw a0, 12(a0)
; CHECK-UNALIGNED-RV32-NEXT:    lw a1, 12(a1)
; CHECK-UNALIGNED-RV32-NEXT:    xor a2, a2, a3
; CHECK-UNALIGNED-RV32-NEXT:    xor a4, a4, a5
; CHECK-UNALIGNED-RV32-NEXT:    xor a3, a6, a7
; CHECK-UNALIGNED-RV32-NEXT:    xor a0, a0, a1
; CHECK-UNALIGNED-RV32-NEXT:    or a2, a2, a4
; CHECK-UNALIGNED-RV32-NEXT:    or a0, a3, a0
; CHECK-UNALIGNED-RV32-NEXT:    or a0, a2, a0
; CHECK-UNALIGNED-RV32-NEXT:    seqz a0, a0
; CHECK-UNALIGNED-RV32-NEXT:    ret
;
; CHECK-UNALIGNED-RV64-LABEL: memcmp_size_16:
; CHECK-UNALIGNED-RV64:       # %bb.0: # %entry
; CHECK-UNALIGNED-RV64-NEXT:    ld a2, 0(a0)
; CHECK-UNALIGNED-RV64-NEXT:    ld a3, 0(a1)
; CHECK-UNALIGNED-RV64-NEXT:    ld a0, 8(a0)
; CHECK-UNALIGNED-RV64-NEXT:    ld a1, 8(a1)
; CHECK-UNALIGNED-RV64-NEXT:    xor a2, a2, a3
; CHECK-UNALIGNED-RV64-NEXT:    xor a0, a0, a1
; CHECK-UNALIGNED-RV64-NEXT:    or a0, a2, a0
; CHECK-UNALIGNED-RV64-NEXT:    seqz a0, a0
; CHECK-UNALIGNED-RV64-NEXT:    ret
entry:
  %memcmp = call i32 @memcmp(i8* %s1, i8* %s2, iXLen 16)
  %ret = icmp eq i32 %memcmp, 0
  ret i1 %ret
}

define i1 @memcmp_size_32(i8* %s1, i8* %s2) {
; CHECK-ALIGNED-RV32-LABEL: memcmp_size_32:
; CHECK-ALIGNED-RV32:       # %bb.0: # %entry
; CHECK-ALIGNED-RV32-NEXT:    lbu a2, 1(a0)
; CHECK-ALIGNED-RV32-NEXT:    lbu a3, 0(a0)
; CHECK-ALIGNED-RV32-NEXT:    lbu a4, 2(a0)
; CHECK-ALIGNED-RV32-NEXT:    lbu a5, 3(a0)
; CHECK-ALIGNED-RV32-NEXT:    slli a2, a2, 8
; CHECK-ALIGNED-RV32-NEXT:    or a2, a2, a3
; CHECK-ALIGNED-RV32-NEXT:    slli a4, a4, 16
; CHECK-ALIGNED-RV32-NEXT:    slli a5, a5, 24
; CHECK-ALIGNED-RV32-NEXT:    or a4, a5, a4
; CHECK-ALIGNED-RV32-NEXT:    or a2, a4, a2
; CHECK-ALIGNED-RV32-NEXT:    lbu a3, 1(a1)
; CHECK-ALIGNED-RV32-NEXT:    lbu a4, 0(a1)
; CHECK-ALIGNED-RV32-NEXT:    lbu a5, 2(a1)
; CHECK-ALIGNED-RV32-NEXT:    lbu a6, 3(a1)
; CHECK-ALIGNED-RV32-NEXT:    slli a3, a3, 8
; CHECK-ALIGNED-RV32-NEXT:    or a3, a3, a4
; CHECK-ALIGNED-RV32-NEXT:    slli a5, a5, 16
; CHECK-ALIGNED-RV32-NEXT:    slli a6, a6, 24
; CHECK-ALIGNED-RV32-NEXT:    or a4, a6, a5
; CHECK-ALIGNED-RV32-NEXT:    or a3, a4, a3
; CHECK-ALIGNED-RV32-NEXT:    xor a2, a2, a3
; CHECK-ALIGNED-RV32-NEXT:    lbu a3, 5(a0)
; CHECK-ALIGNED-RV32-NEXT:    lbu a4, 4(a0)
; CHECK-ALIGNED-RV32-NEXT:    lbu a5, 6(a0)
; CHECK-ALIGNED-RV32-NEXT:    lbu a6, 7(a0)
; CHECK-ALIGNED-RV32-NEXT:    slli a3, a3, 8
; CHECK-ALIGNED-RV32-NEXT:    or a3, a3, a4
; CHECK-ALIGNED-RV32-NEXT:    slli a5, a5, 16
; CHECK-ALIGNED-RV32-NEXT:    slli a6, a6, 24
; CHECK-ALIGNED-RV32-NEXT:    or a4, a6, a5
; CHECK-ALIGNED-RV32-NEXT:    or a3, a4, a3
; CHECK-ALIGNED-RV32-NEXT:    lbu a4, 5(a1)
; CHECK-ALIGNED-RV32-NEXT:    lbu a5, 4(a1)
; CHECK-ALIGNED-RV32-NEXT:    lbu a6, 6(a1)
; CHECK-ALIGNED-RV32-NEXT:    lbu a7, 7(a1)
; CHECK-ALIGNED-RV32-NEXT:    slli a4, a4, 8
; CHECK-ALIGNED-RV32-NEXT:    or a4, a4, a5
; CHECK-ALIGNED-RV32-NEXT:    slli a6, a6, 16
; CHECK-ALIGNED-RV32-NEXT:    slli a7, a7, 24
; CHECK-ALIGNED-RV32-NEXT:    or a5, a7, a6
; CHECK-ALIGNED-RV32-NEXT:    or a4, a5, a4
; CHECK-ALIGNED-RV32-NEXT:    xor a3, a3, a4
; CHECK-ALIGNED-RV32-NEXT:    lbu a4, 9(a0)
; CHECK-ALIGNED-RV32-NEXT:    lbu a5, 8(a0)
; CHECK-ALIGNED-RV32-NEXT:    lbu a6, 10(a0)
; CHECK-ALIGNED-RV32-NEXT:    lbu a7, 11(a0)
; CHECK-ALIGNED-RV32-NEXT:    slli a4, a4, 8
; CHECK-ALIGNED-RV32-NEXT:    or a4, a4, a5
; CHECK-ALIGNED-RV32-NEXT:    slli a6, a6, 16
; CHECK-ALIGNED-RV32-NEXT:    slli a7, a7, 24
; CHECK-ALIGNED-RV32-NEXT:    or a5, a7, a6
; CHECK-ALIGNED-RV32-NEXT:    or a4, a5, a4
; CHECK-ALIGNED-RV32-NEXT:    lbu a5, 9(a1)
; CHECK-ALIGNED-RV32-NEXT:    lbu a6, 8(a1)
; CHECK-ALIGNED-RV32-NEXT:    lbu a7, 10(a1)
; CHECK-ALIGNED-RV32-NEXT:    lbu t0, 11(a1)
; CHECK-ALIGNED-RV32-NEXT:    slli a5, a5, 8
; CHECK-ALIGNED-RV32-NEXT:    or a5, a5, a6
; CHECK-ALIGNED-RV32-NEXT:    slli a7, a7, 16
; CHECK-ALIGNED-RV32-NEXT:    slli t0, t0, 24
; CHECK-ALIGNED-RV32-NEXT:    or a6, t0, a7
; CHECK-ALIGNED-RV32-NEXT:    or a5, a6, a5
; CHECK-ALIGNED-RV32-NEXT:    xor a4, a4, a5
; CHECK-ALIGNED-RV32-NEXT:    lbu a5, 13(a0)
; CHECK-ALIGNED-RV32-NEXT:    lbu a6, 12(a0)
; CHECK-ALIGNED-RV32-NEXT:    lbu a7, 14(a0)
; CHECK-ALIGNED-RV32-NEXT:    lbu t0, 15(a0)
; CHECK-ALIGNED-RV32-NEXT:    slli a5, a5, 8
; CHECK-ALIGNED-RV32-NEXT:    or a5, a5, a6
; CHECK-ALIGNED-RV32-NEXT:    slli a7, a7, 16
; CHECK-ALIGNED-RV32-NEXT:    slli t0, t0, 24
; CHECK-ALIGNED-RV32-NEXT:    or a6, t0, a7
; CHECK-ALIGNED-RV32-NEXT:    or a5, a6, a5
; CHECK-ALIGNED-RV32-NEXT:    lbu a6, 13(a1)
; CHECK-ALIGNED-RV32-NEXT:    lbu a7, 12(a1)
; CHECK-ALIGNED-RV32-NEXT:    lbu t0, 14(a1)
; CHECK-ALIGNED-RV32-NEXT:    lbu t1, 15(a1)
; CHECK-ALIGNED-RV32-NEXT:    slli a6, a6, 8
; CHECK-ALIGNED-RV32-NEXT:    or a6, a6, a7
; CHECK-ALIGNED-RV32-NEXT:    slli t0, t0, 16
; CHECK-ALIGNED-RV32-NEXT:    slli t1, t1, 24
; CHECK-ALIGNED-RV32-NEXT:    or a7, t1, t0
; CHECK-ALIGNED-RV32-NEXT:    or a6, a7, a6
; CHECK-ALIGNED-RV32-NEXT:    xor a5, a5, a6
; CHECK-ALIGNED-RV32-NEXT:    lbu a6, 17(a0)
; CHECK-ALIGNED-RV32-NEXT:    lbu a7, 16(a0)
; CHECK-ALIGNED-RV32-NEXT:    lbu t0, 18(a0)
; CHECK-ALIGNED-RV32-NEXT:    lbu t1, 19(a0)
; CHECK-ALIGNED-RV32-NEXT:    slli a6, a6, 8
; CHECK-ALIGNED-RV32-NEXT:    or a6, a6, a7
; CHECK-ALIGNED-RV32-NEXT:    slli t0, t0, 16
; CHECK-ALIGNED-RV32-NEXT:    slli t1, t1, 24
; CHECK-ALIGNED-RV32-NEXT:    or a7, t1, t0
; CHECK-ALIGNED-RV32-NEXT:    or a6, a7, a6
; CHECK-ALIGNED-RV32-NEXT:    lbu a7, 17(a1)
; CHECK-ALIGNED-RV32-NEXT:    lbu t0, 16(a1)
; CHECK-ALIGNED-RV32-NEXT:    lbu t1, 18(a1)
; CHECK-ALIGNED-RV32-NEXT:    lbu t2, 19(a1)
; CHECK-ALIGNED-RV32-NEXT:    slli a7, a7, 8
; CHECK-ALIGNED-RV32-NEXT:    or a7, a7, t0
; CHECK-ALIGNED-RV32-NEXT:    slli t1, t1, 16
; CHECK-ALIGNED-RV32-NEXT:    slli t2, t2, 24
; CHECK-ALIGNED-RV32-NEXT:    or t0, t2, t1
; CHECK-ALIGNED-RV32-NEXT:    or a7, t0, a7
; CHECK-ALIGNED-RV32-NEXT:    xor a6, a6, a7
; CHECK-ALIGNED-RV32-NEXT:    lbu a7, 21(a0)
; CHECK-ALIGNED-RV32-NEXT:    lbu t0, 20(a0)
; CHECK-ALIGNED-RV32-NEXT:    lbu t1, 22(a0)
; CHECK-ALIGNED-RV32-NEXT:    lbu t2, 23(a0)
; CHECK-ALIGNED-RV32-NEXT:    slli a7, a7, 8
; CHECK-ALIGNED-RV32-NEXT:    or a7, a7, t0
; CHECK-ALIGNED-RV32-NEXT:    slli t1, t1, 16
; CHECK-ALIGNED-RV32-NEXT:    slli t2, t2, 24
; CHECK-ALIGNED-RV32-NEXT:    or t0, t2, t1
; CHECK-ALIGNED-RV32-NEXT:    or a7, t0, a7
; CHECK-ALIGNED-RV32-NEXT:    lbu t0, 21(a1)
; CHECK-ALIGNED-RV32-NEXT:    lbu t1, 20(a1)
; CHECK-ALIGNED-RV32-NEXT:    lbu t2, 22(a1)
; CHECK-ALIGNED-RV32-NEXT:    lbu t3, 23(a1)
; CHECK-ALIGNED-RV32-NEXT:    slli t0, t0, 8
; CHECK-ALIGNED-RV32-NEXT:    or t0, t0, t1
; CHECK-ALIGNED-RV32-NEXT:    slli t2, t2, 16
; CHECK-ALIGNED-RV32-NEXT:    slli t3, t3, 24
; CHECK-ALIGNED-RV32-NEXT:    or t1, t3, t2
; CHECK-ALIGNED-RV32-NEXT:    or t0, t1, t0
; CHECK-ALIGNED-RV32-NEXT:    xor a7, a7, t0
; CHECK-ALIGNED-RV32-NEXT:    lbu t0, 25(a0)
; CHECK-ALIGNED-RV32-NEXT:    lbu t1, 24(a0)
; CHECK-ALIGNED-RV32-NEXT:    lbu t2, 26(a0)
; CHECK-ALIGNED-RV32-NEXT:    lbu t3, 27(a0)
; CHECK-ALIGNED-RV32-NEXT:    slli t0, t0, 8
; CHECK-ALIGNED-RV32-NEXT:    or t0, t0, t1
; CHECK-ALIGNED-RV32-NEXT:    slli t2, t2, 16
; CHECK-ALIGNED-RV32-NEXT:    slli t3, t3, 24
; CHECK-ALIGNED-RV32-NEXT:    or t1, t3, t2
; CHECK-ALIGNED-RV32-NEXT:    or t0, t1, t0
; CHECK-ALIGNED-RV32-NEXT:    lbu t1, 25(a1)
; CHECK-ALIGNED-RV32-NEXT:    lbu t2, 24(a1)
; CHECK-ALIGNED-RV32-NEXT:    lbu t3, 26(a1)
; CHECK-ALIGNED-RV32-NEXT:    lbu t4, 27(a1)
; CHECK-ALIGNED-RV32-NEXT:    slli t1, t1, 8
; CHECK-ALIGNED-RV32-NEXT:    or t1, t1, t2
; CHECK-ALIGNED-RV32-NEXT:    slli t3, t3, 16
; CHECK-ALIGNED-RV32-NEXT:    slli t4, t4, 24
; CHECK-ALIGNED-RV32-NEXT:    or t2, t4, t3
; CHECK-ALIGNED-RV32-NEXT:    or t1, t2, t1
; CHECK-ALIGNED-RV32-NEXT:    xor t0, t0, t1
; CHECK-ALIGNED-RV32-NEXT:    lbu t1, 29(a0)
; CHECK-ALIGNED-RV32-NEXT:    lbu t2, 28(a0)
; CHECK-ALIGNED-RV32-NEXT:    lbu t3, 30(a0)
; CHECK-ALIGNED-RV32-NEXT:    lbu a0, 31(a0)
; CHECK-ALIGNED-RV32-NEXT:    slli t1, t1, 8
; CHECK-ALIGNED-RV32-NEXT:    or t1, t1, t2
; CHECK-ALIGNED-RV32-NEXT:    slli t3, t3, 16
; CHECK-ALIGNED-RV32-NEXT:    slli a0, a0, 24
; CHECK-ALIGNED-RV32-NEXT:    or a0, a0, t3
; CHECK-ALIGNED-RV32-NEXT:    or a0, a0, t1
; CHECK-ALIGNED-RV32-NEXT:    lbu t1, 29(a1)
; CHECK-ALIGNED-RV32-NEXT:    lbu t2, 28(a1)
; CHECK-ALIGNED-RV32-NEXT:    lbu t3, 30(a1)
; CHECK-ALIGNED-RV32-NEXT:    lbu a1, 31(a1)
; CHECK-ALIGNED-RV32-NEXT:    slli t1, t1, 8
; CHECK-ALIGNED-RV32-NEXT:    or t1, t1, t2
; CHECK-ALIGNED-RV32-NEXT:    slli t3, t3, 16
; CHECK-ALIGNED-RV32-NEXT:    slli a1, a1, 24
; CHECK-ALIGNED-RV32-NEXT:    or a1, a1, t3
; CHECK-ALIGNED-RV32-NEXT:    or a1, a1, t1
; CHECK-ALIGNED-RV32-NEXT:    xor a0, a0, a1
; CHECK-ALIGNED-RV32-NEXT:    or a2, a2, a3
; CHECK-ALIGNED-RV32-NEXT:    or a4, a4, a5
; CHECK-ALIGNED-RV32-NEXT:    or a1, a6, a7
; CHECK-ALIGNED-RV32-NEXT:    or a0, t0, a0
; CHECK-ALIGNED-RV32-NEXT:    or a2, a2, a4
; CHECK-ALIGNED-RV32-NEXT:    or a0, a1, a0
; CHECK-ALIGNED-RV32-NEXT:    or a0, a2, a0
; CHECK-ALIGNED-RV32-NEXT:    seqz a0, a0
; CHECK-ALIGNED-RV32-NEXT:    ret
;
; CHECK-ALIGNED-RV64-LABEL: memcmp_size_32:
; CHECK-ALIGNED-RV64:       # %bb.0: # %entry
; CHECK-ALIGNED-RV64-NEXT:    lbu a2, 1(a0)
; CHECK-ALIGNED-RV64-NEXT:    lbu a3, 0(a0)
; CHECK-ALIGNED-RV64-NEXT:    lbu a4, 2(a0)
; CHECK-ALIGNED-RV64-NEXT:    lbu a5, 3(a0)
; CHECK-ALIGNED-RV64-NEXT:    slli a2, a2, 8
; CHECK-ALIGNED-RV64-NEXT:    or a2, a2, a3
; CHECK-ALIGNED-RV64-NEXT:    slli a4, a4, 16
; CHECK-ALIGNED-RV64-NEXT:    slli a5, a5, 24
; CHECK-ALIGNED-RV64-NEXT:    or a4, a5, a4
; CHECK-ALIGNED-RV64-NEXT:    or a2, a4, a2
; CHECK-ALIGNED-RV64-NEXT:    lbu a3, 5(a0)
; CHECK-ALIGNED-RV64-NEXT:    lbu a4, 4(a0)
; CHECK-ALIGNED-RV64-NEXT:    lbu a5, 6(a0)
; CHECK-ALIGNED-RV64-NEXT:    lbu a6, 7(a0)
; CHECK-ALIGNED-RV64-NEXT:    slli a3, a3, 8
; CHECK-ALIGNED-RV64-NEXT:    or a3, a3, a4
; CHECK-ALIGNED-RV64-NEXT:    slli a5, a5, 16
; CHECK-ALIGNED-RV64-NEXT:    slli a6, a6, 24
; CHECK-ALIGNED-RV64-NEXT:    or a4, a6, a5
; CHECK-ALIGNED-RV64-NEXT:    or a3, a4, a3
; CHECK-ALIGNED-RV64-NEXT:    slli a3, a3, 32
; CHECK-ALIGNED-RV64-NEXT:    or a2, a3, a2
; CHECK-ALIGNED-RV64-NEXT:    lbu a3, 1(a1)
; CHECK-ALIGNED-RV64-NEXT:    lbu a4, 0(a1)
; CHECK-ALIGNED-RV64-NEXT:    lbu a5, 2(a1)
; CHECK-ALIGNED-RV64-NEXT:    lbu a6, 3(a1)
; CHECK-ALIGNED-RV64-NEXT:    slli a3, a3, 8
; CHECK-ALIGNED-RV64-NEXT:    or a3, a3, a4
; CHECK-ALIGNED-RV64-NEXT:    slli a5, a5, 16
; CHECK-ALIGNED-RV64-NEXT:    slli a6, a6, 24
; CHECK-ALIGNED-RV64-NEXT:    or a4, a6, a5
; CHECK-ALIGNED-RV64-NEXT:    or a3, a4, a3
; CHECK-ALIGNED-RV64-NEXT:    lbu a4, 5(a1)
; CHECK-ALIGNED-RV64-NEXT:    lbu a5, 4(a1)
; CHECK-ALIGNED-RV64-NEXT:    lbu a6, 6(a1)
; CHECK-ALIGNED-RV64-NEXT:    lbu a7, 7(a1)
; CHECK-ALIGNED-RV64-NEXT:    slli a4, a4, 8
; CHECK-ALIGNED-RV64-NEXT:    or a4, a4, a5
; CHECK-ALIGNED-RV64-NEXT:    slli a6, a6, 16
; CHECK-ALIGNED-RV64-NEXT:    slli a7, a7, 24
; CHECK-ALIGNED-RV64-NEXT:    or a5, a7, a6
; CHECK-ALIGNED-RV64-NEXT:    or a4, a5, a4
; CHECK-ALIGNED-RV64-NEXT:    slli a4, a4, 32
; CHECK-ALIGNED-RV64-NEXT:    or a3, a4, a3
; CHECK-ALIGNED-RV64-NEXT:    xor a2, a2, a3
; CHECK-ALIGNED-RV64-NEXT:    lbu a3, 9(a0)
; CHECK-ALIGNED-RV64-NEXT:    lbu a4, 8(a0)
; CHECK-ALIGNED-RV64-NEXT:    lbu a5, 10(a0)
; CHECK-ALIGNED-RV64-NEXT:    lbu a6, 11(a0)
; CHECK-ALIGNED-RV64-NEXT:    slli a3, a3, 8
; CHECK-ALIGNED-RV64-NEXT:    or a3, a3, a4
; CHECK-ALIGNED-RV64-NEXT:    slli a5, a5, 16
; CHECK-ALIGNED-RV64-NEXT:    slli a6, a6, 24
; CHECK-ALIGNED-RV64-NEXT:    or a4, a6, a5
; CHECK-ALIGNED-RV64-NEXT:    or a3, a4, a3
; CHECK-ALIGNED-RV64-NEXT:    lbu a4, 13(a0)
; CHECK-ALIGNED-RV64-NEXT:    lbu a5, 12(a0)
; CHECK-ALIGNED-RV64-NEXT:    lbu a6, 14(a0)
; CHECK-ALIGNED-RV64-NEXT:    lbu a7, 15(a0)
; CHECK-ALIGNED-RV64-NEXT:    slli a4, a4, 8
; CHECK-ALIGNED-RV64-NEXT:    or a4, a4, a5
; CHECK-ALIGNED-RV64-NEXT:    slli a6, a6, 16
; CHECK-ALIGNED-RV64-NEXT:    slli a7, a7, 24
; CHECK-ALIGNED-RV64-NEXT:    or a5, a7, a6
; CHECK-ALIGNED-RV64-NEXT:    or a4, a5, a4
; CHECK-ALIGNED-RV64-NEXT:    slli a4, a4, 32
; CHECK-ALIGNED-RV64-NEXT:    or a3, a4, a3
; CHECK-ALIGNED-RV64-NEXT:    lbu a4, 9(a1)
; CHECK-ALIGNED-RV64-NEXT:    lbu a5, 8(a1)
; CHECK-ALIGNED-RV64-NEXT:    lbu a6, 10(a1)
; CHECK-ALIGNED-RV64-NEXT:    lbu a7, 11(a1)
; CHECK-ALIGNED-RV64-NEXT:    slli a4, a4, 8
; CHECK-ALIGNED-RV64-NEXT:    or a4, a4, a5
; CHECK-ALIGNED-RV64-NEXT:    slli a6, a6, 16
; CHECK-ALIGNED-RV64-NEXT:    slli a7, a7, 24
; CHECK-ALIGNED-RV64-NEXT:    or a5, a7, a6
; CHECK-ALIGNED-RV64-NEXT:    or a4, a5, a4
; CHECK-ALIGNED-RV64-NEXT:    lbu a5, 13(a1)
; CHECK-ALIGNED-RV64-NEXT:    lbu a6, 12(a1)
; CHECK-ALIGNED-RV64-NEXT:    lbu a7, 14(a1)
; CHECK-ALIGNED-RV64-NEXT:    lbu t0, 15(a1)
; CHECK-ALIGNED-RV64-NEXT:    slli a5, a5, 8
; CHECK-ALIGNED-RV64-NEXT:    or a5, a5, a6
; CHECK-ALIGNED-RV64-NEXT:    slli a7, a7, 16
; CHECK-ALIGNED-RV64-NEXT:    slli t0, t0, 24
; CHECK-ALIGNED-RV64-NEXT:    or a6, t0, a7
; CHECK-ALIGNED-RV64-NEXT:    or a5, a6, a5
; CHECK-ALIGNED-RV64-NEXT:    slli a5, a5, 32
; CHECK-ALIGNED-RV64-NEXT:    or a4, a5, a4
; CHECK-ALIGNED-RV64-NEXT:    xor a3, a3, a4
; CHECK-ALIGNED-RV64-NEXT:    lbu a4, 17(a0)
; CHECK-ALIGNED-RV64-NEXT:    lbu a5, 16(a0)
; CHECK-ALIGNED-RV64-NEXT:    lbu a6, 18(a0)
; CHECK-ALIGNED-RV64-NEXT:    lbu a7, 19(a0)
; CHECK-ALIGNED-RV64-NEXT:    slli a4, a4, 8
; CHECK-ALIGNED-RV64-NEXT:    or a4, a4, a5
; CHECK-ALIGNED-RV64-NEXT:    slli a6, a6, 16
; CHECK-ALIGNED-RV64-NEXT:    slli a7, a7, 24
; CHECK-ALIGNED-RV64-NEXT:    or a5, a7, a6
; CHECK-ALIGNED-RV64-NEXT:    or a4, a5, a4
; CHECK-ALIGNED-RV64-NEXT:    lbu a5, 21(a0)
; CHECK-ALIGNED-RV64-NEXT:    lbu a6, 20(a0)
; CHECK-ALIGNED-RV64-NEXT:    lbu a7, 22(a0)
; CHECK-ALIGNED-RV64-NEXT:    lbu t0, 23(a0)
; CHECK-ALIGNED-RV64-NEXT:    slli a5, a5, 8
; CHECK-ALIGNED-RV64-NEXT:    or a5, a5, a6
; CHECK-ALIGNED-RV64-NEXT:    slli a7, a7, 16
; CHECK-ALIGNED-RV64-NEXT:    slli t0, t0, 24
; CHECK-ALIGNED-RV64-NEXT:    or a6, t0, a7
; CHECK-ALIGNED-RV64-NEXT:    or a5, a6, a5
; CHECK-ALIGNED-RV64-NEXT:    slli a5, a5, 32
; CHECK-ALIGNED-RV64-NEXT:    or a4, a5, a4
; CHECK-ALIGNED-RV64-NEXT:    lbu a5, 17(a1)
; CHECK-ALIGNED-RV64-NEXT:    lbu a6, 16(a1)
; CHECK-ALIGNED-RV64-NEXT:    lbu a7, 18(a1)
; CHECK-ALIGNED-RV64-NEXT:    lbu t0, 19(a1)
; CHECK-ALIGNED-RV64-NEXT:    slli a5, a5, 8
; CHECK-ALIGNED-RV64-NEXT:    or a5, a5, a6
; CHECK-ALIGNED-RV64-NEXT:    slli a7, a7, 16
; CHECK-ALIGNED-RV64-NEXT:    slli t0, t0, 24
; CHECK-ALIGNED-RV64-NEXT:    or a6, t0, a7
; CHECK-ALIGNED-RV64-NEXT:    or a5, a6, a5
; CHECK-ALIGNED-RV64-NEXT:    lbu a6, 21(a1)
; CHECK-ALIGNED-RV64-NEXT:    lbu a7, 20(a1)
; CHECK-ALIGNED-RV64-NEXT:    lbu t0, 22(a1)
; CHECK-ALIGNED-RV64-NEXT:    lbu t1, 23(a1)
; CHECK-ALIGNED-RV64-NEXT:    slli a6, a6, 8
; CHECK-ALIGNED-RV64-NEXT:    or a6, a6, a7
; CHECK-ALIGNED-RV64-NEXT:    slli t0, t0, 16
; CHECK-ALIGNED-RV64-NEXT:    slli t1, t1, 24
; CHECK-ALIGNED-RV64-NEXT:    or a7, t1, t0
; CHECK-ALIGNED-RV64-NEXT:    or a6, a7, a6
; CHECK-ALIGNED-RV64-NEXT:    slli a6, a6, 32
; CHECK-ALIGNED-RV64-NEXT:    or a5, a6, a5
; CHECK-ALIGNED-RV64-NEXT:    xor a4, a4, a5
; CHECK-ALIGNED-RV64-NEXT:    lbu a5, 25(a0)
; CHECK-ALIGNED-RV64-NEXT:    lbu a6, 24(a0)
; CHECK-ALIGNED-RV64-NEXT:    lbu a7, 26(a0)
; CHECK-ALIGNED-RV64-NEXT:    lbu t0, 27(a0)
; CHECK-ALIGNED-RV64-NEXT:    slli a5, a5, 8
; CHECK-ALIGNED-RV64-NEXT:    or a5, a5, a6
; CHECK-ALIGNED-RV64-NEXT:    slli a7, a7, 16
; CHECK-ALIGNED-RV64-NEXT:    slli t0, t0, 24
; CHECK-ALIGNED-RV64-NEXT:    or a6, t0, a7
; CHECK-ALIGNED-RV64-NEXT:    or a5, a6, a5
; CHECK-ALIGNED-RV64-NEXT:    lbu a6, 29(a0)
; CHECK-ALIGNED-RV64-NEXT:    lbu a7, 28(a0)
; CHECK-ALIGNED-RV64-NEXT:    lbu t0, 30(a0)
; CHECK-ALIGNED-RV64-NEXT:    lbu a0, 31(a0)
; CHECK-ALIGNED-RV64-NEXT:    slli a6, a6, 8
; CHECK-ALIGNED-RV64-NEXT:    or a6, a6, a7
; CHECK-ALIGNED-RV64-NEXT:    slli t0, t0, 16
; CHECK-ALIGNED-RV64-NEXT:    slli a0, a0, 24
; CHECK-ALIGNED-RV64-NEXT:    or a0, a0, t0
; CHECK-ALIGNED-RV64-NEXT:    or a0, a0, a6
; CHECK-ALIGNED-RV64-NEXT:    slli a0, a0, 32
; CHECK-ALIGNED-RV64-NEXT:    or a0, a0, a5
; CHECK-ALIGNED-RV64-NEXT:    lbu a5, 25(a1)
; CHECK-ALIGNED-RV64-NEXT:    lbu a6, 24(a1)
; CHECK-ALIGNED-RV64-NEXT:    lbu a7, 26(a1)
; CHECK-ALIGNED-RV64-NEXT:    lbu t0, 27(a1)
; CHECK-ALIGNED-RV64-NEXT:    slli a5, a5, 8
; CHECK-ALIGNED-RV64-NEXT:    or a5, a5, a6
; CHECK-ALIGNED-RV64-NEXT:    slli a7, a7, 16
; CHECK-ALIGNED-RV64-NEXT:    slli t0, t0, 24
; CHECK-ALIGNED-RV64-NEXT:    or a6, t0, a7
; CHECK-ALIGNED-RV64-NEXT:    or a5, a6, a5
; CHECK-ALIGNED-RV64-NEXT:    lbu a6, 29(a1)
; CHECK-ALIGNED-RV64-NEXT:    lbu a7, 28(a1)
; CHECK-ALIGNED-RV64-NEXT:    lbu t0, 30(a1)
; CHECK-ALIGNED-RV64-NEXT:    lbu a1, 31(a1)
; CHECK-ALIGNED-RV64-NEXT:    slli a6, a6, 8
; CHECK-ALIGNED-RV64-NEXT:    or a6, a6, a7
; CHECK-ALIGNED-RV64-NEXT:    slli t0, t0, 16
; CHECK-ALIGNED-RV64-NEXT:    slli a1, a1, 24
; CHECK-ALIGNED-RV64-NEXT:    or a1, a1, t0
; CHECK-ALIGNED-RV64-NEXT:    or a1, a1, a6
; CHECK-ALIGNED-RV64-NEXT:    slli a1, a1, 32
; CHECK-ALIGNED-RV64-NEXT:    or a1, a1, a5
; CHECK-ALIGNED-RV64-NEXT:    xor a0, a0, a1
; CHECK-ALIGNED-RV64-NEXT:    or a2, a2, a3
; CHECK-ALIGNED-RV64-NEXT:    or a0, a4, a0
; CHECK-ALIGNED-RV64-NEXT:    or a0, a2, a0
; CHECK-ALIGNED-RV64-NEXT:    seqz a0, a0
; CHECK-ALIGNED-RV64-NEXT:    ret
;
; CHECK-UNALIGNED-RV32-LABEL: memcmp_size_32:
; CHECK-UNALIGNED-RV32:       # %bb.0: # %entry
; CHECK-UNALIGNED-RV32-NEXT:    lw a2, 0(a0)
; CHECK-UNALIGNED-RV32-NEXT:    lw a3, 0(a1)
; CHECK-UNALIGNED-RV32-NEXT:    lw a4, 4(a0)
; CHECK-UNALIGNED-RV32-NEXT:    lw a5, 4(a1)
; CHECK-UNALIGNED-RV32-NEXT:    lw a6, 8(a0)
; CHECK-UNALIGNED-RV32-NEXT:    lw a7, 8(a1)
; CHECK-UNALIGNED-RV32-NEXT:    lw t0, 12(a0)
; CHECK-UNALIGNED-RV32-NEXT:    lw t1, 12(a1)
; CHECK-UNALIGNED-RV32-NEXT:    xor a2, a2, a3
; CHECK-UNALIGNED-RV32-NEXT:    xor a4, a4, a5
; CHECK-UNALIGNED-RV32-NEXT:    xor a3, a6, a7
; CHECK-UNALIGNED-RV32-NEXT:    xor a5, t0, t1
; CHECK-UNALIGNED-RV32-NEXT:    lw a6, 16(a0)
; CHECK-UNALIGNED-RV32-NEXT:    lw a7, 16(a1)
; CHECK-UNALIGNED-RV32-NEXT:    lw t0, 20(a0)
; CHECK-UNALIGNED-RV32-NEXT:    lw t1, 20(a1)
; CHECK-UNALIGNED-RV32-NEXT:    lw t2, 24(a0)
; CHECK-UNALIGNED-RV32-NEXT:    lw t3, 24(a1)
; CHECK-UNALIGNED-RV32-NEXT:    lw a0, 28(a0)
; CHECK-UNALIGNED-RV32-NEXT:    lw a1, 28(a1)
; CHECK-UNALIGNED-RV32-NEXT:    xor a6, a6, a7
; CHECK-UNALIGNED-RV32-NEXT:    xor a7, t0, t1
; CHECK-UNALIGNED-RV32-NEXT:    xor t0, t2, t3
; CHECK-UNALIGNED-RV32-NEXT:    xor a0, a0, a1
; CHECK-UNALIGNED-RV32-NEXT:    or a2, a2, a4
; CHECK-UNALIGNED-RV32-NEXT:    or a3, a3, a5
; CHECK-UNALIGNED-RV32-NEXT:    or a1, a6, a7
; CHECK-UNALIGNED-RV32-NEXT:    or a0, t0, a0
; CHECK-UNALIGNED-RV32-NEXT:    or a2, a2, a3
; CHECK-UNALIGNED-RV32-NEXT:    or a0, a1, a0
; CHECK-UNALIGNED-RV32-NEXT:    or a0, a2, a0
; CHECK-UNALIGNED-RV32-NEXT:    seqz a0, a0
; CHECK-UNALIGNED-RV32-NEXT:    ret
;
; CHECK-UNALIGNED-RV64-LABEL: memcmp_size_32:
; CHECK-UNALIGNED-RV64:       # %bb.0: # %entry
; CHECK-UNALIGNED-RV64-NEXT:    ld a2, 0(a0)
; CHECK-UNALIGNED-RV64-NEXT:    ld a3, 0(a1)
; CHECK-UNALIGNED-RV64-NEXT:    ld a4, 8(a0)
; CHECK-UNALIGNED-RV64-NEXT:    ld a5, 8(a1)
; CHECK-UNALIGNED-RV64-NEXT:    ld a6, 16(a0)
; CHECK-UNALIGNED-RV64-NEXT:    ld a7, 16(a1)
; CHECK-UNALIGNED-RV64-NEXT:    ld a0, 24(a0)
; CHECK-UNALIGNED-RV64-NEXT:    ld a1, 24(a1)
; CHECK-UNALIGNED-RV64-NEXT:    xor a2, a2, a3
; CHECK-UNALIGNED-RV64-NEXT:    xor a4, a4, a5
; CHECK-UNALIGNED-RV64-NEXT:    xor a3, a6, a7
; CHECK-UNALIGNED-RV64-NEXT:    xor a0, a0, a1
; CHECK-UNALIGNED-RV64-NEXT:    or a2, a2, a4
; CHECK-UNALIGNED-RV64-NEXT:    or a0, a3, a0
; CHECK-UNALIGNED-RV64-NEXT:    or a0, a2, a0
; CHECK-UNALIGNED-RV64-NEXT:    seqz a0, a0
; CHECK-UNALIGNED-RV64-NEXT:    ret
entry:
  %memcmp = call i32 @memcmp(i8* %s1, i8* %s2, iXLen 32)
  %ret = icmp eq i32 %memcmp, 0
  ret i1 %ret
}

define i1 @memcmp_size_64(i8* %s1, i8* %s2) {
; CHECK-ALIGNED-RV32-LABEL: memcmp_size_64:
; CHECK-ALIGNED-RV32:       # %bb.0: # %entry
; CHECK-ALIGNED-RV32-NEXT:    addi sp, sp, -16
; CHECK-ALIGNED-RV32-NEXT:    .cfi_def_cfa_offset 16
; CHECK-ALIGNED-RV32-NEXT:    sw ra, 12(sp) # 4-byte Folded Spill
; CHECK-ALIGNED-RV32-NEXT:    .cfi_offset ra, -4
; CHECK-ALIGNED-RV32-NEXT:    li a2, 64
; CHECK-ALIGNED-RV32-NEXT:    call memcmp
; CHECK-ALIGNED-RV32-NEXT:    seqz a0, a0
; CHECK-ALIGNED-RV32-NEXT:    lw ra, 12(sp) # 4-byte Folded Reload
; CHECK-ALIGNED-RV32-NEXT:    addi sp, sp, 16
; CHECK-ALIGNED-RV32-NEXT:    ret
;
; CHECK-ALIGNED-RV64-LABEL: memcmp_size_64:
; CHECK-ALIGNED-RV64:       # %bb.0: # %entry
; CHECK-ALIGNED-RV64-NEXT:    lbu a2, 1(a0)
; CHECK-ALIGNED-RV64-NEXT:    lbu a3, 0(a0)
; CHECK-ALIGNED-RV64-NEXT:    lbu a4, 2(a0)
; CHECK-ALIGNED-RV64-NEXT:    lbu a5, 3(a0)
; CHECK-ALIGNED-RV64-NEXT:    slli a2, a2, 8
; CHECK-ALIGNED-RV64-NEXT:    or a2, a2, a3
; CHECK-ALIGNED-RV64-NEXT:    slli a4, a4, 16
; CHECK-ALIGNED-RV64-NEXT:    slli a5, a5, 24
; CHECK-ALIGNED-RV64-NEXT:    or a4, a5, a4
; CHECK-ALIGNED-RV64-NEXT:    or a2, a4, a2
; CHECK-ALIGNED-RV64-NEXT:    lbu a3, 5(a0)
; CHECK-ALIGNED-RV64-NEXT:    lbu a4, 4(a0)
; CHECK-ALIGNED-RV64-NEXT:    lbu a5, 6(a0)
; CHECK-ALIGNED-RV64-NEXT:    lbu a6, 7(a0)
; CHECK-ALIGNED-RV64-NEXT:    slli a3, a3, 8
; CHECK-ALIGNED-RV64-NEXT:    or a3, a3, a4
; CHECK-ALIGNED-RV64-NEXT:    slli a5, a5, 16
; CHECK-ALIGNED-RV64-NEXT:    slli a6, a6, 24
; CHECK-ALIGNED-RV64-NEXT:    or a4, a6, a5
; CHECK-ALIGNED-RV64-NEXT:    or a3, a4, a3
; CHECK-ALIGNED-RV64-NEXT:    slli a3, a3, 32
; CHECK-ALIGNED-RV64-NEXT:    or a2, a3, a2
; CHECK-ALIGNED-RV64-NEXT:    lbu a3, 1(a1)
; CHECK-ALIGNED-RV64-NEXT:    lbu a4, 0(a1)
; CHECK-ALIGNED-RV64-NEXT:    lbu a5, 2(a1)
; CHECK-ALIGNED-RV64-NEXT:    lbu a6, 3(a1)
; CHECK-ALIGNED-RV64-NEXT:    slli a3, a3, 8
; CHECK-ALIGNED-RV64-NEXT:    or a3, a3, a4
; CHECK-ALIGNED-RV64-NEXT:    slli a5, a5, 16
; CHECK-ALIGNED-RV64-NEXT:    slli a6, a6, 24
; CHECK-ALIGNED-RV64-NEXT:    or a4, a6, a5
; CHECK-ALIGNED-RV64-NEXT:    or a3, a4, a3
; CHECK-ALIGNED-RV64-NEXT:    lbu a4, 5(a1)
; CHECK-ALIGNED-RV64-NEXT:    lbu a5, 4(a1)
; CHECK-ALIGNED-RV64-NEXT:    lbu a6, 6(a1)
; CHECK-ALIGNED-RV64-NEXT:    lbu a7, 7(a1)
; CHECK-ALIGNED-RV64-NEXT:    slli a4, a4, 8
; CHECK-ALIGNED-RV64-NEXT:    or a4, a4, a5
; CHECK-ALIGNED-RV64-NEXT:    slli a6, a6, 16
; CHECK-ALIGNED-RV64-NEXT:    slli a7, a7, 24
; CHECK-ALIGNED-RV64-NEXT:    or a5, a7, a6
; CHECK-ALIGNED-RV64-NEXT:    or a4, a5, a4
; CHECK-ALIGNED-RV64-NEXT:    slli a4, a4, 32
; CHECK-ALIGNED-RV64-NEXT:    or a3, a4, a3
; CHECK-ALIGNED-RV64-NEXT:    xor a2, a2, a3
; CHECK-ALIGNED-RV64-NEXT:    lbu a3, 9(a0)
; CHECK-ALIGNED-RV64-NEXT:    lbu a4, 8(a0)
; CHECK-ALIGNED-RV64-NEXT:    lbu a5, 10(a0)
; CHECK-ALIGNED-RV64-NEXT:    lbu a6, 11(a0)
; CHECK-ALIGNED-RV64-NEXT:    slli a3, a3, 8
; CHECK-ALIGNED-RV64-NEXT:    or a3, a3, a4
; CHECK-ALIGNED-RV64-NEXT:    slli a5, a5, 16
; CHECK-ALIGNED-RV64-NEXT:    slli a6, a6, 24
; CHECK-ALIGNED-RV64-NEXT:    or a4, a6, a5
; CHECK-ALIGNED-RV64-NEXT:    or a3, a4, a3
; CHECK-ALIGNED-RV64-NEXT:    lbu a4, 13(a0)
; CHECK-ALIGNED-RV64-NEXT:    lbu a5, 12(a0)
; CHECK-ALIGNED-RV64-NEXT:    lbu a6, 14(a0)
; CHECK-ALIGNED-RV64-NEXT:    lbu a7, 15(a0)
; CHECK-ALIGNED-RV64-NEXT:    slli a4, a4, 8
; CHECK-ALIGNED-RV64-NEXT:    or a4, a4, a5
; CHECK-ALIGNED-RV64-NEXT:    slli a6, a6, 16
; CHECK-ALIGNED-RV64-NEXT:    slli a7, a7, 24
; CHECK-ALIGNED-RV64-NEXT:    or a5, a7, a6
; CHECK-ALIGNED-RV64-NEXT:    or a4, a5, a4
; CHECK-ALIGNED-RV64-NEXT:    slli a4, a4, 32
; CHECK-ALIGNED-RV64-NEXT:    or a3, a4, a3
; CHECK-ALIGNED-RV64-NEXT:    lbu a4, 9(a1)
; CHECK-ALIGNED-RV64-NEXT:    lbu a5, 8(a1)
; CHECK-ALIGNED-RV64-NEXT:    lbu a6, 10(a1)
; CHECK-ALIGNED-RV64-NEXT:    lbu a7, 11(a1)
; CHECK-ALIGNED-RV64-NEXT:    slli a4, a4, 8
; CHECK-ALIGNED-RV64-NEXT:    or a4, a4, a5
; CHECK-ALIGNED-RV64-NEXT:    slli a6, a6, 16
; CHECK-ALIGNED-RV64-NEXT:    slli a7, a7, 24
; CHECK-ALIGNED-RV64-NEXT:    or a5, a7, a6
; CHECK-ALIGNED-RV64-NEXT:    or a4, a5, a4
; CHECK-ALIGNED-RV64-NEXT:    lbu a5, 13(a1)
; CHECK-ALIGNED-RV64-NEXT:    lbu a6, 12(a1)
; CHECK-ALIGNED-RV64-NEXT:    lbu a7, 14(a1)
; CHECK-ALIGNED-RV64-NEXT:    lbu t0, 15(a1)
; CHECK-ALIGNED-RV64-NEXT:    slli a5, a5, 8
; CHECK-ALIGNED-RV64-NEXT:    or a5, a5, a6
; CHECK-ALIGNED-RV64-NEXT:    slli a7, a7, 16
; CHECK-ALIGNED-RV64-NEXT:    slli t0, t0, 24
; CHECK-ALIGNED-RV64-NEXT:    or a6, t0, a7
; CHECK-ALIGNED-RV64-NEXT:    or a5, a6, a5
; CHECK-ALIGNED-RV64-NEXT:    slli a5, a5, 32
; CHECK-ALIGNED-RV64-NEXT:    or a4, a5, a4
; CHECK-ALIGNED-RV64-NEXT:    xor a3, a3, a4
; CHECK-ALIGNED-RV64-NEXT:    lbu a4, 17(a0)
; CHECK-ALIGNED-RV64-NEXT:    lbu a5, 16(a0)
; CHECK-ALIGNED-RV64-NEXT:    lbu a6, 18(a0)
; CHECK-ALIGNED-RV64-NEXT:    lbu a7, 19(a0)
; CHECK-ALIGNED-RV64-NEXT:    slli a4, a4, 8
; CHECK-ALIGNED-RV64-NEXT:    or a4, a4, a5
; CHECK-ALIGNED-RV64-NEXT:    slli a6, a6, 16
; CHECK-ALIGNED-RV64-NEXT:    slli a7, a7, 24
; CHECK-ALIGNED-RV64-NEXT:    or a5, a7, a6
; CHECK-ALIGNED-RV64-NEXT:    or a4, a5, a4
; CHECK-ALIGNED-RV64-NEXT:    lbu a5, 21(a0)
; CHECK-ALIGNED-RV64-NEXT:    lbu a6, 20(a0)
; CHECK-ALIGNED-RV64-NEXT:    lbu a7, 22(a0)
; CHECK-ALIGNED-RV64-NEXT:    lbu t0, 23(a0)
; CHECK-ALIGNED-RV64-NEXT:    slli a5, a5, 8
; CHECK-ALIGNED-RV64-NEXT:    or a5, a5, a6
; CHECK-ALIGNED-RV64-NEXT:    slli a7, a7, 16
; CHECK-ALIGNED-RV64-NEXT:    slli t0, t0, 24
; CHECK-ALIGNED-RV64-NEXT:    or a6, t0, a7
; CHECK-ALIGNED-RV64-NEXT:    or a5, a6, a5
; CHECK-ALIGNED-RV64-NEXT:    slli a5, a5, 32
; CHECK-ALIGNED-RV64-NEXT:    or a4, a5, a4
; CHECK-ALIGNED-RV64-NEXT:    lbu a5, 17(a1)
; CHECK-ALIGNED-RV64-NEXT:    lbu a6, 16(a1)
; CHECK-ALIGNED-RV64-NEXT:    lbu a7, 18(a1)
; CHECK-ALIGNED-RV64-NEXT:    lbu t0, 19(a1)
; CHECK-ALIGNED-RV64-NEXT:    slli a5, a5, 8
; CHECK-ALIGNED-RV64-NEXT:    or a5, a5, a6
; CHECK-ALIGNED-RV64-NEXT:    slli a7, a7, 16
; CHECK-ALIGNED-RV64-NEXT:    slli t0, t0, 24
; CHECK-ALIGNED-RV64-NEXT:    or a6, t0, a7
; CHECK-ALIGNED-RV64-NEXT:    or a5, a6, a5
; CHECK-ALIGNED-RV64-NEXT:    lbu a6, 21(a1)
; CHECK-ALIGNED-RV64-NEXT:    lbu a7, 20(a1)
; CHECK-ALIGNED-RV64-NEXT:    lbu t0, 22(a1)
; CHECK-ALIGNED-RV64-NEXT:    lbu t1, 23(a1)
; CHECK-ALIGNED-RV64-NEXT:    slli a6, a6, 8
; CHECK-ALIGNED-RV64-NEXT:    or a6, a6, a7
; CHECK-ALIGNED-RV64-NEXT:    slli t0, t0, 16
; CHECK-ALIGNED-RV64-NEXT:    slli t1, t1, 24
; CHECK-ALIGNED-RV64-NEXT:    or a7, t1, t0
; CHECK-ALIGNED-RV64-NEXT:    or a6, a7, a6
; CHECK-ALIGNED-RV64-NEXT:    slli a6, a6, 32
; CHECK-ALIGNED-RV64-NEXT:    or a5, a6, a5
; CHECK-ALIGNED-RV64-NEXT:    xor a4, a4, a5
; CHECK-ALIGNED-RV64-NEXT:    lbu a5, 25(a0)
; CHECK-ALIGNED-RV64-NEXT:    lbu a6, 24(a0)
; CHECK-ALIGNED-RV64-NEXT:    lbu a7, 26(a0)
; CHECK-ALIGNED-RV64-NEXT:    lbu t0, 27(a0)
; CHECK-ALIGNED-RV64-NEXT:    slli a5, a5, 8
; CHECK-ALIGNED-RV64-NEXT:    or a5, a5, a6
; CHECK-ALIGNED-RV64-NEXT:    slli a7, a7, 16
; CHECK-ALIGNED-RV64-NEXT:    slli t0, t0, 24
; CHECK-ALIGNED-RV64-NEXT:    or a6, t0, a7
; CHECK-ALIGNED-RV64-NEXT:    or a5, a6, a5
; CHECK-ALIGNED-RV64-NEXT:    lbu a6, 29(a0)
; CHECK-ALIGNED-RV64-NEXT:    lbu a7, 28(a0)
; CHECK-ALIGNED-RV64-NEXT:    lbu t0, 30(a0)
; CHECK-ALIGNED-RV64-NEXT:    lbu t1, 31(a0)
; CHECK-ALIGNED-RV64-NEXT:    slli a6, a6, 8
; CHECK-ALIGNED-RV64-NEXT:    or a6, a6, a7
; CHECK-ALIGNED-RV64-NEXT:    slli t0, t0, 16
; CHECK-ALIGNED-RV64-NEXT:    slli t1, t1, 24
; CHECK-ALIGNED-RV64-NEXT:    or a7, t1, t0
; CHECK-ALIGNED-RV64-NEXT:    or a6, a7, a6
; CHECK-ALIGNED-RV64-NEXT:    slli a6, a6, 32
; CHECK-ALIGNED-RV64-NEXT:    or a5, a6, a5
; CHECK-ALIGNED-RV64-NEXT:    lbu a6, 25(a1)
; CHECK-ALIGNED-RV64-NEXT:    lbu a7, 24(a1)
; CHECK-ALIGNED-RV64-NEXT:    lbu t0, 26(a1)
; CHECK-ALIGNED-RV64-NEXT:    lbu t1, 27(a1)
; CHECK-ALIGNED-RV64-NEXT:    slli a6, a6, 8
; CHECK-ALIGNED-RV64-NEXT:    or a6, a6, a7
; CHECK-ALIGNED-RV64-NEXT:    slli t0, t0, 16
; CHECK-ALIGNED-RV64-NEXT:    slli t1, t1, 24
; CHECK-ALIGNED-RV64-NEXT:    or a7, t1, t0
; CHECK-ALIGNED-RV64-NEXT:    or a6, a7, a6
; CHECK-ALIGNED-RV64-NEXT:    lbu a7, 29(a1)
; CHECK-ALIGNED-RV64-NEXT:    lbu t0, 28(a1)
; CHECK-ALIGNED-RV64-NEXT:    lbu t1, 30(a1)
; CHECK-ALIGNED-RV64-NEXT:    lbu t2, 31(a1)
; CHECK-ALIGNED-RV64-NEXT:    slli a7, a7, 8
; CHECK-ALIGNED-RV64-NEXT:    or a7, a7, t0
; CHECK-ALIGNED-RV64-NEXT:    slli t1, t1, 16
; CHECK-ALIGNED-RV64-NEXT:    slli t2, t2, 24
; CHECK-ALIGNED-RV64-NEXT:    or t0, t2, t1
; CHECK-ALIGNED-RV64-NEXT:    or a7, t0, a7
; CHECK-ALIGNED-RV64-NEXT:    slli a7, a7, 32
; CHECK-ALIGNED-RV64-NEXT:    or a6, a7, a6
; CHECK-ALIGNED-RV64-NEXT:    xor a5, a5, a6
; CHECK-ALIGNED-RV64-NEXT:    lbu a6, 33(a0)
; CHECK-ALIGNED-RV64-NEXT:    lbu a7, 32(a0)
; CHECK-ALIGNED-RV64-NEXT:    lbu t0, 34(a0)
; CHECK-ALIGNED-RV64-NEXT:    lbu t1, 35(a0)
; CHECK-ALIGNED-RV64-NEXT:    slli a6, a6, 8
; CHECK-ALIGNED-RV64-NEXT:    or a6, a6, a7
; CHECK-ALIGNED-RV64-NEXT:    slli t0, t0, 16
; CHECK-ALIGNED-RV64-NEXT:    slli t1, t1, 24
; CHECK-ALIGNED-RV64-NEXT:    or a7, t1, t0
; CHECK-ALIGNED-RV64-NEXT:    or a6, a7, a6
; CHECK-ALIGNED-RV64-NEXT:    lbu a7, 37(a0)
; CHECK-ALIGNED-RV64-NEXT:    lbu t0, 36(a0)
; CHECK-ALIGNED-RV64-NEXT:    lbu t1, 38(a0)
; CHECK-ALIGNED-RV64-NEXT:    lbu t2, 39(a0)
; CHECK-ALIGNED-RV64-NEXT:    slli a7, a7, 8
; CHECK-ALIGNED-RV64-NEXT:    or a7, a7, t0
; CHECK-ALIGNED-RV64-NEXT:    slli t1, t1, 16
; CHECK-ALIGNED-RV64-NEXT:    slli t2, t2, 24
; CHECK-ALIGNED-RV64-NEXT:    or t0, t2, t1
; CHECK-ALIGNED-RV64-NEXT:    or a7, t0, a7
; CHECK-ALIGNED-RV64-NEXT:    slli a7, a7, 32
; CHECK-ALIGNED-RV64-NEXT:    or a6, a7, a6
; CHECK-ALIGNED-RV64-NEXT:    lbu a7, 33(a1)
; CHECK-ALIGNED-RV64-NEXT:    lbu t0, 32(a1)
; CHECK-ALIGNED-RV64-NEXT:    lbu t1, 34(a1)
; CHECK-ALIGNED-RV64-NEXT:    lbu t2, 35(a1)
; CHECK-ALIGNED-RV64-NEXT:    slli a7, a7, 8
; CHECK-ALIGNED-RV64-NEXT:    or a7, a7, t0
; CHECK-ALIGNED-RV64-NEXT:    slli t1, t1, 16
; CHECK-ALIGNED-RV64-NEXT:    slli t2, t2, 24
; CHECK-ALIGNED-RV64-NEXT:    or t0, t2, t1
; CHECK-ALIGNED-RV64-NEXT:    or a7, t0, a7
; CHECK-ALIGNED-RV64-NEXT:    lbu t0, 37(a1)
; CHECK-ALIGNED-RV64-NEXT:    lbu t1, 36(a1)
; CHECK-ALIGNED-RV64-NEXT:    lbu t2, 38(a1)
; CHECK-ALIGNED-RV64-NEXT:    lbu t3, 39(a1)
; CHECK-ALIGNED-RV64-NEXT:    slli t0, t0, 8
; CHECK-ALIGNED-RV64-NEXT:    or t0, t0, t1
; CHECK-ALIGNED-RV64-NEXT:    slli t2, t2, 16
; CHECK-ALIGNED-RV64-NEXT:    slli t3, t3, 24
; CHECK-ALIGNED-RV64-NEXT:    or t1, t3, t2
; CHECK-ALIGNED-RV64-NEXT:    or t0, t1, t0
; CHECK-ALIGNED-RV64-NEXT:    slli t0, t0, 32
; CHECK-ALIGNED-RV64-NEXT:    or a7, t0, a7
; CHECK-ALIGNED-RV64-NEXT:    xor a6, a6, a7
; CHECK-ALIGNED-RV64-NEXT:    lbu a7, 41(a0)
; CHECK-ALIGNED-RV64-NEXT:    lbu t0, 40(a0)
; CHECK-ALIGNED-RV64-NEXT:    lbu t1, 42(a0)
; CHECK-ALIGNED-RV64-NEXT:    lbu t2, 43(a0)
; CHECK-ALIGNED-RV64-NEXT:    slli a7, a7, 8
; CHECK-ALIGNED-RV64-NEXT:    or a7, a7, t0
; CHECK-ALIGNED-RV64-NEXT:    slli t1, t1, 16
; CHECK-ALIGNED-RV64-NEXT:    slli t2, t2, 24
; CHECK-ALIGNED-RV64-NEXT:    or t0, t2, t1
; CHECK-ALIGNED-RV64-NEXT:    or a7, t0, a7
; CHECK-ALIGNED-RV64-NEXT:    lbu t0, 45(a0)
; CHECK-ALIGNED-RV64-NEXT:    lbu t1, 44(a0)
; CHECK-ALIGNED-RV64-NEXT:    lbu t2, 46(a0)
; CHECK-ALIGNED-RV64-NEXT:    lbu t3, 47(a0)
; CHECK-ALIGNED-RV64-NEXT:    slli t0, t0, 8
; CHECK-ALIGNED-RV64-NEXT:    or t0, t0, t1
; CHECK-ALIGNED-RV64-NEXT:    slli t2, t2, 16
; CHECK-ALIGNED-RV64-NEXT:    slli t3, t3, 24
; CHECK-ALIGNED-RV64-NEXT:    or t1, t3, t2
; CHECK-ALIGNED-RV64-NEXT:    or t0, t1, t0
; CHECK-ALIGNED-RV64-NEXT:    slli t0, t0, 32
; CHECK-ALIGNED-RV64-NEXT:    or a7, t0, a7
; CHECK-ALIGNED-RV64-NEXT:    lbu t0, 41(a1)
; CHECK-ALIGNED-RV64-NEXT:    lbu t1, 40(a1)
; CHECK-ALIGNED-RV64-NEXT:    lbu t2, 42(a1)
; CHECK-ALIGNED-RV64-NEXT:    lbu t3, 43(a1)
; CHECK-ALIGNED-RV64-NEXT:    slli t0, t0, 8
; CHECK-ALIGNED-RV64-NEXT:    or t0, t0, t1
; CHECK-ALIGNED-RV64-NEXT:    slli t2, t2, 16
; CHECK-ALIGNED-RV64-NEXT:    slli t3, t3, 24
; CHECK-ALIGNED-RV64-NEXT:    or t1, t3, t2
; CHECK-ALIGNED-RV64-NEXT:    or t0, t1, t0
; CHECK-ALIGNED-RV64-NEXT:    lbu t1, 45(a1)
; CHECK-ALIGNED-RV64-NEXT:    lbu t2, 44(a1)
; CHECK-ALIGNED-RV64-NEXT:    lbu t3, 46(a1)
; CHECK-ALIGNED-RV64-NEXT:    lbu t4, 47(a1)
; CHECK-ALIGNED-RV64-NEXT:    slli t1, t1, 8
; CHECK-ALIGNED-RV64-NEXT:    or t1, t1, t2
; CHECK-ALIGNED-RV64-NEXT:    slli t3, t3, 16
; CHECK-ALIGNED-RV64-NEXT:    slli t4, t4, 24
; CHECK-ALIGNED-RV64-NEXT:    or t2, t4, t3
; CHECK-ALIGNED-RV64-NEXT:    or t1, t2, t1
; CHECK-ALIGNED-RV64-NEXT:    slli t1, t1, 32
; CHECK-ALIGNED-RV64-NEXT:    or t0, t1, t0
; CHECK-ALIGNED-RV64-NEXT:    xor a7, a7, t0
; CHECK-ALIGNED-RV64-NEXT:    lbu t0, 49(a0)
; CHECK-ALIGNED-RV64-NEXT:    lbu t1, 48(a0)
; CHECK-ALIGNED-RV64-NEXT:    lbu t2, 50(a0)
; CHECK-ALIGNED-RV64-NEXT:    lbu t3, 51(a0)
; CHECK-ALIGNED-RV64-NEXT:    slli t0, t0, 8
; CHECK-ALIGNED-RV64-NEXT:    or t0, t0, t1
; CHECK-ALIGNED-RV64-NEXT:    slli t2, t2, 16
; CHECK-ALIGNED-RV64-NEXT:    slli t3, t3, 24
; CHECK-ALIGNED-RV64-NEXT:    or t1, t3, t2
; CHECK-ALIGNED-RV64-NEXT:    or t0, t1, t0
; CHECK-ALIGNED-RV64-NEXT:    lbu t1, 53(a0)
; CHECK-ALIGNED-RV64-NEXT:    lbu t2, 52(a0)
; CHECK-ALIGNED-RV64-NEXT:    lbu t3, 54(a0)
; CHECK-ALIGNED-RV64-NEXT:    lbu t4, 55(a0)
; CHECK-ALIGNED-RV64-NEXT:    slli t1, t1, 8
; CHECK-ALIGNED-RV64-NEXT:    or t1, t1, t2
; CHECK-ALIGNED-RV64-NEXT:    slli t3, t3, 16
; CHECK-ALIGNED-RV64-NEXT:    slli t4, t4, 24
; CHECK-ALIGNED-RV64-NEXT:    or t2, t4, t3
; CHECK-ALIGNED-RV64-NEXT:    or t1, t2, t1
; CHECK-ALIGNED-RV64-NEXT:    slli t1, t1, 32
; CHECK-ALIGNED-RV64-NEXT:    or t0, t1, t0
; CHECK-ALIGNED-RV64-NEXT:    lbu t1, 49(a1)
; CHECK-ALIGNED-RV64-NEXT:    lbu t2, 48(a1)
; CHECK-ALIGNED-RV64-NEXT:    lbu t3, 50(a1)
; CHECK-ALIGNED-RV64-NEXT:    lbu t4, 51(a1)
; CHECK-ALIGNED-RV64-NEXT:    slli t1, t1, 8
; CHECK-ALIGNED-RV64-NEXT:    or t1, t1, t2
; CHECK-ALIGNED-RV64-NEXT:    slli t3, t3, 16
; CHECK-ALIGNED-RV64-NEXT:    slli t4, t4, 24
; CHECK-ALIGNED-RV64-NEXT:    or t2, t4, t3
; CHECK-ALIGNED-RV64-NEXT:    or t1, t2, t1
; CHECK-ALIGNED-RV64-NEXT:    lbu t2, 53(a1)
; CHECK-ALIGNED-RV64-NEXT:    lbu t3, 52(a1)
; CHECK-ALIGNED-RV64-NEXT:    lbu t4, 54(a1)
; CHECK-ALIGNED-RV64-NEXT:    lbu t5, 55(a1)
; CHECK-ALIGNED-RV64-NEXT:    slli t2, t2, 8
; CHECK-ALIGNED-RV64-NEXT:    or t2, t2, t3
; CHECK-ALIGNED-RV64-NEXT:    slli t4, t4, 16
; CHECK-ALIGNED-RV64-NEXT:    slli t5, t5, 24
; CHECK-ALIGNED-RV64-NEXT:    or t3, t5, t4
; CHECK-ALIGNED-RV64-NEXT:    or t2, t3, t2
; CHECK-ALIGNED-RV64-NEXT:    slli t2, t2, 32
; CHECK-ALIGNED-RV64-NEXT:    or t1, t2, t1
; CHECK-ALIGNED-RV64-NEXT:    xor t0, t0, t1
; CHECK-ALIGNED-RV64-NEXT:    lbu t1, 57(a0)
; CHECK-ALIGNED-RV64-NEXT:    lbu t2, 56(a0)
; CHECK-ALIGNED-RV64-NEXT:    lbu t3, 58(a0)
; CHECK-ALIGNED-RV64-NEXT:    lbu t4, 59(a0)
; CHECK-ALIGNED-RV64-NEXT:    slli t1, t1, 8
; CHECK-ALIGNED-RV64-NEXT:    or t1, t1, t2
; CHECK-ALIGNED-RV64-NEXT:    slli t3, t3, 16
; CHECK-ALIGNED-RV64-NEXT:    slli t4, t4, 24
; CHECK-ALIGNED-RV64-NEXT:    or t2, t4, t3
; CHECK-ALIGNED-RV64-NEXT:    or t1, t2, t1
; CHECK-ALIGNED-RV64-NEXT:    lbu t2, 61(a0)
; CHECK-ALIGNED-RV64-NEXT:    lbu t3, 60(a0)
; CHECK-ALIGNED-RV64-NEXT:    lbu t4, 62(a0)
; CHECK-ALIGNED-RV64-NEXT:    lbu a0, 63(a0)
; CHECK-ALIGNED-RV64-NEXT:    slli t2, t2, 8
; CHECK-ALIGNED-RV64-NEXT:    or t2, t2, t3
; CHECK-ALIGNED-RV64-NEXT:    slli t4, t4, 16
; CHECK-ALIGNED-RV64-NEXT:    slli a0, a0, 24
; CHECK-ALIGNED-RV64-NEXT:    or a0, a0, t4
; CHECK-ALIGNED-RV64-NEXT:    or a0, a0, t2
; CHECK-ALIGNED-RV64-NEXT:    slli a0, a0, 32
; CHECK-ALIGNED-RV64-NEXT:    or a0, a0, t1
; CHECK-ALIGNED-RV64-NEXT:    lbu t1, 57(a1)
; CHECK-ALIGNED-RV64-NEXT:    lbu t2, 56(a1)
; CHECK-ALIGNED-RV64-NEXT:    lbu t3, 58(a1)
; CHECK-ALIGNED-RV64-NEXT:    lbu t4, 59(a1)
; CHECK-ALIGNED-RV64-NEXT:    slli t1, t1, 8
; CHECK-ALIGNED-RV64-NEXT:    or t1, t1, t2
; CHECK-ALIGNED-RV64-NEXT:    slli t3, t3, 16
; CHECK-ALIGNED-RV64-NEXT:    slli t4, t4, 24
; CHECK-ALIGNED-RV64-NEXT:    or t2, t4, t3
; CHECK-ALIGNED-RV64-NEXT:    or t1, t2, t1
; CHECK-ALIGNED-RV64-NEXT:    lbu t2, 61(a1)
; CHECK-ALIGNED-RV64-NEXT:    lbu t3, 60(a1)
; CHECK-ALIGNED-RV64-NEXT:    lbu t4, 62(a1)
; CHECK-ALIGNED-RV64-NEXT:    lbu a1, 63(a1)
; CHECK-ALIGNED-RV64-NEXT:    slli t2, t2, 8
; CHECK-ALIGNED-RV64-NEXT:    or t2, t2, t3
; CHECK-ALIGNED-RV64-NEXT:    slli t4, t4, 16
; CHECK-ALIGNED-RV64-NEXT:    slli a1, a1, 24
; CHECK-ALIGNED-RV64-NEXT:    or a1, a1, t4
; CHECK-ALIGNED-RV64-NEXT:    or a1, a1, t2
; CHECK-ALIGNED-RV64-NEXT:    slli a1, a1, 32
; CHECK-ALIGNED-RV64-NEXT:    or a1, a1, t1
; CHECK-ALIGNED-RV64-NEXT:    xor a0, a0, a1
; CHECK-ALIGNED-RV64-NEXT:    or a2, a2, a3
; CHECK-ALIGNED-RV64-NEXT:    or a4, a4, a5
; CHECK-ALIGNED-RV64-NEXT:    or a1, a6, a7
; CHECK-ALIGNED-RV64-NEXT:    or a0, t0, a0
; CHECK-ALIGNED-RV64-NEXT:    or a2, a2, a4
; CHECK-ALIGNED-RV64-NEXT:    or a0, a1, a0
; CHECK-ALIGNED-RV64-NEXT:    or a0, a2, a0
; CHECK-ALIGNED-RV64-NEXT:    seqz a0, a0
; CHECK-ALIGNED-RV64-NEXT:    ret
;
; CHECK-UNALIGNED-RV32-LABEL: memcmp_size_64:
; CHECK-UNALIGNED-RV32:       # %bb.0: # %entry
; CHECK-UNALIGNED-RV32-NEXT:    addi sp, sp, -16
; CHECK-UNALIGNED-RV32-NEXT:    .cfi_def_cfa_offset 16
; CHECK-UNALIGNED-RV32-NEXT:    sw ra, 12(sp) # 4-byte Folded Spill
; CHECK-UNALIGNED-RV32-NEXT:    .cfi_offset ra, -4
; CHECK-UNALIGNED-RV32-NEXT:    li a2, 64
; CHECK-UNALIGNED-RV32-NEXT:    call memcmp
; CHECK-UNALIGNED-RV32-NEXT:    seqz a0, a0
; CHECK-UNALIGNED-RV32-NEXT:    lw ra, 12(sp) # 4-byte Folded Reload
; CHECK-UNALIGNED-RV32-NEXT:    addi sp, sp, 16
; CHECK-UNALIGNED-RV32-NEXT:    ret
;
; CHECK-UNALIGNED-RV64-LABEL: memcmp_size_64:
; CHECK-UNALIGNED-RV64:       # %bb.0: # %entry
; CHECK-UNALIGNED-RV64-NEXT:    ld a2, 0(a0)
; CHECK-UNALIGNED-RV64-NEXT:    ld a3, 0(a1)
; CHECK-UNALIGNED-RV64-NEXT:    ld a4, 8(a0)
; CHECK-UNALIGNED-RV64-NEXT:    ld a5, 8(a1)
; CHECK-UNALIGNED-RV64-NEXT:    ld a6, 16(a0)
; CHECK-UNALIGNED-RV64-NEXT:    ld a7, 16(a1)
; CHECK-UNALIGNED-RV64-NEXT:    ld t0, 24(a0)
; CHECK-UNALIGNED-RV64-NEXT:    ld t1, 24(a1)
; CHECK-UNALIGNED-RV64-NEXT:    xor a2, a2, a3
; CHECK-UNALIGNED-RV64-NEXT:    xor a4, a4, a5
; CHECK-UNALIGNED-RV64-NEXT:    xor a3, a6, a7
; CHECK-UNALIGNED-RV64-NEXT:    xor a5, t0, t1
; CHECK-UNALIGNED-RV64-NEXT:    ld a6, 32(a0)
; CHECK-UNALIGNED-RV64-NEXT:    ld a7, 32(a1)
; CHECK-UNALIGNED-RV64-NEXT:    ld t0, 40(a0)
; CHECK-UNALIGNED-RV64-NEXT:    ld t1, 40(a1)
; CHECK-UNALIGNED-RV64-NEXT:    ld t2, 48(a0)
; CHECK-UNALIGNED-RV64-NEXT:    ld t3, 48(a1)
; CHECK-UNALIGNED-RV64-NEXT:    ld a0, 56(a0)
; CHECK-UNALIGNED-RV64-NEXT:    ld a1, 56(a1)
; CHECK-UNALIGNED-RV64-NEXT:    xor a6, a6, a7
; CHECK-UNALIGNED-RV64-NEXT:    xor a7, t0, t1
; CHECK-UNALIGNED-RV64-NEXT:    xor t0, t2, t3
; CHECK-UNALIGNED-RV64-NEXT:    xor a0, a0, a1
; CHECK-UNALIGNED-RV64-NEXT:    or a2, a2, a4
; CHECK-UNALIGNED-RV64-NEXT:    or a3, a3, a5
; CHECK-UNALIGNED-RV64-NEXT:    or a1, a6, a7
; CHECK-UNALIGNED-RV64-NEXT:    or a0, t0, a0
; CHECK-UNALIGNED-RV64-NEXT:    or a2, a2, a3
; CHECK-UNALIGNED-RV64-NEXT:    or a0, a1, a0
; CHECK-UNALIGNED-RV64-NEXT:    or a0, a2, a0
; CHECK-UNALIGNED-RV64-NEXT:    seqz a0, a0
; CHECK-UNALIGNED-RV64-NEXT:    ret
entry:
  %memcmp = call i32 @memcmp(i8* %s1, i8* %s2, iXLen 64)
  %ret = icmp eq i32 %memcmp, 0
  ret i1 %ret
}

define i1 @memcmp_size_runtime(i8* %s1, i8* %s2, iXLen %len) {
; CHECK-ALIGNED-RV32-LABEL: memcmp_size_runtime:
; CHECK-ALIGNED-RV32:       # %bb.0: # %entry
; CHECK-ALIGNED-RV32-NEXT:    addi sp, sp, -16
; CHECK-ALIGNED-RV32-NEXT:    .cfi_def_cfa_offset 16
; CHECK-ALIGNED-RV32-NEXT:    sw ra, 12(sp) # 4-byte Folded Spill
; CHECK-ALIGNED-RV32-NEXT:    .cfi_offset ra, -4
; CHECK-ALIGNED-RV32-NEXT:    call memcmp
; CHECK-ALIGNED-RV32-NEXT:    seqz a0, a0
; CHECK-ALIGNED-RV32-NEXT:    lw ra, 12(sp) # 4-byte Folded Reload
; CHECK-ALIGNED-RV32-NEXT:    addi sp, sp, 16
; CHECK-ALIGNED-RV32-NEXT:    ret
;
; CHECK-ALIGNED-RV64-LABEL: memcmp_size_runtime:
; CHECK-ALIGNED-RV64:       # %bb.0: # %entry
; CHECK-ALIGNED-RV64-NEXT:    addi sp, sp, -16
; CHECK-ALIGNED-RV64-NEXT:    .cfi_def_cfa_offset 16
; CHECK-ALIGNED-RV64-NEXT:    sd ra, 8(sp) # 8-byte Folded Spill
; CHECK-ALIGNED-RV64-NEXT:    .cfi_offset ra, -8
; CHECK-ALIGNED-RV64-NEXT:    call memcmp
; CHECK-ALIGNED-RV64-NEXT:    sext.w a0, a0
; CHECK-ALIGNED-RV64-NEXT:    seqz a0, a0
; CHECK-ALIGNED-RV64-NEXT:    ld ra, 8(sp) # 8-byte Folded Reload
; CHECK-ALIGNED-RV64-NEXT:    addi sp, sp, 16
; CHECK-ALIGNED-RV64-NEXT:    ret
;
; CHECK-UNALIGNED-RV32-LABEL: memcmp_size_runtime:
; CHECK-UNALIGNED-RV32:       # %bb.0: # %entry
; CHECK-UNALIGNED-RV32-NEXT:    addi sp, sp, -16
; CHECK-UNALIGNED-RV32-NEXT:    .cfi_def_cfa_offset 16
; CHECK-UNALIGNED-RV32-NEXT:    sw ra, 12(sp) # 4-byte Folded Spill
; CHECK-UNALIGNED-RV32-NEXT:    .cfi_offset ra, -4
; CHECK-UNALIGNED-RV32-NEXT:    call memcmp
; CHECK-UNALIGNED-RV32-NEXT:    seqz a0, a0
; CHECK-UNALIGNED-RV32-NEXT:    lw ra, 12(sp) # 4-byte Folded Reload
; CHECK-UNALIGNED-RV32-NEXT:    addi sp, sp, 16
; CHECK-UNALIGNED-RV32-NEXT:    ret
;
; CHECK-UNALIGNED-RV64-LABEL: memcmp_size_runtime:
; CHECK-UNALIGNED-RV64:       # %bb.0: # %entry
; CHECK-UNALIGNED-RV64-NEXT:    addi sp, sp, -16
; CHECK-UNALIGNED-RV64-NEXT:    .cfi_def_cfa_offset 16
; CHECK-UNALIGNED-RV64-NEXT:    sd ra, 8(sp) # 8-byte Folded Spill
; CHECK-UNALIGNED-RV64-NEXT:    .cfi_offset ra, -8
; CHECK-UNALIGNED-RV64-NEXT:    call memcmp
; CHECK-UNALIGNED-RV64-NEXT:    sext.w a0, a0
; CHECK-UNALIGNED-RV64-NEXT:    seqz a0, a0
; CHECK-UNALIGNED-RV64-NEXT:    ld ra, 8(sp) # 8-byte Folded Reload
; CHECK-UNALIGNED-RV64-NEXT:    addi sp, sp, 16
; CHECK-UNALIGNED-RV64-NEXT:    ret
entry:
  %memcmp = call i32 @memcmp(i8* %s1, i8* %s2, iXLen %len)
  %ret = icmp eq i32 %memcmp, 0
  ret i1 %ret
}

define i1 @memcmp_not_compare_zero(i8* %s1, i8* %s2) {
; CHECK-ALIGNED-RV32-LABEL: memcmp_not_compare_zero:
; CHECK-ALIGNED-RV32:       # %bb.0: # %entry
; CHECK-ALIGNED-RV32-NEXT:    lbu a2, 0(a0)
; CHECK-ALIGNED-RV32-NEXT:    lbu a3, 1(a0)
; CHECK-ALIGNED-RV32-NEXT:    lbu a4, 3(a0)
; CHECK-ALIGNED-RV32-NEXT:    lbu a0, 2(a0)
; CHECK-ALIGNED-RV32-NEXT:    lbu a5, 0(a1)
; CHECK-ALIGNED-RV32-NEXT:    lbu a6, 1(a1)
; CHECK-ALIGNED-RV32-NEXT:    lbu a7, 3(a1)
; CHECK-ALIGNED-RV32-NEXT:    lbu a1, 2(a1)
; CHECK-ALIGNED-RV32-NEXT:    slli a0, a0, 8
; CHECK-ALIGNED-RV32-NEXT:    or a0, a0, a4
; CHECK-ALIGNED-RV32-NEXT:    slli a3, a3, 16
; CHECK-ALIGNED-RV32-NEXT:    slli a2, a2, 24
; CHECK-ALIGNED-RV32-NEXT:    or a2, a2, a3
; CHECK-ALIGNED-RV32-NEXT:    or a0, a2, a0
; CHECK-ALIGNED-RV32-NEXT:    slli a1, a1, 8
; CHECK-ALIGNED-RV32-NEXT:    or a1, a1, a7
; CHECK-ALIGNED-RV32-NEXT:    slli a6, a6, 16
; CHECK-ALIGNED-RV32-NEXT:    slli a5, a5, 24
; CHECK-ALIGNED-RV32-NEXT:    or a2, a5, a6
; CHECK-ALIGNED-RV32-NEXT:    or a1, a2, a1
; CHECK-ALIGNED-RV32-NEXT:    sltu a2, a1, a0
; CHECK-ALIGNED-RV32-NEXT:    sltu a0, a0, a1
; CHECK-ALIGNED-RV32-NEXT:    sub a2, a2, a0
; CHECK-ALIGNED-RV32-NEXT:    addi a2, a2, -1
; CHECK-ALIGNED-RV32-NEXT:    seqz a0, a2
; CHECK-ALIGNED-RV32-NEXT:    ret
;
; CHECK-ALIGNED-RV64-LABEL: memcmp_not_compare_zero:
; CHECK-ALIGNED-RV64:       # %bb.0: # %entry
; CHECK-ALIGNED-RV64-NEXT:    lbu a2, 0(a0)
; CHECK-ALIGNED-RV64-NEXT:    lbu a3, 1(a0)
; CHECK-ALIGNED-RV64-NEXT:    lbu a4, 2(a0)
; CHECK-ALIGNED-RV64-NEXT:    lb a0, 3(a0)
; CHECK-ALIGNED-RV64-NEXT:    lbu a5, 0(a1)
; CHECK-ALIGNED-RV64-NEXT:    lbu a6, 1(a1)
; CHECK-ALIGNED-RV64-NEXT:    lbu a7, 2(a1)
; CHECK-ALIGNED-RV64-NEXT:    lb a1, 3(a1)
; CHECK-ALIGNED-RV64-NEXT:    andi a0, a0, 255
; CHECK-ALIGNED-RV64-NEXT:    slli a4, a4, 8
; CHECK-ALIGNED-RV64-NEXT:    or a0, a4, a0
; CHECK-ALIGNED-RV64-NEXT:    slli a3, a3, 16
; CHECK-ALIGNED-RV64-NEXT:    slliw a2, a2, 24
; CHECK-ALIGNED-RV64-NEXT:    or a2, a2, a3
; CHECK-ALIGNED-RV64-NEXT:    or a0, a2, a0
; CHECK-ALIGNED-RV64-NEXT:    andi a1, a1, 255
; CHECK-ALIGNED-RV64-NEXT:    slli a7, a7, 8
; CHECK-ALIGNED-RV64-NEXT:    or a1, a7, a1
; CHECK-ALIGNED-RV64-NEXT:    slli a6, a6, 16
; CHECK-ALIGNED-RV64-NEXT:    slliw a2, a5, 24
; CHECK-ALIGNED-RV64-NEXT:    or a2, a2, a6
; CHECK-ALIGNED-RV64-NEXT:    or a1, a2, a1
; CHECK-ALIGNED-RV64-NEXT:    sltu a2, a1, a0
; CHECK-ALIGNED-RV64-NEXT:    sltu a0, a0, a1
; CHECK-ALIGNED-RV64-NEXT:    sub a2, a2, a0
; CHECK-ALIGNED-RV64-NEXT:    addi a2, a2, -1
; CHECK-ALIGNED-RV64-NEXT:    seqz a0, a2
; CHECK-ALIGNED-RV64-NEXT:    ret
;
; CHECK-UNALIGNED-RV32-LABEL: memcmp_not_compare_zero:
; CHECK-UNALIGNED-RV32:       # %bb.0: # %entry
; CHECK-UNALIGNED-RV32-NEXT:    lw a0, 0(a0)
; CHECK-UNALIGNED-RV32-NEXT:    lw a1, 0(a1)
; CHECK-UNALIGNED-RV32-NEXT:    srli a2, a0, 8
; CHECK-UNALIGNED-RV32-NEXT:    lui a3, 16
; CHECK-UNALIGNED-RV32-NEXT:    addi a3, a3, -256
; CHECK-UNALIGNED-RV32-NEXT:    and a2, a2, a3
; CHECK-UNALIGNED-RV32-NEXT:    srli a4, a0, 24
; CHECK-UNALIGNED-RV32-NEXT:    or a2, a2, a4
; CHECK-UNALIGNED-RV32-NEXT:    and a4, a0, a3
; CHECK-UNALIGNED-RV32-NEXT:    slli a4, a4, 8
; CHECK-UNALIGNED-RV32-NEXT:    slli a0, a0, 24
; CHECK-UNALIGNED-RV32-NEXT:    or a0, a0, a4
; CHECK-UNALIGNED-RV32-NEXT:    or a0, a0, a2
; CHECK-UNALIGNED-RV32-NEXT:    srli a2, a1, 8
; CHECK-UNALIGNED-RV32-NEXT:    and a2, a2, a3
; CHECK-UNALIGNED-RV32-NEXT:    srli a4, a1, 24
; CHECK-UNALIGNED-RV32-NEXT:    or a2, a2, a4
; CHECK-UNALIGNED-RV32-NEXT:    and a3, a1, a3
; CHECK-UNALIGNED-RV32-NEXT:    slli a3, a3, 8
; CHECK-UNALIGNED-RV32-NEXT:    slli a1, a1, 24
; CHECK-UNALIGNED-RV32-NEXT:    or a1, a1, a3
; CHECK-UNALIGNED-RV32-NEXT:    or a1, a1, a2
; CHECK-UNALIGNED-RV32-NEXT:    sltu a2, a1, a0
; CHECK-UNALIGNED-RV32-NEXT:    sltu a0, a0, a1
; CHECK-UNALIGNED-RV32-NEXT:    sub a2, a2, a0
; CHECK-UNALIGNED-RV32-NEXT:    addi a2, a2, -1
; CHECK-UNALIGNED-RV32-NEXT:    seqz a0, a2
; CHECK-UNALIGNED-RV32-NEXT:    ret
;
; CHECK-UNALIGNED-RV64-LABEL: memcmp_not_compare_zero:
; CHECK-UNALIGNED-RV64:       # %bb.0: # %entry
; CHECK-UNALIGNED-RV64-NEXT:    lw a0, 0(a0)
; CHECK-UNALIGNED-RV64-NEXT:    lw a1, 0(a1)
; CHECK-UNALIGNED-RV64-NEXT:    srli a2, a0, 8
; CHECK-UNALIGNED-RV64-NEXT:    lui a3, 16
; CHECK-UNALIGNED-RV64-NEXT:    addiw a3, a3, -256
; CHECK-UNALIGNED-RV64-NEXT:    and a2, a2, a3
; CHECK-UNALIGNED-RV64-NEXT:    srliw a4, a0, 24
; CHECK-UNALIGNED-RV64-NEXT:    or a2, a2, a4
; CHECK-UNALIGNED-RV64-NEXT:    and a4, a0, a3
; CHECK-UNALIGNED-RV64-NEXT:    slli a4, a4, 8
; CHECK-UNALIGNED-RV64-NEXT:    slliw a0, a0, 24
; CHECK-UNALIGNED-RV64-NEXT:    or a0, a0, a4
; CHECK-UNALIGNED-RV64-NEXT:    or a0, a0, a2
; CHECK-UNALIGNED-RV64-NEXT:    srli a2, a1, 8
; CHECK-UNALIGNED-RV64-NEXT:    and a2, a2, a3
; CHECK-UNALIGNED-RV64-NEXT:    srliw a4, a1, 24
; CHECK-UNALIGNED-RV64-NEXT:    or a2, a2, a4
; CHECK-UNALIGNED-RV64-NEXT:    and a3, a1, a3
; CHECK-UNALIGNED-RV64-NEXT:    slli a3, a3, 8
; CHECK-UNALIGNED-RV64-NEXT:    slliw a1, a1, 24
; CHECK-UNALIGNED-RV64-NEXT:    or a1, a1, a3
; CHECK-UNALIGNED-RV64-NEXT:    or a1, a1, a2
; CHECK-UNALIGNED-RV64-NEXT:    sltu a2, a1, a0
; CHECK-UNALIGNED-RV64-NEXT:    sltu a0, a0, a1
; CHECK-UNALIGNED-RV64-NEXT:    sub a2, a2, a0
; CHECK-UNALIGNED-RV64-NEXT:    addi a2, a2, -1
; CHECK-UNALIGNED-RV64-NEXT:    seqz a0, a2
; CHECK-UNALIGNED-RV64-NEXT:    ret
entry:
  %memcmp = call i32 @memcmp(i8* %s1, i8* %s2, iXLen 4)
  %ret = icmp eq i32 %memcmp, 1
  ret i1 %ret
}
;; NOTE: These prefixes are unused and the list is autogenerated. Do not add tests below this line:
; CHECK-ALIGNED-RV32-V: {{.*}}
; CHECK-ALIGNED-RV64-V: {{.*}}
; CHECK-UNALIGNED-RV32-V: {{.*}}
; CHECK-UNALIGNED-RV64-V: {{.*}}
